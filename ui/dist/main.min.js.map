{"version":3,"sources":["webpack:///main.min.js","webpack:///./ui/scripts/main.jsx","webpack:///./~/foundation-sites/dist/js/foundation.js"],"names":["webpackJsonp","0","module","exports","__webpack_require__","1","_interopRequireDefault","obj","__esModule","default","_jquery","_jquery2","document","ready","click","e","slug","currentTarget","dataset","radioLink","window","location","href","playsPath","preventDefault","foundation","94","jQuery","_classCallCheck","instance","Constructor","TypeError","$","functionName","fn","undefined","Function","prototype","name","funcNameRegex","results","exec","toString","length","trim","constructor","parseValue","str","isNaN","parseFloat","hyphenate","replace","toLowerCase","FOUNDATION_VERSION","Foundation","version","_plugins","_uuids","rtl","attr","plugin","className","attrName","this","registerPlugin","pluginName","uuid","GetYoDigits","$element","data","trigger","push","unregisterPlugin","splice","indexOf","removeAttr","removeData","prop","reInit","plugins","isJQ","each","_init","type","_this","fns","object","plgs","forEach","p","string","Object","keys","err","console","error","namespace","Math","round","pow","random","slice","reflow","elem","i","$elem","find","addBack","$el","opts","warn","split","opt","map","el","er","getFnName","transitionend","end","transitions","transition","WebkitTransition","MozTransition","OTransition","createElement","t","style","setTimeout","triggerHandler","util","throttle","func","delay","timer","context","args","arguments","apply","method","$meta","$noJS","appendTo","head","removeClass","MediaQuery","Array","call","plugClass","ReferenceError","Date","now","getTime","vendors","requestAnimationFrame","vp","cancelAnimationFrame","test","navigator","userAgent","lastTime","callback","nextTime","max","clearTimeout","performance","start","bind","oThis","aArgs","fToBind","fNOP","fBound","concat","ImNotTouchingYou","element","parent","lrOnly","tbOnly","top","bottom","left","right","eleDims","GetDimensions","parDims","offset","height","width","windowDims","allDirs","Error","rect","getBoundingClientRect","parRect","parentNode","winRect","body","winY","pageYOffset","winX","pageXOffset","parentDims","GetOffsets","anchor","position","vOffset","hOffset","isOverflow","$eleDims","$anchorDims","Box","getKeyCodes","kcs","k","kc","keyCodes","9","13","27","32","37","38","39","40","commands","Keyboard","parseKey","event","key","which","keyCode","String","fromCharCode","toUpperCase","shiftKey","ctrlKey","altKey","handleKey","component","functions","cmds","command","commandList","ltr","extend","returnValue","handled","unhandled","findFocusable","filter","is","register","componentName","trapFocus","$focusable","$firstFocusable","eq","$lastFocusable","on","target","focus","releaseFocus","off","parseStyleToObject","styleObject","reduce","ret","param","parts","val","decodeURIComponent","hasOwnProperty","isArray","queries","current","namedQueries","self","extractedStyles","css","value","_getCurrentSize","_watcher","atLeast","size","query","get","matchMedia","matches","matched","newSize","currentSize","styleMedia","media","script","getElementsByTagName","info","id","insertBefore","getComputedStyle","currentStyle","matchMedium","text","styleSheet","cssText","textContent","Move","duration","move","ts","prog","anim","animate","isIn","animation","cb","finish","hide","reset","transitionDuration","initClass","activeClass","initClasses","activeClasses","addClass","show","offsetWidth","one","Motion","animateIn","animateOut","Nest","Feather","menu","items","role","subMenuClass","subItemClass","hasSubClass","$item","$sub","children","aria-haspopup","aria-label","aria-expanded","data-submenu","aria-hidden","Burn","Timer","options","nameSpace","remain","isPaused","restart","infinite","pause","onImagesLoaded","images","singleImageLoaded","unloaded","complete","readyState","src","onTouchEnd","removeEventListener","onTouchMove","isMoving","spotSwipe","dir","x","touches","pageX","dx","pageY","startPosX","elapsedTime","startTime","abs","moveThreshold","timeThreshold","onTouchStart","startPosY","addEventListener","init","enabled","documentElement","special","swipe","setup","noop","addTouch","handleTouch","simulatedEvent","changedTouches","first","eventTypes","touchstart","touchmove","touchend","MouseEvent","bubbles","cancelable","screenX","screenY","clientX","clientY","createEvent","initMouseEvent","dispatchEvent","checkListeners","eventsListener","resizeListener","scrollListener","mutateListener","closemeListener","yetiBoxes","plugNames","listeners","join","pluginId","not","debounce","$nodes","MutationObserver","nodes","querySelectorAll","listeningElementsMutation","mutationRecordsList","$target","attributeName","closest","elementObserver","observe","attributes","childList","characterData","subtree","attributeFilter","prefixes","triggers","stopPropagation","fadeOut","IHearYou","_createClass","defineProperties","props","descriptor","enumerable","configurable","writable","defineProperty","protoProps","staticProps","Abide","defaults","$inputs","_events","_this2","resetForm","validateForm","validateOn","validateInput","liveValidate","validateOnBlur","isGood","checked","$error","siblings","formErrorSelector","$label","$els","_this3","labels","findLabel","$formError","findFormError","labelErrorClass","formErrorClass","inputErrorClass","groupName","$labels","findRadioLabels","$formErrors","removeRadioErrorClasses","_this4","clearRequire","requiredCheck","validated","customValidator","validator","equalTo","validateRadio","validateText","matchValidation","validators","goodToGo","message","dependentElements","acc","noError","pattern","inputText","valid","patterns","RegExp","$group","required","_this5","clear","v","$form","removeErrorClasses","alpha","alpha_numeric","integer","number","card","cvv","email","url","domain","datetime","date","time","dateISO","month_day_year","day_month_year","color","Accordion","ENTER","SPACE","ARROW_DOWN","ARROW_UP","$tabs","idx","$content","linkId","aria-controls","aria-selected","aria-labelledby","$initActive","down","$tabContent","toggle","next","$a","multiExpand","previous","prev","hasClass","up","firstTime","$currentActive","slideDown","slideSpeed","$aunts","allowAllClosed","slideUp","stop","AccordionMenu","ARROW_RIGHT","ARROW_LEFT","ESCAPE","aria-multiselectable","multiOpen","$menuLinks","subId","isActive","initPanes","$submenu","$prevElement","$nextElement","$elements","min","parents","open","close","closeAll","hideAll","stopImmediatePropagation","parentsUntil","add","$menus","Drilldown","TAB","SHIFT_TAB","$submenuAnchors","$submenus","$menuItems","_prepareMenu","_registerEvents","_keyboardEvents","$link","parentLink","clone","prependTo","wrap","tabindex","$menu","$back","backButtonPosition","append","backButton","prepend","_back","autoHeight","$wrapper","wrapper","animateHeight","_getMaxDims","max-width","min-height","_show","closeOnClick","$body","contains","_hideAll","_resize","scrollTop","_bindHandler","_scrollTop","$scrollTopElement","scrollTopElement","scrollPos","parseInt","scrollTopOffset","animationDuration","animationEasing","_hide","parentSubMenu","blur","maxHeight","result","unwrap","remove","Dropdown","$id","$anchor","data-is-focus","data-yeti-box","parentClass","$parent","positionClass","getPositionClass","counter","usedPositions","data-resize","verticalPosition","match","horizontalPosition","classChanged","direction","newWidth","parentHOffset","$parentDims","_reposition","_setPosition","open.zf.trigger","close.zf.trigger","toggle.zf.trigger","resizeme.zf.trigger","hover","bodyData","whatinput","timeout","hoverDelay","hoverPane","autoFocus","_addBodyHandler","curPositionClass","DropdownMenu","subs","verticalClass","rightClass","alignment","changed","hasTouch","ontouchstart","parClass","handleClickFn","hasSub","hasClicked","clickOpen","forceFollow","closeOnClickInside","disableHover","autoclose","closingTime","isTab","index","nextSibling","prevSibling","openSub","closeSub","_isVertical","$sibs","oldClass","$parentLi","$toClose","somethingToClose","data-is-click","Equalizer","eqId","$watched","hasNested","isNested","isOn","onResizeMeBound","_onResizeMe","onPostEqualizedBound","_onPostEqualized","tooSmall","imgs","equalizeOn","_checkMQ","_reflow",".zf.equalizer","mutateme.zf.trigger","_pauseEvents","equalizeOnStack","_isStacked","equalizeByRow","getHeightsByRow","applyHeightByRow","getHeights","applyHeight","heights","len","offsetHeight","lastElTopOffset","groups","group","elOffsetTop","j","ln","groupsILength","lenJ","Interchange","rules","currentPath","_addBreakpoints","_generateRules","rule","path","SPECIAL_QUERIES","rulesList","nodeName","background-image","response","html","landscape","portrait","retina","Magellan","calcPoints","$targets","$links","data-scroll","$active","points","winHeight","innerHeight","clientHeight","docHeight","scrollHeight","$tar","pt","threshold","targetPoint","easing","deepLinking","hash","scrollToLoc","_updateActive","scrollme.zf.trigger","arrival","getAttribute","loc","_inTransition","barOffset","curIdx","winPos","isDown","curVisible","history","pushState","OffCanvas","$lastTrigger","$triggers","contentOverlay","overlay","overlayPosition","setAttribute","$overlay","isRevealed","revealClass","revealOn","_setMQChecker","transitionTime","keydown.zf.offcanvas","_handleKeyboard","click.zf.offcanvas","reveal","$closer","forceTo","scrollTo","contentScroll","_stopScrolling","Orbit","_reset","containerClass","$slides","slideClass","$images","initActive","useMUI","_prepareForOrbit","bullets","_loadBullets","autoPlay","geoSync","accessible","$bullets","boxOfBullets","timerDelay","changeSlide","_setWrapperHeight","temp","display","pauseOnHover","navButtons","$controls","nextClass","prevClass","$slide","_updateBullets","isLTR","chosenSlide","$curSlide","$newSlide","$firstSlide","$lastSlide","last","dirIn","dirOut","infiniteWrap","$oldBullet","span","detach","animInFromRight","animOutToRight","animInFromLeft","animOutToLeft","ResponsiveMenu","currentMq","currentPlugin","rulesTree","ruleSize","rulePlugin","MenuPlugins","isEmptyObject","_checkMediaQueries","matchedMq","cssClass","destroy","dropdown","drilldown","accordion","ResponsiveToggle","targetID","$targetMenu","$toggler","input","animationIn","animationOut","_update","_updateMqHandler","toggleMenu","hideFor","iPhoneSniff","androidSniff","mobileSniff","Reveal","cached","mq","isMobile","fullScreen","_makeOverlay","deepLink","outerWidth","outerHeight","margin","_updatePosition","_handleState","addRevealOpenClasses","originalScrollPos","visibility","multipleOpened","afterAnimation","focusableElements","showDelay","_extraHandlers","closeOnEsc","finishUp","hideDelay","resetOnClose","replaceState","title","btmOffsetPct","percent","frac","num","absPosition","$handle","clickPos","baseLog","base","log","Slider","SHIFT_ARROW_RIGHT","SHIFT_ARROW_UP","SHIFT_ARROW_DOWN","SHIFT_ARROW_LEFT","inputs","handles","$input","$fill","vertical","isDbl","disabled","disabledClass","binding","_setInitAttr","doubleSided","$handle2","$input2","setHandles","_setHandlePos","pctOfBar","positionValueFunction","_logTransform","_powTransform","toFixed","nonLinearBase","$hndl","noInvert","h2Val","step","h1Val","vert","hOrW","lOrT","handleDim","elemDim","_pctOfBar","pxToMove","movement","decimal","_setValues","dim","isLeftHndl","handlePct","handlePos","initialStart","moveTime","changedDelay","initVal","initialEnd","aria-valuemax","aria-valuemin","aria-valuenow","aria-orientation","hasVal","_adjustValue","eventOffset","barDim","windowScroll","scrollLeft","elemOffset","barXY","eventFromBar","offsetPct","_value","firstHndlPos","secndHndlPos","prev_val","next_val","div","_eventsForHandle","curHandle","_handleEvent","clickSelect","draggable","newValue","_$handle","oldValue","decrease","increase","decrease_fast","increase_fast","invertVertical","emCalc","em","fontSize","Sticky","wasWrapped","$container","container","wrapInner","stickyClass","scrollCount","checkEvery","isStuck","containerHeight","elemHeight","_parsePoints","_setSizes","scroll","_calc","_removeSticky","topPoint","reverse","topAnchor","btm","btmAnchor","pts","breaks","place","canStick","_pauseListeners","checkSizes","bottomPoint","_setSticky","stickTo","mrgn","notStuckTo","isTop","stickToTop","anchorPt","anchorHeight","topOrBottom","stickyOn","newElemWidth","comp","pdngl","pdngr","newContainerHeight","_setBreakPoints","mTop","marginTop","mBtm","marginBottom","Tabs","$tabTitles","linkClass","linkActiveClass","load","deepLinkSmudgeDelay","selectTab","deepLinkSmudge","matchHeight","_setHeight","_addKeyHandler","_addClickHandler","_setHeightMqHandler","_handleTabChange","wrapOnKeys","activeCollapse","_collapseTab","$oldTab","$tabLink","$targetContent","_openTab","updateHistory","panelActiveClass","$target_anchor","idStr","panelClass","panel","Toggler","toggleClass","_updateARIA","Tooltip","isClick","elemId","_getPositionClass","tipText","template","_buildTemplate","allowHtml","aria-describedby","data-toggle","triggerClass","templateClasses","tooltipClass","$template","data-is-active","$tipDims","showOn","fadeIn","fadeInDuration","fadeOutDuration","isFocus","disableForTouch","touchCloseText","ResponsiveAccordionTabs","_getAllOptions","allOptions","dummyPlugin","tmpPlugin","keyKey","objObj","storezfData","_handleMarkup","toSet","fromString","$panels","tabsTitle","tabsPanel","$liHeads","$liHeadsA","after","$tabsContent","$placeholder","insertAfter","tempValue","tabs","95","97"],"mappings":"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","file":"main.min.js","sourcesContent":["webpackJsonp([0],{\n\n/***/ 0:\n/***/ function(module, exports, __webpack_require__) {\n\n\tmodule.exports = __webpack_require__(1);\n\n\n/***/ },\n\n/***/ 1:\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tvar _jquery = __webpack_require__(2);\n\t\n\tvar _jquery2 = _interopRequireDefault(_jquery);\n\t\n\t__webpack_require__(94);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\t/* Common JS functionality, loaded for every page */\n\t\n\t__webpack_require__(95);\n\t__webpack_require__(97);\n\t\n\t(0, _jquery2.default)(document).ready(function () {\n\t\n\t    // Radio links\n\t    (0, _jquery2.default)(\"[data-radio-link]\").click(function (e) {\n\t        var slug = e.currentTarget.dataset.radioLink;\n\t        window.location.href = playsPath + \"?radio=\" + slug;\n\t        e.preventDefault();\n\t    });\n\t\n\t    // Kickstart Foundation JS\n\t    (0, _jquery2.default)(document).foundation();\n\t});\n\t\n\t/* global window document playsPath */\n\n/***/ },\n\n/***/ 94:\n/***/ function(module, exports, __webpack_require__) {\n\n\t/* WEBPACK VAR INJECTION */(function(jQuery) {!function ($) {\n\t\n\t  \"use strict\";\n\t\n\t  var FOUNDATION_VERSION = '6.3.0';\n\t\n\t  // Global Foundation object\n\t  // This is attached to the window, or used as a module for AMD/Browserify\n\t  var Foundation = {\n\t    version: FOUNDATION_VERSION,\n\t\n\t    /**\n\t     * Stores initialized plugins.\n\t     */\n\t    _plugins: {},\n\t\n\t    /**\n\t     * Stores generated unique ids for plugin instances\n\t     */\n\t    _uuids: [],\n\t\n\t    /**\n\t     * Returns a boolean for RTL support\n\t     */\n\t    rtl: function () {\n\t      return $('html').attr('dir') === 'rtl';\n\t    },\n\t    /**\n\t     * Defines a Foundation plugin, adding it to the `Foundation` namespace and the list of plugins to initialize when reflowing.\n\t     * @param {Object} plugin - The constructor of the plugin.\n\t     */\n\t    plugin: function (plugin, name) {\n\t      // Object key to use when adding to global Foundation object\n\t      // Examples: Foundation.Reveal, Foundation.OffCanvas\n\t      var className = name || functionName(plugin);\n\t      // Object key to use when storing the plugin, also used to create the identifying data attribute for the plugin\n\t      // Examples: data-reveal, data-off-canvas\n\t      var attrName = hyphenate(className);\n\t\n\t      // Add to the Foundation object and the plugins list (for reflowing)\n\t      this._plugins[attrName] = this[className] = plugin;\n\t    },\n\t    /**\n\t     * @function\n\t     * Populates the _uuids array with pointers to each individual plugin instance.\n\t     * Adds the `zfPlugin` data-attribute to programmatically created plugins to allow use of $(selector).foundation(method) calls.\n\t     * Also fires the initialization event for each plugin, consolidating repetitive code.\n\t     * @param {Object} plugin - an instance of a plugin, usually `this` in context.\n\t     * @param {String} name - the name of the plugin, passed as a camelCased string.\n\t     * @fires Plugin#init\n\t     */\n\t    registerPlugin: function (plugin, name) {\n\t      var pluginName = name ? hyphenate(name) : functionName(plugin.constructor).toLowerCase();\n\t      plugin.uuid = this.GetYoDigits(6, pluginName);\n\t\n\t      if (!plugin.$element.attr('data-' + pluginName)) {\n\t        plugin.$element.attr('data-' + pluginName, plugin.uuid);\n\t      }\n\t      if (!plugin.$element.data('zfPlugin')) {\n\t        plugin.$element.data('zfPlugin', plugin);\n\t      }\n\t      /**\n\t       * Fires when the plugin has initialized.\n\t       * @event Plugin#init\n\t       */\n\t      plugin.$element.trigger('init.zf.' + pluginName);\n\t\n\t      this._uuids.push(plugin.uuid);\n\t\n\t      return;\n\t    },\n\t    /**\n\t     * @function\n\t     * Removes the plugins uuid from the _uuids array.\n\t     * Removes the zfPlugin data attribute, as well as the data-plugin-name attribute.\n\t     * Also fires the destroyed event for the plugin, consolidating repetitive code.\n\t     * @param {Object} plugin - an instance of a plugin, usually `this` in context.\n\t     * @fires Plugin#destroyed\n\t     */\n\t    unregisterPlugin: function (plugin) {\n\t      var pluginName = hyphenate(functionName(plugin.$element.data('zfPlugin').constructor));\n\t\n\t      this._uuids.splice(this._uuids.indexOf(plugin.uuid), 1);\n\t      plugin.$element.removeAttr('data-' + pluginName).removeData('zfPlugin')\n\t      /**\n\t       * Fires when the plugin has been destroyed.\n\t       * @event Plugin#destroyed\n\t       */\n\t      .trigger('destroyed.zf.' + pluginName);\n\t      for (var prop in plugin) {\n\t        plugin[prop] = null; //clean up script to prep for garbage collection.\n\t      }\n\t      return;\n\t    },\n\t\n\t    /**\n\t     * @function\n\t     * Causes one or more active plugins to re-initialize, resetting event listeners, recalculating positions, etc.\n\t     * @param {String} plugins - optional string of an individual plugin key, attained by calling `$(element).data('pluginName')`, or string of a plugin class i.e. `'dropdown'`\n\t     * @default If no argument is passed, reflow all currently active plugins.\n\t     */\n\t    reInit: function (plugins) {\n\t      var isJQ = plugins instanceof $;\n\t      try {\n\t        if (isJQ) {\n\t          plugins.each(function () {\n\t            $(this).data('zfPlugin')._init();\n\t          });\n\t        } else {\n\t          var type = typeof plugins,\n\t              _this = this,\n\t              fns = {\n\t            'object': function (plgs) {\n\t              plgs.forEach(function (p) {\n\t                p = hyphenate(p);\n\t                $('[data-' + p + ']').foundation('_init');\n\t              });\n\t            },\n\t            'string': function () {\n\t              plugins = hyphenate(plugins);\n\t              $('[data-' + plugins + ']').foundation('_init');\n\t            },\n\t            'undefined': function () {\n\t              this['object'](Object.keys(_this._plugins));\n\t            }\n\t          };\n\t          fns[type](plugins);\n\t        }\n\t      } catch (err) {\n\t        console.error(err);\n\t      } finally {\n\t        return plugins;\n\t      }\n\t    },\n\t\n\t    /**\n\t     * returns a random base-36 uid with namespacing\n\t     * @function\n\t     * @param {Number} length - number of random base-36 digits desired. Increase for more random strings.\n\t     * @param {String} namespace - name of plugin to be incorporated in uid, optional.\n\t     * @default {String} '' - if no plugin name is provided, nothing is appended to the uid.\n\t     * @returns {String} - unique id\n\t     */\n\t    GetYoDigits: function (length, namespace) {\n\t      length = length || 6;\n\t      return Math.round(Math.pow(36, length + 1) - Math.random() * Math.pow(36, length)).toString(36).slice(1) + (namespace ? '-' + namespace : '');\n\t    },\n\t    /**\n\t     * Initialize plugins on any elements within `elem` (and `elem` itself) that aren't already initialized.\n\t     * @param {Object} elem - jQuery object containing the element to check inside. Also checks the element itself, unless it's the `document` object.\n\t     * @param {String|Array} plugins - A list of plugins to initialize. Leave this out to initialize everything.\n\t     */\n\t    reflow: function (elem, plugins) {\n\t\n\t      // If plugins is undefined, just grab everything\n\t      if (typeof plugins === 'undefined') {\n\t        plugins = Object.keys(this._plugins);\n\t      }\n\t      // If plugins is a string, convert it to an array with one item\n\t      else if (typeof plugins === 'string') {\n\t          plugins = [plugins];\n\t        }\n\t\n\t      var _this = this;\n\t\n\t      // Iterate through each plugin\n\t      $.each(plugins, function (i, name) {\n\t        // Get the current plugin\n\t        var plugin = _this._plugins[name];\n\t\n\t        // Localize the search to all elements inside elem, as well as elem itself, unless elem === document\n\t        var $elem = $(elem).find('[data-' + name + ']').addBack('[data-' + name + ']');\n\t\n\t        // For each plugin found, initialize it\n\t        $elem.each(function () {\n\t          var $el = $(this),\n\t              opts = {};\n\t          // Don't double-dip on plugins\n\t          if ($el.data('zfPlugin')) {\n\t            console.warn(\"Tried to initialize \" + name + \" on an element that already has a Foundation plugin.\");\n\t            return;\n\t          }\n\t\n\t          if ($el.attr('data-options')) {\n\t            var thing = $el.attr('data-options').split(';').forEach(function (e, i) {\n\t              var opt = e.split(':').map(function (el) {\n\t                return el.trim();\n\t              });\n\t              if (opt[0]) opts[opt[0]] = parseValue(opt[1]);\n\t            });\n\t          }\n\t          try {\n\t            $el.data('zfPlugin', new plugin($(this), opts));\n\t          } catch (er) {\n\t            console.error(er);\n\t          } finally {\n\t            return;\n\t          }\n\t        });\n\t      });\n\t    },\n\t    getFnName: functionName,\n\t    transitionend: function ($elem) {\n\t      var transitions = {\n\t        'transition': 'transitionend',\n\t        'WebkitTransition': 'webkitTransitionEnd',\n\t        'MozTransition': 'transitionend',\n\t        'OTransition': 'otransitionend'\n\t      };\n\t      var elem = document.createElement('div'),\n\t          end;\n\t\n\t      for (var t in transitions) {\n\t        if (typeof elem.style[t] !== 'undefined') {\n\t          end = transitions[t];\n\t        }\n\t      }\n\t      if (end) {\n\t        return end;\n\t      } else {\n\t        end = setTimeout(function () {\n\t          $elem.triggerHandler('transitionend', [$elem]);\n\t        }, 1);\n\t        return 'transitionend';\n\t      }\n\t    }\n\t  };\n\t\n\t  Foundation.util = {\n\t    /**\n\t     * Function for applying a debounce effect to a function call.\n\t     * @function\n\t     * @param {Function} func - Function to be called at end of timeout.\n\t     * @param {Number} delay - Time in ms to delay the call of `func`.\n\t     * @returns function\n\t     */\n\t    throttle: function (func, delay) {\n\t      var timer = null;\n\t\n\t      return function () {\n\t        var context = this,\n\t            args = arguments;\n\t\n\t        if (timer === null) {\n\t          timer = setTimeout(function () {\n\t            func.apply(context, args);\n\t            timer = null;\n\t          }, delay);\n\t        }\n\t      };\n\t    }\n\t  };\n\t\n\t  // TODO: consider not making this a jQuery function\n\t  // TODO: need way to reflow vs. re-initialize\n\t  /**\n\t   * The Foundation jQuery method.\n\t   * @param {String|Array} method - An action to perform on the current jQuery object.\n\t   */\n\t  var foundation = function (method) {\n\t    var type = typeof method,\n\t        $meta = $('meta.foundation-mq'),\n\t        $noJS = $('.no-js');\n\t\n\t    if (!$meta.length) {\n\t      $('<meta class=\"foundation-mq\">').appendTo(document.head);\n\t    }\n\t    if ($noJS.length) {\n\t      $noJS.removeClass('no-js');\n\t    }\n\t\n\t    if (type === 'undefined') {\n\t      //needs to initialize the Foundation object, or an individual plugin.\n\t      Foundation.MediaQuery._init();\n\t      Foundation.reflow(this);\n\t    } else if (type === 'string') {\n\t      //an individual method to invoke on a plugin or group of plugins\n\t      var args = Array.prototype.slice.call(arguments, 1); //collect all the arguments, if necessary\n\t      var plugClass = this.data('zfPlugin'); //determine the class of plugin\n\t\n\t      if (plugClass !== undefined && plugClass[method] !== undefined) {\n\t        //make sure both the class and method exist\n\t        if (this.length === 1) {\n\t          //if there's only one, call it directly.\n\t          plugClass[method].apply(plugClass, args);\n\t        } else {\n\t          this.each(function (i, el) {\n\t            //otherwise loop through the jQuery collection and invoke the method on each\n\t            plugClass[method].apply($(el).data('zfPlugin'), args);\n\t          });\n\t        }\n\t      } else {\n\t        //error for no class or no method\n\t        throw new ReferenceError(\"We're sorry, '\" + method + \"' is not an available method for \" + (plugClass ? functionName(plugClass) : 'this element') + '.');\n\t      }\n\t    } else {\n\t      //error for invalid argument type\n\t      throw new TypeError('We\\'re sorry, ' + type + ' is not a valid parameter. You must use a string representing the method you wish to invoke.');\n\t    }\n\t    return this;\n\t  };\n\t\n\t  window.Foundation = Foundation;\n\t  $.fn.foundation = foundation;\n\t\n\t  // Polyfill for requestAnimationFrame\n\t  (function () {\n\t    if (!Date.now || !window.Date.now) window.Date.now = Date.now = function () {\n\t      return new Date().getTime();\n\t    };\n\t\n\t    var vendors = ['webkit', 'moz'];\n\t    for (var i = 0; i < vendors.length && !window.requestAnimationFrame; ++i) {\n\t      var vp = vendors[i];\n\t      window.requestAnimationFrame = window[vp + 'RequestAnimationFrame'];\n\t      window.cancelAnimationFrame = window[vp + 'CancelAnimationFrame'] || window[vp + 'CancelRequestAnimationFrame'];\n\t    }\n\t    if (/iP(ad|hone|od).*OS 6/.test(window.navigator.userAgent) || !window.requestAnimationFrame || !window.cancelAnimationFrame) {\n\t      var lastTime = 0;\n\t      window.requestAnimationFrame = function (callback) {\n\t        var now = Date.now();\n\t        var nextTime = Math.max(lastTime + 16, now);\n\t        return setTimeout(function () {\n\t          callback(lastTime = nextTime);\n\t        }, nextTime - now);\n\t      };\n\t      window.cancelAnimationFrame = clearTimeout;\n\t    }\n\t    /**\n\t     * Polyfill for performance.now, required by rAF\n\t     */\n\t    if (!window.performance || !window.performance.now) {\n\t      window.performance = {\n\t        start: Date.now(),\n\t        now: function () {\n\t          return Date.now() - this.start;\n\t        }\n\t      };\n\t    }\n\t  })();\n\t  if (!Function.prototype.bind) {\n\t    Function.prototype.bind = function (oThis) {\n\t      if (typeof this !== 'function') {\n\t        // closest thing possible to the ECMAScript 5\n\t        // internal IsCallable function\n\t        throw new TypeError('Function.prototype.bind - what is trying to be bound is not callable');\n\t      }\n\t\n\t      var aArgs = Array.prototype.slice.call(arguments, 1),\n\t          fToBind = this,\n\t          fNOP = function () {},\n\t          fBound = function () {\n\t        return fToBind.apply(this instanceof fNOP ? this : oThis, aArgs.concat(Array.prototype.slice.call(arguments)));\n\t      };\n\t\n\t      if (this.prototype) {\n\t        // native functions don't have a prototype\n\t        fNOP.prototype = this.prototype;\n\t      }\n\t      fBound.prototype = new fNOP();\n\t\n\t      return fBound;\n\t    };\n\t  }\n\t  // Polyfill to get the name of a function in IE9\n\t  function functionName(fn) {\n\t    if (Function.prototype.name === undefined) {\n\t      var funcNameRegex = /function\\s([^(]{1,})\\(/;\n\t      var results = funcNameRegex.exec(fn.toString());\n\t      return results && results.length > 1 ? results[1].trim() : \"\";\n\t    } else if (fn.prototype === undefined) {\n\t      return fn.constructor.name;\n\t    } else {\n\t      return fn.prototype.constructor.name;\n\t    }\n\t  }\n\t  function parseValue(str) {\n\t    if ('true' === str) return true;else if ('false' === str) return false;else if (!isNaN(str * 1)) return parseFloat(str);\n\t    return str;\n\t  }\n\t  // Convert PascalCase to kebab-case\n\t  // Thank you: http://stackoverflow.com/a/8955580\n\t  function hyphenate(str) {\n\t    return str.replace(/([a-z])([A-Z])/g, '$1-$2').toLowerCase();\n\t  }\n\t}(jQuery);\n\t'use strict';\n\t\n\t!function ($) {\n\t\n\t  Foundation.Box = {\n\t    ImNotTouchingYou: ImNotTouchingYou,\n\t    GetDimensions: GetDimensions,\n\t    GetOffsets: GetOffsets\n\t  };\n\t\n\t  /**\n\t   * Compares the dimensions of an element to a container and determines collision events with container.\n\t   * @function\n\t   * @param {jQuery} element - jQuery object to test for collisions.\n\t   * @param {jQuery} parent - jQuery object to use as bounding container.\n\t   * @param {Boolean} lrOnly - set to true to check left and right values only.\n\t   * @param {Boolean} tbOnly - set to true to check top and bottom values only.\n\t   * @default if no parent object passed, detects collisions with `window`.\n\t   * @returns {Boolean} - true if collision free, false if a collision in any direction.\n\t   */\n\t  function ImNotTouchingYou(element, parent, lrOnly, tbOnly) {\n\t    var eleDims = GetDimensions(element),\n\t        top,\n\t        bottom,\n\t        left,\n\t        right;\n\t\n\t    if (parent) {\n\t      var parDims = GetDimensions(parent);\n\t\n\t      bottom = eleDims.offset.top + eleDims.height <= parDims.height + parDims.offset.top;\n\t      top = eleDims.offset.top >= parDims.offset.top;\n\t      left = eleDims.offset.left >= parDims.offset.left;\n\t      right = eleDims.offset.left + eleDims.width <= parDims.width + parDims.offset.left;\n\t    } else {\n\t      bottom = eleDims.offset.top + eleDims.height <= eleDims.windowDims.height + eleDims.windowDims.offset.top;\n\t      top = eleDims.offset.top >= eleDims.windowDims.offset.top;\n\t      left = eleDims.offset.left >= eleDims.windowDims.offset.left;\n\t      right = eleDims.offset.left + eleDims.width <= eleDims.windowDims.width;\n\t    }\n\t\n\t    var allDirs = [bottom, top, left, right];\n\t\n\t    if (lrOnly) {\n\t      return left === right === true;\n\t    }\n\t\n\t    if (tbOnly) {\n\t      return top === bottom === true;\n\t    }\n\t\n\t    return allDirs.indexOf(false) === -1;\n\t  };\n\t\n\t  /**\n\t   * Uses native methods to return an object of dimension values.\n\t   * @function\n\t   * @param {jQuery || HTML} element - jQuery object or DOM element for which to get the dimensions. Can be any element other that document or window.\n\t   * @returns {Object} - nested object of integer pixel values\n\t   * TODO - if element is window, return only those values.\n\t   */\n\t  function GetDimensions(elem, test) {\n\t    elem = elem.length ? elem[0] : elem;\n\t\n\t    if (elem === window || elem === document) {\n\t      throw new Error(\"I'm sorry, Dave. I'm afraid I can't do that.\");\n\t    }\n\t\n\t    var rect = elem.getBoundingClientRect(),\n\t        parRect = elem.parentNode.getBoundingClientRect(),\n\t        winRect = document.body.getBoundingClientRect(),\n\t        winY = window.pageYOffset,\n\t        winX = window.pageXOffset;\n\t\n\t    return {\n\t      width: rect.width,\n\t      height: rect.height,\n\t      offset: {\n\t        top: rect.top + winY,\n\t        left: rect.left + winX\n\t      },\n\t      parentDims: {\n\t        width: parRect.width,\n\t        height: parRect.height,\n\t        offset: {\n\t          top: parRect.top + winY,\n\t          left: parRect.left + winX\n\t        }\n\t      },\n\t      windowDims: {\n\t        width: winRect.width,\n\t        height: winRect.height,\n\t        offset: {\n\t          top: winY,\n\t          left: winX\n\t        }\n\t      }\n\t    };\n\t  }\n\t\n\t  /**\n\t   * Returns an object of top and left integer pixel values for dynamically rendered elements,\n\t   * such as: Tooltip, Reveal, and Dropdown\n\t   * @function\n\t   * @param {jQuery} element - jQuery object for the element being positioned.\n\t   * @param {jQuery} anchor - jQuery object for the element's anchor point.\n\t   * @param {String} position - a string relating to the desired position of the element, relative to it's anchor\n\t   * @param {Number} vOffset - integer pixel value of desired vertical separation between anchor and element.\n\t   * @param {Number} hOffset - integer pixel value of desired horizontal separation between anchor and element.\n\t   * @param {Boolean} isOverflow - if a collision event is detected, sets to true to default the element to full width - any desired offset.\n\t   * TODO alter/rewrite to work with `em` values as well/instead of pixels\n\t   */\n\t  function GetOffsets(element, anchor, position, vOffset, hOffset, isOverflow) {\n\t    var $eleDims = GetDimensions(element),\n\t        $anchorDims = anchor ? GetDimensions(anchor) : null;\n\t\n\t    switch (position) {\n\t      case 'top':\n\t        return {\n\t          left: Foundation.rtl() ? $anchorDims.offset.left - $eleDims.width + $anchorDims.width : $anchorDims.offset.left,\n\t          top: $anchorDims.offset.top - ($eleDims.height + vOffset)\n\t        };\n\t        break;\n\t      case 'left':\n\t        return {\n\t          left: $anchorDims.offset.left - ($eleDims.width + hOffset),\n\t          top: $anchorDims.offset.top\n\t        };\n\t        break;\n\t      case 'right':\n\t        return {\n\t          left: $anchorDims.offset.left + $anchorDims.width + hOffset,\n\t          top: $anchorDims.offset.top\n\t        };\n\t        break;\n\t      case 'center top':\n\t        return {\n\t          left: $anchorDims.offset.left + $anchorDims.width / 2 - $eleDims.width / 2,\n\t          top: $anchorDims.offset.top - ($eleDims.height + vOffset)\n\t        };\n\t        break;\n\t      case 'center bottom':\n\t        return {\n\t          left: isOverflow ? hOffset : $anchorDims.offset.left + $anchorDims.width / 2 - $eleDims.width / 2,\n\t          top: $anchorDims.offset.top + $anchorDims.height + vOffset\n\t        };\n\t        break;\n\t      case 'center left':\n\t        return {\n\t          left: $anchorDims.offset.left - ($eleDims.width + hOffset),\n\t          top: $anchorDims.offset.top + $anchorDims.height / 2 - $eleDims.height / 2\n\t        };\n\t        break;\n\t      case 'center right':\n\t        return {\n\t          left: $anchorDims.offset.left + $anchorDims.width + hOffset + 1,\n\t          top: $anchorDims.offset.top + $anchorDims.height / 2 - $eleDims.height / 2\n\t        };\n\t        break;\n\t      case 'center':\n\t        return {\n\t          left: $eleDims.windowDims.offset.left + $eleDims.windowDims.width / 2 - $eleDims.width / 2,\n\t          top: $eleDims.windowDims.offset.top + $eleDims.windowDims.height / 2 - $eleDims.height / 2\n\t        };\n\t        break;\n\t      case 'reveal':\n\t        return {\n\t          left: ($eleDims.windowDims.width - $eleDims.width) / 2,\n\t          top: $eleDims.windowDims.offset.top + vOffset\n\t        };\n\t      case 'reveal full':\n\t        return {\n\t          left: $eleDims.windowDims.offset.left,\n\t          top: $eleDims.windowDims.offset.top\n\t        };\n\t        break;\n\t      case 'left bottom':\n\t        return {\n\t          left: $anchorDims.offset.left,\n\t          top: $anchorDims.offset.top + $anchorDims.height + vOffset\n\t        };\n\t        break;\n\t      case 'right bottom':\n\t        return {\n\t          left: $anchorDims.offset.left + $anchorDims.width + hOffset - $eleDims.width,\n\t          top: $anchorDims.offset.top + $anchorDims.height + vOffset\n\t        };\n\t        break;\n\t      default:\n\t        return {\n\t          left: Foundation.rtl() ? $anchorDims.offset.left - $eleDims.width + $anchorDims.width : $anchorDims.offset.left + hOffset,\n\t          top: $anchorDims.offset.top + $anchorDims.height + vOffset\n\t        };\n\t    }\n\t  }\n\t}(jQuery);\n\t/*******************************************\n\t *                                         *\n\t * This util was created by Marius Olbertz *\n\t * Please thank Marius on GitHub /owlbertz *\n\t * or the web http://www.mariusolbertz.de/ *\n\t *                                         *\n\t ******************************************/\n\t\n\t'use strict';\n\t\n\t!function ($) {\n\t\n\t  var keyCodes = {\n\t    9: 'TAB',\n\t    13: 'ENTER',\n\t    27: 'ESCAPE',\n\t    32: 'SPACE',\n\t    37: 'ARROW_LEFT',\n\t    38: 'ARROW_UP',\n\t    39: 'ARROW_RIGHT',\n\t    40: 'ARROW_DOWN'\n\t  };\n\t\n\t  var commands = {};\n\t\n\t  var Keyboard = {\n\t    keys: getKeyCodes(keyCodes),\n\t\n\t    /**\n\t     * Parses the (keyboard) event and returns a String that represents its key\n\t     * Can be used like Foundation.parseKey(event) === Foundation.keys.SPACE\n\t     * @param {Event} event - the event generated by the event handler\n\t     * @return String key - String that represents the key pressed\n\t     */\n\t    parseKey: function (event) {\n\t      var key = keyCodes[event.which || event.keyCode] || String.fromCharCode(event.which).toUpperCase();\n\t\n\t      // Remove un-printable characters, e.g. for `fromCharCode` calls for CTRL only events\n\t      key = key.replace(/\\W+/, '');\n\t\n\t      if (event.shiftKey) key = 'SHIFT_' + key;\n\t      if (event.ctrlKey) key = 'CTRL_' + key;\n\t      if (event.altKey) key = 'ALT_' + key;\n\t\n\t      // Remove trailing underscore, in case only modifiers were used (e.g. only `CTRL_ALT`)\n\t      key = key.replace(/_$/, '');\n\t\n\t      return key;\n\t    },\n\t\n\t\n\t    /**\n\t     * Handles the given (keyboard) event\n\t     * @param {Event} event - the event generated by the event handler\n\t     * @param {String} component - Foundation component's name, e.g. Slider or Reveal\n\t     * @param {Objects} functions - collection of functions that are to be executed\n\t     */\n\t    handleKey: function (event, component, functions) {\n\t      var commandList = commands[component],\n\t          keyCode = this.parseKey(event),\n\t          cmds,\n\t          command,\n\t          fn;\n\t\n\t      if (!commandList) return console.warn('Component not defined!');\n\t\n\t      if (typeof commandList.ltr === 'undefined') {\n\t        // this component does not differentiate between ltr and rtl\n\t        cmds = commandList; // use plain list\n\t      } else {\n\t        // merge ltr and rtl: if document is rtl, rtl overwrites ltr and vice versa\n\t        if (Foundation.rtl()) cmds = $.extend({}, commandList.ltr, commandList.rtl);else cmds = $.extend({}, commandList.rtl, commandList.ltr);\n\t      }\n\t      command = cmds[keyCode];\n\t\n\t      fn = functions[command];\n\t      if (fn && typeof fn === 'function') {\n\t        // execute function  if exists\n\t        var returnValue = fn.apply();\n\t        if (functions.handled || typeof functions.handled === 'function') {\n\t          // execute function when event was handled\n\t          functions.handled(returnValue);\n\t        }\n\t      } else {\n\t        if (functions.unhandled || typeof functions.unhandled === 'function') {\n\t          // execute function when event was not handled\n\t          functions.unhandled();\n\t        }\n\t      }\n\t    },\n\t\n\t\n\t    /**\n\t     * Finds all focusable elements within the given `$element`\n\t     * @param {jQuery} $element - jQuery object to search within\n\t     * @return {jQuery} $focusable - all focusable elements within `$element`\n\t     */\n\t    findFocusable: function ($element) {\n\t      if (!$element) {\n\t        return false;\n\t      }\n\t      return $element.find('a[href], area[href], input:not([disabled]), select:not([disabled]), textarea:not([disabled]), button:not([disabled]), iframe, object, embed, *[tabindex], *[contenteditable]').filter(function () {\n\t        if (!$(this).is(':visible') || $(this).attr('tabindex') < 0) {\n\t          return false;\n\t        } //only have visible elements and those that have a tabindex greater or equal 0\n\t        return true;\n\t      });\n\t    },\n\t\n\t\n\t    /**\n\t     * Returns the component name name\n\t     * @param {Object} component - Foundation component, e.g. Slider or Reveal\n\t     * @return String componentName\n\t     */\n\t\n\t    register: function (componentName, cmds) {\n\t      commands[componentName] = cmds;\n\t    },\n\t\n\t\n\t    /**\n\t     * Traps the focus in the given element.\n\t     * @param  {jQuery} $element  jQuery object to trap the foucs into.\n\t     */\n\t    trapFocus: function ($element) {\n\t      var $focusable = Foundation.Keyboard.findFocusable($element),\n\t          $firstFocusable = $focusable.eq(0),\n\t          $lastFocusable = $focusable.eq(-1);\n\t\n\t      $element.on('keydown.zf.trapfocus', function (event) {\n\t        if (event.target === $lastFocusable[0] && Foundation.Keyboard.parseKey(event) === 'TAB') {\n\t          event.preventDefault();\n\t          $firstFocusable.focus();\n\t        } else if (event.target === $firstFocusable[0] && Foundation.Keyboard.parseKey(event) === 'SHIFT_TAB') {\n\t          event.preventDefault();\n\t          $lastFocusable.focus();\n\t        }\n\t      });\n\t    },\n\t\n\t    /**\n\t     * Releases the trapped focus from the given element.\n\t     * @param  {jQuery} $element  jQuery object to release the focus for.\n\t     */\n\t    releaseFocus: function ($element) {\n\t      $element.off('keydown.zf.trapfocus');\n\t    }\n\t  };\n\t\n\t  /*\n\t   * Constants for easier comparing.\n\t   * Can be used like Foundation.parseKey(event) === Foundation.keys.SPACE\n\t   */\n\t  function getKeyCodes(kcs) {\n\t    var k = {};\n\t    for (var kc in kcs) {\n\t      k[kcs[kc]] = kcs[kc];\n\t    }return k;\n\t  }\n\t\n\t  Foundation.Keyboard = Keyboard;\n\t}(jQuery);\n\t'use strict';\n\t\n\t!function ($) {\n\t\n\t  // Default set of media queries\n\t  var defaultQueries = {\n\t    'default': 'only screen',\n\t    landscape: 'only screen and (orientation: landscape)',\n\t    portrait: 'only screen and (orientation: portrait)',\n\t    retina: 'only screen and (-webkit-min-device-pixel-ratio: 2),' + 'only screen and (min--moz-device-pixel-ratio: 2),' + 'only screen and (-o-min-device-pixel-ratio: 2/1),' + 'only screen and (min-device-pixel-ratio: 2),' + 'only screen and (min-resolution: 192dpi),' + 'only screen and (min-resolution: 2dppx)'\n\t  };\n\t\n\t  var MediaQuery = {\n\t    queries: [],\n\t\n\t    current: '',\n\t\n\t    /**\n\t     * Initializes the media query helper, by extracting the breakpoint list from the CSS and activating the breakpoint watcher.\n\t     * @function\n\t     * @private\n\t     */\n\t    _init: function () {\n\t      var self = this;\n\t      var extractedStyles = $('.foundation-mq').css('font-family');\n\t      var namedQueries;\n\t\n\t      namedQueries = parseStyleToObject(extractedStyles);\n\t\n\t      for (var key in namedQueries) {\n\t        if (namedQueries.hasOwnProperty(key)) {\n\t          self.queries.push({\n\t            name: key,\n\t            value: 'only screen and (min-width: ' + namedQueries[key] + ')'\n\t          });\n\t        }\n\t      }\n\t\n\t      this.current = this._getCurrentSize();\n\t\n\t      this._watcher();\n\t    },\n\t\n\t\n\t    /**\n\t     * Checks if the screen is at least as wide as a breakpoint.\n\t     * @function\n\t     * @param {String} size - Name of the breakpoint to check.\n\t     * @returns {Boolean} `true` if the breakpoint matches, `false` if it's smaller.\n\t     */\n\t    atLeast: function (size) {\n\t      var query = this.get(size);\n\t\n\t      if (query) {\n\t        return window.matchMedia(query).matches;\n\t      }\n\t\n\t      return false;\n\t    },\n\t\n\t\n\t    /**\n\t     * Checks if the screen matches to a breakpoint.\n\t     * @function\n\t     * @param {String} size - Name of the breakpoint to check, either 'small only' or 'small'. Omitting 'only' falls back to using atLeast() method.\n\t     * @returns {Boolean} `true` if the breakpoint matches, `false` if it does not.\n\t     */\n\t    is: function (size) {\n\t      size = size.trim().split(' ');\n\t      if (size.length > 1 && size[1] === 'only') {\n\t        if (size[0] === this._getCurrentSize()) return true;\n\t      } else {\n\t        return this.atLeast(size[0]);\n\t      }\n\t      return false;\n\t    },\n\t\n\t\n\t    /**\n\t     * Gets the media query of a breakpoint.\n\t     * @function\n\t     * @param {String} size - Name of the breakpoint to get.\n\t     * @returns {String|null} - The media query of the breakpoint, or `null` if the breakpoint doesn't exist.\n\t     */\n\t    get: function (size) {\n\t      for (var i in this.queries) {\n\t        if (this.queries.hasOwnProperty(i)) {\n\t          var query = this.queries[i];\n\t          if (size === query.name) return query.value;\n\t        }\n\t      }\n\t\n\t      return null;\n\t    },\n\t\n\t\n\t    /**\n\t     * Gets the current breakpoint name by testing every breakpoint and returning the last one to match (the biggest one).\n\t     * @function\n\t     * @private\n\t     * @returns {String} Name of the current breakpoint.\n\t     */\n\t    _getCurrentSize: function () {\n\t      var matched;\n\t\n\t      for (var i = 0; i < this.queries.length; i++) {\n\t        var query = this.queries[i];\n\t\n\t        if (window.matchMedia(query.value).matches) {\n\t          matched = query;\n\t        }\n\t      }\n\t\n\t      if (typeof matched === 'object') {\n\t        return matched.name;\n\t      } else {\n\t        return matched;\n\t      }\n\t    },\n\t\n\t\n\t    /**\n\t     * Activates the breakpoint watcher, which fires an event on the window whenever the breakpoint changes.\n\t     * @function\n\t     * @private\n\t     */\n\t    _watcher: function () {\n\t      var _this = this;\n\t\n\t      $(window).on('resize.zf.mediaquery', function () {\n\t        var newSize = _this._getCurrentSize(),\n\t            currentSize = _this.current;\n\t\n\t        if (newSize !== currentSize) {\n\t          // Change the current media query\n\t          _this.current = newSize;\n\t\n\t          // Broadcast the media query change on the window\n\t          $(window).trigger('changed.zf.mediaquery', [newSize, currentSize]);\n\t        }\n\t      });\n\t    }\n\t  };\n\t\n\t  Foundation.MediaQuery = MediaQuery;\n\t\n\t  // matchMedia() polyfill - Test a CSS media type/query in JS.\n\t  // Authors & copyright (c) 2012: Scott Jehl, Paul Irish, Nicholas Zakas, David Knight. Dual MIT/BSD license\n\t  window.matchMedia || (window.matchMedia = function () {\n\t    'use strict';\n\t\n\t    // For browsers that support matchMedium api such as IE 9 and webkit\n\t\n\t    var styleMedia = window.styleMedia || window.media;\n\t\n\t    // For those that don't support matchMedium\n\t    if (!styleMedia) {\n\t      var style = document.createElement('style'),\n\t          script = document.getElementsByTagName('script')[0],\n\t          info = null;\n\t\n\t      style.type = 'text/css';\n\t      style.id = 'matchmediajs-test';\n\t\n\t      script && script.parentNode && script.parentNode.insertBefore(style, script);\n\t\n\t      // 'style.currentStyle' is used by IE <= 8 and 'window.getComputedStyle' for all other browsers\n\t      info = 'getComputedStyle' in window && window.getComputedStyle(style, null) || style.currentStyle;\n\t\n\t      styleMedia = {\n\t        matchMedium: function (media) {\n\t          var text = '@media ' + media + '{ #matchmediajs-test { width: 1px; } }';\n\t\n\t          // 'style.styleSheet' is used by IE <= 8 and 'style.textContent' for all other browsers\n\t          if (style.styleSheet) {\n\t            style.styleSheet.cssText = text;\n\t          } else {\n\t            style.textContent = text;\n\t          }\n\t\n\t          // Test if media query is true or false\n\t          return info.width === '1px';\n\t        }\n\t      };\n\t    }\n\t\n\t    return function (media) {\n\t      return {\n\t        matches: styleMedia.matchMedium(media || 'all'),\n\t        media: media || 'all'\n\t      };\n\t    };\n\t  }());\n\t\n\t  // Thank you: https://github.com/sindresorhus/query-string\n\t  function parseStyleToObject(str) {\n\t    var styleObject = {};\n\t\n\t    if (typeof str !== 'string') {\n\t      return styleObject;\n\t    }\n\t\n\t    str = str.trim().slice(1, -1); // browsers re-quote string style values\n\t\n\t    if (!str) {\n\t      return styleObject;\n\t    }\n\t\n\t    styleObject = str.split('&').reduce(function (ret, param) {\n\t      var parts = param.replace(/\\+/g, ' ').split('=');\n\t      var key = parts[0];\n\t      var val = parts[1];\n\t      key = decodeURIComponent(key);\n\t\n\t      // missing `=` should be `null`:\n\t      // http://w3.org/TR/2012/WD-url-20120524/#collect-url-parameters\n\t      val = val === undefined ? null : decodeURIComponent(val);\n\t\n\t      if (!ret.hasOwnProperty(key)) {\n\t        ret[key] = val;\n\t      } else if (Array.isArray(ret[key])) {\n\t        ret[key].push(val);\n\t      } else {\n\t        ret[key] = [ret[key], val];\n\t      }\n\t      return ret;\n\t    }, {});\n\t\n\t    return styleObject;\n\t  }\n\t\n\t  Foundation.MediaQuery = MediaQuery;\n\t}(jQuery);\n\t'use strict';\n\t\n\t!function ($) {\n\t\n\t  /**\n\t   * Motion module.\n\t   * @module foundation.motion\n\t   */\n\t\n\t  var initClasses = ['mui-enter', 'mui-leave'];\n\t  var activeClasses = ['mui-enter-active', 'mui-leave-active'];\n\t\n\t  var Motion = {\n\t    animateIn: function (element, animation, cb) {\n\t      animate(true, element, animation, cb);\n\t    },\n\t\n\t    animateOut: function (element, animation, cb) {\n\t      animate(false, element, animation, cb);\n\t    }\n\t  };\n\t\n\t  function Move(duration, elem, fn) {\n\t    var anim,\n\t        prog,\n\t        start = null;\n\t    // console.log('called');\n\t\n\t    if (duration === 0) {\n\t      fn.apply(elem);\n\t      elem.trigger('finished.zf.animate', [elem]).triggerHandler('finished.zf.animate', [elem]);\n\t      return;\n\t    }\n\t\n\t    function move(ts) {\n\t      if (!start) start = ts;\n\t      // console.log(start, ts);\n\t      prog = ts - start;\n\t      fn.apply(elem);\n\t\n\t      if (prog < duration) {\n\t        anim = window.requestAnimationFrame(move, elem);\n\t      } else {\n\t        window.cancelAnimationFrame(anim);\n\t        elem.trigger('finished.zf.animate', [elem]).triggerHandler('finished.zf.animate', [elem]);\n\t      }\n\t    }\n\t    anim = window.requestAnimationFrame(move);\n\t  }\n\t\n\t  /**\n\t   * Animates an element in or out using a CSS transition class.\n\t   * @function\n\t   * @private\n\t   * @param {Boolean} isIn - Defines if the animation is in or out.\n\t   * @param {Object} element - jQuery or HTML object to animate.\n\t   * @param {String} animation - CSS class to use.\n\t   * @param {Function} cb - Callback to run when animation is finished.\n\t   */\n\t  function animate(isIn, element, animation, cb) {\n\t    element = $(element).eq(0);\n\t\n\t    if (!element.length) return;\n\t\n\t    var initClass = isIn ? initClasses[0] : initClasses[1];\n\t    var activeClass = isIn ? activeClasses[0] : activeClasses[1];\n\t\n\t    // Set up the animation\n\t    reset();\n\t\n\t    element.addClass(animation).css('transition', 'none');\n\t\n\t    requestAnimationFrame(function () {\n\t      element.addClass(initClass);\n\t      if (isIn) element.show();\n\t    });\n\t\n\t    // Start the animation\n\t    requestAnimationFrame(function () {\n\t      element[0].offsetWidth;\n\t      element.css('transition', '').addClass(activeClass);\n\t    });\n\t\n\t    // Clean up the animation when it finishes\n\t    element.one(Foundation.transitionend(element), finish);\n\t\n\t    // Hides the element (for out animations), resets the element, and runs a callback\n\t    function finish() {\n\t      if (!isIn) element.hide();\n\t      reset();\n\t      if (cb) cb.apply(element);\n\t    }\n\t\n\t    // Resets transitions and removes motion-specific classes\n\t    function reset() {\n\t      element[0].style.transitionDuration = 0;\n\t      element.removeClass(initClass + ' ' + activeClass + ' ' + animation);\n\t    }\n\t  }\n\t\n\t  Foundation.Move = Move;\n\t  Foundation.Motion = Motion;\n\t}(jQuery);\n\t'use strict';\n\t\n\t!function ($) {\n\t\n\t  var Nest = {\n\t    Feather: function (menu) {\n\t      var type = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'zf';\n\t\n\t      menu.attr('role', 'menubar');\n\t\n\t      var items = menu.find('li').attr({ 'role': 'menuitem' }),\n\t          subMenuClass = 'is-' + type + '-submenu',\n\t          subItemClass = subMenuClass + '-item',\n\t          hasSubClass = 'is-' + type + '-submenu-parent';\n\t\n\t      items.each(function () {\n\t        var $item = $(this),\n\t            $sub = $item.children('ul');\n\t\n\t        if ($sub.length) {\n\t          $item.addClass(hasSubClass).attr({\n\t            'aria-haspopup': true,\n\t            'aria-label': $item.children('a:first').text()\n\t          });\n\t          // Note:  Drilldowns behave differently in how they hide, and so need\n\t          // additional attributes.  We should look if this possibly over-generalized\n\t          // utility (Nest) is appropriate when we rework menus in 6.4\n\t          if (type === 'drilldown') {\n\t            $item.attr({ 'aria-expanded': false });\n\t          }\n\t\n\t          $sub.addClass('submenu ' + subMenuClass).attr({\n\t            'data-submenu': '',\n\t            'role': 'menu'\n\t          });\n\t          if (type === 'drilldown') {\n\t            $sub.attr({ 'aria-hidden': true });\n\t          }\n\t        }\n\t\n\t        if ($item.parent('[data-submenu]').length) {\n\t          $item.addClass('is-submenu-item ' + subItemClass);\n\t        }\n\t      });\n\t\n\t      return;\n\t    },\n\t    Burn: function (menu, type) {\n\t      var //items = menu.find('li'),\n\t      subMenuClass = 'is-' + type + '-submenu',\n\t          subItemClass = subMenuClass + '-item',\n\t          hasSubClass = 'is-' + type + '-submenu-parent';\n\t\n\t      menu.find('>li, .menu, .menu > li').removeClass(subMenuClass + ' ' + subItemClass + ' ' + hasSubClass + ' is-submenu-item submenu is-active').removeAttr('data-submenu').css('display', '');\n\t\n\t      // console.log(      menu.find('.' + subMenuClass + ', .' + subItemClass + ', .has-submenu, .is-submenu-item, .submenu, [data-submenu]')\n\t      //           .removeClass(subMenuClass + ' ' + subItemClass + ' has-submenu is-submenu-item submenu')\n\t      //           .removeAttr('data-submenu'));\n\t      // items.each(function(){\n\t      //   var $item = $(this),\n\t      //       $sub = $item.children('ul');\n\t      //   if($item.parent('[data-submenu]').length){\n\t      //     $item.removeClass('is-submenu-item ' + subItemClass);\n\t      //   }\n\t      //   if($sub.length){\n\t      //     $item.removeClass('has-submenu');\n\t      //     $sub.removeClass('submenu ' + subMenuClass).removeAttr('data-submenu');\n\t      //   }\n\t      // });\n\t    }\n\t  };\n\t\n\t  Foundation.Nest = Nest;\n\t}(jQuery);\n\t'use strict';\n\t\n\t!function ($) {\n\t\n\t  function Timer(elem, options, cb) {\n\t    var _this = this,\n\t        duration = options.duration,\n\t        //options is an object for easily adding features later.\n\t    nameSpace = Object.keys(elem.data())[0] || 'timer',\n\t        remain = -1,\n\t        start,\n\t        timer;\n\t\n\t    this.isPaused = false;\n\t\n\t    this.restart = function () {\n\t      remain = -1;\n\t      clearTimeout(timer);\n\t      this.start();\n\t    };\n\t\n\t    this.start = function () {\n\t      this.isPaused = false;\n\t      // if(!elem.data('paused')){ return false; }//maybe implement this sanity check if used for other things.\n\t      clearTimeout(timer);\n\t      remain = remain <= 0 ? duration : remain;\n\t      elem.data('paused', false);\n\t      start = Date.now();\n\t      timer = setTimeout(function () {\n\t        if (options.infinite) {\n\t          _this.restart(); //rerun the timer.\n\t        }\n\t        if (cb && typeof cb === 'function') {\n\t          cb();\n\t        }\n\t      }, remain);\n\t      elem.trigger('timerstart.zf.' + nameSpace);\n\t    };\n\t\n\t    this.pause = function () {\n\t      this.isPaused = true;\n\t      //if(elem.data('paused')){ return false; }//maybe implement this sanity check if used for other things.\n\t      clearTimeout(timer);\n\t      elem.data('paused', true);\n\t      var end = Date.now();\n\t      remain = remain - (end - start);\n\t      elem.trigger('timerpaused.zf.' + nameSpace);\n\t    };\n\t  }\n\t\n\t  /**\n\t   * Runs a callback function when images are fully loaded.\n\t   * @param {Object} images - Image(s) to check if loaded.\n\t   * @param {Func} callback - Function to execute when image is fully loaded.\n\t   */\n\t  function onImagesLoaded(images, callback) {\n\t    var self = this,\n\t        unloaded = images.length;\n\t\n\t    if (unloaded === 0) {\n\t      callback();\n\t    }\n\t\n\t    images.each(function () {\n\t      // Check if image is loaded\n\t      if (this.complete || this.readyState === 4 || this.readyState === 'complete') {\n\t        singleImageLoaded();\n\t      }\n\t      // Force load the image\n\t      else {\n\t          // fix for IE. See https://css-tricks.com/snippets/jquery/fixing-load-in-ie-for-cached-images/\n\t          var src = $(this).attr('src');\n\t          $(this).attr('src', src + '?' + new Date().getTime());\n\t          $(this).one('load', function () {\n\t            singleImageLoaded();\n\t          });\n\t        }\n\t    });\n\t\n\t    function singleImageLoaded() {\n\t      unloaded--;\n\t      if (unloaded === 0) {\n\t        callback();\n\t      }\n\t    }\n\t  }\n\t\n\t  Foundation.Timer = Timer;\n\t  Foundation.onImagesLoaded = onImagesLoaded;\n\t}(jQuery);\n\t//**************************************************\n\t//**Work inspired by multiple jquery swipe plugins**\n\t//**Done by Yohai Ararat ***************************\n\t//**************************************************\n\t(function ($) {\n\t\n\t\t$.spotSwipe = {\n\t\t\tversion: '1.0.0',\n\t\t\tenabled: 'ontouchstart' in document.documentElement,\n\t\t\tpreventDefault: false,\n\t\t\tmoveThreshold: 75,\n\t\t\ttimeThreshold: 200\n\t\t};\n\t\n\t\tvar startPosX,\n\t\t    startPosY,\n\t\t    startTime,\n\t\t    elapsedTime,\n\t\t    isMoving = false;\n\t\n\t\tfunction onTouchEnd() {\n\t\t\t//  alert(this);\n\t\t\tthis.removeEventListener('touchmove', onTouchMove);\n\t\t\tthis.removeEventListener('touchend', onTouchEnd);\n\t\t\tisMoving = false;\n\t\t}\n\t\n\t\tfunction onTouchMove(e) {\n\t\t\tif ($.spotSwipe.preventDefault) {\n\t\t\t\te.preventDefault();\n\t\t\t}\n\t\t\tif (isMoving) {\n\t\t\t\tvar x = e.touches[0].pageX;\n\t\t\t\tvar y = e.touches[0].pageY;\n\t\t\t\tvar dx = startPosX - x;\n\t\t\t\tvar dy = startPosY - y;\n\t\t\t\tvar dir;\n\t\t\t\telapsedTime = new Date().getTime() - startTime;\n\t\t\t\tif (Math.abs(dx) >= $.spotSwipe.moveThreshold && elapsedTime <= $.spotSwipe.timeThreshold) {\n\t\t\t\t\tdir = dx > 0 ? 'left' : 'right';\n\t\t\t\t}\n\t\t\t\t// else if(Math.abs(dy) >= $.spotSwipe.moveThreshold && elapsedTime <= $.spotSwipe.timeThreshold) {\n\t\t\t\t//   dir = dy > 0 ? 'down' : 'up';\n\t\t\t\t// }\n\t\t\t\tif (dir) {\n\t\t\t\t\te.preventDefault();\n\t\t\t\t\tonTouchEnd.call(this);\n\t\t\t\t\t$(this).trigger('swipe', dir).trigger('swipe' + dir);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\n\t\tfunction onTouchStart(e) {\n\t\t\tif (e.touches.length == 1) {\n\t\t\t\tstartPosX = e.touches[0].pageX;\n\t\t\t\tstartPosY = e.touches[0].pageY;\n\t\t\t\tisMoving = true;\n\t\t\t\tstartTime = new Date().getTime();\n\t\t\t\tthis.addEventListener('touchmove', onTouchMove, false);\n\t\t\t\tthis.addEventListener('touchend', onTouchEnd, false);\n\t\t\t}\n\t\t}\n\t\n\t\tfunction init() {\n\t\t\tthis.addEventListener && this.addEventListener('touchstart', onTouchStart, false);\n\t\t}\n\t\n\t\tfunction teardown() {\n\t\t\tthis.removeEventListener('touchstart', onTouchStart);\n\t\t}\n\t\n\t\t$.event.special.swipe = { setup: init };\n\t\n\t\t$.each(['left', 'up', 'down', 'right'], function () {\n\t\t\t$.event.special['swipe' + this] = { setup: function () {\n\t\t\t\t\t$(this).on('swipe', $.noop);\n\t\t\t\t} };\n\t\t});\n\t})(jQuery);\n\t/****************************************************\n\t * Method for adding psuedo drag events to elements *\n\t ***************************************************/\n\t!function ($) {\n\t\t$.fn.addTouch = function () {\n\t\t\tthis.each(function (i, el) {\n\t\t\t\t$(el).bind('touchstart touchmove touchend touchcancel', function () {\n\t\t\t\t\t//we pass the original event object because the jQuery event\n\t\t\t\t\t//object is normalized to w3c specs and does not provide the TouchList\n\t\t\t\t\thandleTouch(event);\n\t\t\t\t});\n\t\t\t});\n\t\n\t\t\tvar handleTouch = function (event) {\n\t\t\t\tvar touches = event.changedTouches,\n\t\t\t\t    first = touches[0],\n\t\t\t\t    eventTypes = {\n\t\t\t\t\ttouchstart: 'mousedown',\n\t\t\t\t\ttouchmove: 'mousemove',\n\t\t\t\t\ttouchend: 'mouseup'\n\t\t\t\t},\n\t\t\t\t    type = eventTypes[event.type],\n\t\t\t\t    simulatedEvent;\n\t\n\t\t\t\tif ('MouseEvent' in window && typeof window.MouseEvent === 'function') {\n\t\t\t\t\tsimulatedEvent = new window.MouseEvent(type, {\n\t\t\t\t\t\t'bubbles': true,\n\t\t\t\t\t\t'cancelable': true,\n\t\t\t\t\t\t'screenX': first.screenX,\n\t\t\t\t\t\t'screenY': first.screenY,\n\t\t\t\t\t\t'clientX': first.clientX,\n\t\t\t\t\t\t'clientY': first.clientY\n\t\t\t\t\t});\n\t\t\t\t} else {\n\t\t\t\t\tsimulatedEvent = document.createEvent('MouseEvent');\n\t\t\t\t\tsimulatedEvent.initMouseEvent(type, true, true, window, 1, first.screenX, first.screenY, first.clientX, first.clientY, false, false, false, false, 0 /*left*/, null);\n\t\t\t\t}\n\t\t\t\tfirst.target.dispatchEvent(simulatedEvent);\n\t\t\t};\n\t\t};\n\t}(jQuery);\n\t\n\t//**********************************\n\t//**From the jQuery Mobile Library**\n\t//**need to recreate functionality**\n\t//**and try to improve if possible**\n\t//**********************************\n\t\n\t/* Removing the jQuery function ****\n\t************************************\n\t\n\t(function( $, window, undefined ) {\n\t\n\t\tvar $document = $( document ),\n\t\t\t// supportTouch = $.mobile.support.touch,\n\t\t\ttouchStartEvent = 'touchstart'//supportTouch ? \"touchstart\" : \"mousedown\",\n\t\t\ttouchStopEvent = 'touchend'//supportTouch ? \"touchend\" : \"mouseup\",\n\t\t\ttouchMoveEvent = 'touchmove'//supportTouch ? \"touchmove\" : \"mousemove\";\n\t\n\t\t// setup new event shortcuts\n\t\t$.each( ( \"touchstart touchmove touchend \" +\n\t\t\t\"swipe swipeleft swiperight\" ).split( \" \" ), function( i, name ) {\n\t\n\t\t\t$.fn[ name ] = function( fn ) {\n\t\t\t\treturn fn ? this.bind( name, fn ) : this.trigger( name );\n\t\t\t};\n\t\n\t\t\t// jQuery < 1.8\n\t\t\tif ( $.attrFn ) {\n\t\t\t\t$.attrFn[ name ] = true;\n\t\t\t}\n\t\t});\n\t\n\t\tfunction triggerCustomEvent( obj, eventType, event, bubble ) {\n\t\t\tvar originalType = event.type;\n\t\t\tevent.type = eventType;\n\t\t\tif ( bubble ) {\n\t\t\t\t$.event.trigger( event, undefined, obj );\n\t\t\t} else {\n\t\t\t\t$.event.dispatch.call( obj, event );\n\t\t\t}\n\t\t\tevent.type = originalType;\n\t\t}\n\t\n\t\t// also handles taphold\n\t\n\t\t// Also handles swipeleft, swiperight\n\t\t$.event.special.swipe = {\n\t\n\t\t\t// More than this horizontal displacement, and we will suppress scrolling.\n\t\t\tscrollSupressionThreshold: 30,\n\t\n\t\t\t// More time than this, and it isn't a swipe.\n\t\t\tdurationThreshold: 1000,\n\t\n\t\t\t// Swipe horizontal displacement must be more than this.\n\t\t\thorizontalDistanceThreshold: window.devicePixelRatio >= 2 ? 15 : 30,\n\t\n\t\t\t// Swipe vertical displacement must be less than this.\n\t\t\tverticalDistanceThreshold: window.devicePixelRatio >= 2 ? 15 : 30,\n\t\n\t\t\tgetLocation: function ( event ) {\n\t\t\t\tvar winPageX = window.pageXOffset,\n\t\t\t\t\twinPageY = window.pageYOffset,\n\t\t\t\t\tx = event.clientX,\n\t\t\t\t\ty = event.clientY;\n\t\n\t\t\t\tif ( event.pageY === 0 && Math.floor( y ) > Math.floor( event.pageY ) ||\n\t\t\t\t\tevent.pageX === 0 && Math.floor( x ) > Math.floor( event.pageX ) ) {\n\t\n\t\t\t\t\t// iOS4 clientX/clientY have the value that should have been\n\t\t\t\t\t// in pageX/pageY. While pageX/page/ have the value 0\n\t\t\t\t\tx = x - winPageX;\n\t\t\t\t\ty = y - winPageY;\n\t\t\t\t} else if ( y < ( event.pageY - winPageY) || x < ( event.pageX - winPageX ) ) {\n\t\n\t\t\t\t\t// Some Android browsers have totally bogus values for clientX/Y\n\t\t\t\t\t// when scrolling/zooming a page. Detectable since clientX/clientY\n\t\t\t\t\t// should never be smaller than pageX/pageY minus page scroll\n\t\t\t\t\tx = event.pageX - winPageX;\n\t\t\t\t\ty = event.pageY - winPageY;\n\t\t\t\t}\n\t\n\t\t\t\treturn {\n\t\t\t\t\tx: x,\n\t\t\t\t\ty: y\n\t\t\t\t};\n\t\t\t},\n\t\n\t\t\tstart: function( event ) {\n\t\t\t\tvar data = event.originalEvent.touches ?\n\t\t\t\t\t\tevent.originalEvent.touches[ 0 ] : event,\n\t\t\t\t\tlocation = $.event.special.swipe.getLocation( data );\n\t\t\t\treturn {\n\t\t\t\t\t\t\ttime: ( new Date() ).getTime(),\n\t\t\t\t\t\t\tcoords: [ location.x, location.y ],\n\t\t\t\t\t\t\torigin: $( event.target )\n\t\t\t\t\t\t};\n\t\t\t},\n\t\n\t\t\tstop: function( event ) {\n\t\t\t\tvar data = event.originalEvent.touches ?\n\t\t\t\t\t\tevent.originalEvent.touches[ 0 ] : event,\n\t\t\t\t\tlocation = $.event.special.swipe.getLocation( data );\n\t\t\t\treturn {\n\t\t\t\t\t\t\ttime: ( new Date() ).getTime(),\n\t\t\t\t\t\t\tcoords: [ location.x, location.y ]\n\t\t\t\t\t\t};\n\t\t\t},\n\t\n\t\t\thandleSwipe: function( start, stop, thisObject, origTarget ) {\n\t\t\t\tif ( stop.time - start.time < $.event.special.swipe.durationThreshold &&\n\t\t\t\t\tMath.abs( start.coords[ 0 ] - stop.coords[ 0 ] ) > $.event.special.swipe.horizontalDistanceThreshold &&\n\t\t\t\t\tMath.abs( start.coords[ 1 ] - stop.coords[ 1 ] ) < $.event.special.swipe.verticalDistanceThreshold ) {\n\t\t\t\t\tvar direction = start.coords[0] > stop.coords[ 0 ] ? \"swipeleft\" : \"swiperight\";\n\t\n\t\t\t\t\ttriggerCustomEvent( thisObject, \"swipe\", $.Event( \"swipe\", { target: origTarget, swipestart: start, swipestop: stop }), true );\n\t\t\t\t\ttriggerCustomEvent( thisObject, direction,$.Event( direction, { target: origTarget, swipestart: start, swipestop: stop } ), true );\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t\treturn false;\n\t\n\t\t\t},\n\t\n\t\t\t// This serves as a flag to ensure that at most one swipe event event is\n\t\t\t// in work at any given time\n\t\t\teventInProgress: false,\n\t\n\t\t\tsetup: function() {\n\t\t\t\tvar events,\n\t\t\t\t\tthisObject = this,\n\t\t\t\t\t$this = $( thisObject ),\n\t\t\t\t\tcontext = {};\n\t\n\t\t\t\t// Retrieve the events data for this element and add the swipe context\n\t\t\t\tevents = $.data( this, \"mobile-events\" );\n\t\t\t\tif ( !events ) {\n\t\t\t\t\tevents = { length: 0 };\n\t\t\t\t\t$.data( this, \"mobile-events\", events );\n\t\t\t\t}\n\t\t\t\tevents.length++;\n\t\t\t\tevents.swipe = context;\n\t\n\t\t\t\tcontext.start = function( event ) {\n\t\n\t\t\t\t\t// Bail if we're already working on a swipe event\n\t\t\t\t\tif ( $.event.special.swipe.eventInProgress ) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t\t$.event.special.swipe.eventInProgress = true;\n\t\n\t\t\t\t\tvar stop,\n\t\t\t\t\t\tstart = $.event.special.swipe.start( event ),\n\t\t\t\t\t\torigTarget = event.target,\n\t\t\t\t\t\temitted = false;\n\t\n\t\t\t\t\tcontext.move = function( event ) {\n\t\t\t\t\t\tif ( !start || event.isDefaultPrevented() ) {\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\tstop = $.event.special.swipe.stop( event );\n\t\t\t\t\t\tif ( !emitted ) {\n\t\t\t\t\t\t\temitted = $.event.special.swipe.handleSwipe( start, stop, thisObject, origTarget );\n\t\t\t\t\t\t\tif ( emitted ) {\n\t\n\t\t\t\t\t\t\t\t// Reset the context to make way for the next swipe event\n\t\t\t\t\t\t\t\t$.event.special.swipe.eventInProgress = false;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\t// prevent scrolling\n\t\t\t\t\t\tif ( Math.abs( start.coords[ 0 ] - stop.coords[ 0 ] ) > $.event.special.swipe.scrollSupressionThreshold ) {\n\t\t\t\t\t\t\tevent.preventDefault();\n\t\t\t\t\t\t}\n\t\t\t\t\t};\n\t\n\t\t\t\t\tcontext.stop = function() {\n\t\t\t\t\t\t\temitted = true;\n\t\n\t\t\t\t\t\t\t// Reset the context to make way for the next swipe event\n\t\t\t\t\t\t\t$.event.special.swipe.eventInProgress = false;\n\t\t\t\t\t\t\t$document.off( touchMoveEvent, context.move );\n\t\t\t\t\t\t\tcontext.move = null;\n\t\t\t\t\t};\n\t\n\t\t\t\t\t$document.on( touchMoveEvent, context.move )\n\t\t\t\t\t\t.one( touchStopEvent, context.stop );\n\t\t\t\t};\n\t\t\t\t$this.on( touchStartEvent, context.start );\n\t\t\t},\n\t\n\t\t\tteardown: function() {\n\t\t\t\tvar events, context;\n\t\n\t\t\t\tevents = $.data( this, \"mobile-events\" );\n\t\t\t\tif ( events ) {\n\t\t\t\t\tcontext = events.swipe;\n\t\t\t\t\tdelete events.swipe;\n\t\t\t\t\tevents.length--;\n\t\t\t\t\tif ( events.length === 0 ) {\n\t\t\t\t\t\t$.removeData( this, \"mobile-events\" );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\n\t\t\t\tif ( context ) {\n\t\t\t\t\tif ( context.start ) {\n\t\t\t\t\t\t$( this ).off( touchStartEvent, context.start );\n\t\t\t\t\t}\n\t\t\t\t\tif ( context.move ) {\n\t\t\t\t\t\t$document.off( touchMoveEvent, context.move );\n\t\t\t\t\t}\n\t\t\t\t\tif ( context.stop ) {\n\t\t\t\t\t\t$document.off( touchStopEvent, context.stop );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t\t$.each({\n\t\t\tswipeleft: \"swipe.left\",\n\t\t\tswiperight: \"swipe.right\"\n\t\t}, function( event, sourceEvent ) {\n\t\n\t\t\t$.event.special[ event ] = {\n\t\t\t\tsetup: function() {\n\t\t\t\t\t$( this ).bind( sourceEvent, $.noop );\n\t\t\t\t},\n\t\t\t\tteardown: function() {\n\t\t\t\t\t$( this ).unbind( sourceEvent );\n\t\t\t\t}\n\t\t\t};\n\t\t});\n\t})( jQuery, this );\n\t*/\n\t'use strict';\n\t\n\t!function ($) {\n\t\n\t  var MutationObserver = function () {\n\t    var prefixes = ['WebKit', 'Moz', 'O', 'Ms', ''];\n\t    for (var i = 0; i < prefixes.length; i++) {\n\t      if (prefixes[i] + 'MutationObserver' in window) {\n\t        return window[prefixes[i] + 'MutationObserver'];\n\t      }\n\t    }\n\t    return false;\n\t  }();\n\t\n\t  var triggers = function (el, type) {\n\t    el.data(type).split(' ').forEach(function (id) {\n\t      $('#' + id)[type === 'close' ? 'trigger' : 'triggerHandler'](type + '.zf.trigger', [el]);\n\t    });\n\t  };\n\t  // Elements with [data-open] will reveal a plugin that supports it when clicked.\n\t  $(document).on('click.zf.trigger', '[data-open]', function () {\n\t    triggers($(this), 'open');\n\t  });\n\t\n\t  // Elements with [data-close] will close a plugin that supports it when clicked.\n\t  // If used without a value on [data-close], the event will bubble, allowing it to close a parent component.\n\t  $(document).on('click.zf.trigger', '[data-close]', function () {\n\t    var id = $(this).data('close');\n\t    if (id) {\n\t      triggers($(this), 'close');\n\t    } else {\n\t      $(this).trigger('close.zf.trigger');\n\t    }\n\t  });\n\t\n\t  // Elements with [data-toggle] will toggle a plugin that supports it when clicked.\n\t  $(document).on('click.zf.trigger', '[data-toggle]', function () {\n\t    var id = $(this).data('toggle');\n\t    if (id) {\n\t      triggers($(this), 'toggle');\n\t    } else {\n\t      $(this).trigger('toggle.zf.trigger');\n\t    }\n\t  });\n\t\n\t  // Elements with [data-closable] will respond to close.zf.trigger events.\n\t  $(document).on('close.zf.trigger', '[data-closable]', function (e) {\n\t    e.stopPropagation();\n\t    var animation = $(this).data('closable');\n\t\n\t    if (animation !== '') {\n\t      Foundation.Motion.animateOut($(this), animation, function () {\n\t        $(this).trigger('closed.zf');\n\t      });\n\t    } else {\n\t      $(this).fadeOut().trigger('closed.zf');\n\t    }\n\t  });\n\t\n\t  $(document).on('focus.zf.trigger blur.zf.trigger', '[data-toggle-focus]', function () {\n\t    var id = $(this).data('toggle-focus');\n\t    $('#' + id).triggerHandler('toggle.zf.trigger', [$(this)]);\n\t  });\n\t\n\t  /**\n\t  * Fires once after all other scripts have loaded\n\t  * @function\n\t  * @private\n\t  */\n\t  $(window).on('load', function () {\n\t    checkListeners();\n\t  });\n\t\n\t  function checkListeners() {\n\t    eventsListener();\n\t    resizeListener();\n\t    scrollListener();\n\t    mutateListener();\n\t    closemeListener();\n\t  }\n\t\n\t  //******** only fires this function once on load, if there's something to watch ********\n\t  function closemeListener(pluginName) {\n\t    var yetiBoxes = $('[data-yeti-box]'),\n\t        plugNames = ['dropdown', 'tooltip', 'reveal'];\n\t\n\t    if (pluginName) {\n\t      if (typeof pluginName === 'string') {\n\t        plugNames.push(pluginName);\n\t      } else if (typeof pluginName === 'object' && typeof pluginName[0] === 'string') {\n\t        plugNames.concat(pluginName);\n\t      } else {\n\t        console.error('Plugin names must be strings');\n\t      }\n\t    }\n\t    if (yetiBoxes.length) {\n\t      var listeners = plugNames.map(function (name) {\n\t        return 'closeme.zf.' + name;\n\t      }).join(' ');\n\t\n\t      $(window).off(listeners).on(listeners, function (e, pluginId) {\n\t        var plugin = e.namespace.split('.')[0];\n\t        var plugins = $('[data-' + plugin + ']').not('[data-yeti-box=\"' + pluginId + '\"]');\n\t\n\t        plugins.each(function () {\n\t          var _this = $(this);\n\t\n\t          _this.triggerHandler('close.zf.trigger', [_this]);\n\t        });\n\t      });\n\t    }\n\t  }\n\t\n\t  function resizeListener(debounce) {\n\t    var timer = void 0,\n\t        $nodes = $('[data-resize]');\n\t    if ($nodes.length) {\n\t      $(window).off('resize.zf.trigger').on('resize.zf.trigger', function (e) {\n\t        if (timer) {\n\t          clearTimeout(timer);\n\t        }\n\t\n\t        timer = setTimeout(function () {\n\t\n\t          if (!MutationObserver) {\n\t            //fallback for IE 9\n\t            $nodes.each(function () {\n\t              $(this).triggerHandler('resizeme.zf.trigger');\n\t            });\n\t          }\n\t          //trigger all listening elements and signal a resize event\n\t          $nodes.attr('data-events', \"resize\");\n\t        }, debounce || 10); //default time to emit resize event\n\t      });\n\t    }\n\t  }\n\t\n\t  function scrollListener(debounce) {\n\t    var timer = void 0,\n\t        $nodes = $('[data-scroll]');\n\t    if ($nodes.length) {\n\t      $(window).off('scroll.zf.trigger').on('scroll.zf.trigger', function (e) {\n\t        if (timer) {\n\t          clearTimeout(timer);\n\t        }\n\t\n\t        timer = setTimeout(function () {\n\t\n\t          if (!MutationObserver) {\n\t            //fallback for IE 9\n\t            $nodes.each(function () {\n\t              $(this).triggerHandler('scrollme.zf.trigger');\n\t            });\n\t          }\n\t          //trigger all listening elements and signal a scroll event\n\t          $nodes.attr('data-events', \"scroll\");\n\t        }, debounce || 10); //default time to emit scroll event\n\t      });\n\t    }\n\t  }\n\t\n\t  function mutateListener(debounce) {\n\t    var $nodes = $('[data-mutate]');\n\t    if ($nodes.length && MutationObserver) {\n\t      //trigger all listening elements and signal a mutate event\n\t      //no IE 9 or 10\n\t      $nodes.each(function () {\n\t        $(this).triggerHandler('mutateme.zf.trigger');\n\t      });\n\t    }\n\t  }\n\t\n\t  function eventsListener() {\n\t    if (!MutationObserver) {\n\t      return false;\n\t    }\n\t    var nodes = document.querySelectorAll('[data-resize], [data-scroll], [data-mutate]');\n\t\n\t    //element callback\n\t    var listeningElementsMutation = function (mutationRecordsList) {\n\t      var $target = $(mutationRecordsList[0].target);\n\t\n\t      //trigger the event handler for the element depending on type\n\t      switch (mutationRecordsList[0].type) {\n\t\n\t        case \"attributes\":\n\t          if ($target.attr(\"data-events\") === \"scroll\" && mutationRecordsList[0].attributeName === \"data-events\") {\n\t            $target.triggerHandler('scrollme.zf.trigger', [$target, window.pageYOffset]);\n\t          }\n\t          if ($target.attr(\"data-events\") === \"resize\" && mutationRecordsList[0].attributeName === \"data-events\") {\n\t            $target.triggerHandler('resizeme.zf.trigger', [$target]);\n\t          }\n\t          if (mutationRecordsList[0].attributeName === \"style\") {\n\t            $target.closest(\"[data-mutate]\").attr(\"data-events\", \"mutate\");\n\t            $target.closest(\"[data-mutate]\").triggerHandler('mutateme.zf.trigger', [$target.closest(\"[data-mutate]\")]);\n\t          }\n\t          break;\n\t\n\t        case \"childList\":\n\t          $target.closest(\"[data-mutate]\").attr(\"data-events\", \"mutate\");\n\t          $target.closest(\"[data-mutate]\").triggerHandler('mutateme.zf.trigger', [$target.closest(\"[data-mutate]\")]);\n\t          break;\n\t\n\t        default:\n\t          return false;\n\t        //nothing\n\t      }\n\t    };\n\t\n\t    if (nodes.length) {\n\t      //for each element that needs to listen for resizing, scrolling, or mutation add a single observer\n\t      for (var i = 0; i <= nodes.length - 1; i++) {\n\t        var elementObserver = new MutationObserver(listeningElementsMutation);\n\t        elementObserver.observe(nodes[i], { attributes: true, childList: true, characterData: false, subtree: true, attributeFilter: [\"data-events\", \"style\"] });\n\t      }\n\t    }\n\t  }\n\t\n\t  // ------------------------------------\n\t\n\t  // [PH]\n\t  // Foundation.CheckWatchers = checkWatchers;\n\t  Foundation.IHearYou = checkListeners;\n\t  // Foundation.ISeeYou = scrollListener;\n\t  // Foundation.IFeelYou = closemeListener;\n\t}(jQuery);\n\t\n\t// function domMutationObserver(debounce) {\n\t//   // !!! This is coming soon and needs more work; not active  !!! //\n\t//   var timer,\n\t//   nodes = document.querySelectorAll('[data-mutate]');\n\t//   //\n\t//   if (nodes.length) {\n\t//     // var MutationObserver = (function () {\n\t//     //   var prefixes = ['WebKit', 'Moz', 'O', 'Ms', ''];\n\t//     //   for (var i=0; i < prefixes.length; i++) {\n\t//     //     if (prefixes[i] + 'MutationObserver' in window) {\n\t//     //       return window[prefixes[i] + 'MutationObserver'];\n\t//     //     }\n\t//     //   }\n\t//     //   return false;\n\t//     // }());\n\t//\n\t//\n\t//     //for the body, we need to listen for all changes effecting the style and class attributes\n\t//     var bodyObserver = new MutationObserver(bodyMutation);\n\t//     bodyObserver.observe(document.body, { attributes: true, childList: true, characterData: false, subtree:true, attributeFilter:[\"style\", \"class\"]});\n\t//\n\t//\n\t//     //body callback\n\t//     function bodyMutation(mutate) {\n\t//       //trigger all listening elements and signal a mutation event\n\t//       if (timer) { clearTimeout(timer); }\n\t//\n\t//       timer = setTimeout(function() {\n\t//         bodyObserver.disconnect();\n\t//         $('[data-mutate]').attr('data-events',\"mutate\");\n\t//       }, debounce || 150);\n\t//     }\n\t//   }\n\t// }\n\t'use strict';\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\t!function ($) {\n\t\n\t  /**\n\t   * Abide module.\n\t   * @module foundation.abide\n\t   */\n\t\n\t  var Abide = function () {\n\t    /**\n\t     * Creates a new instance of Abide.\n\t     * @class\n\t     * @fires Abide#init\n\t     * @param {Object} element - jQuery object to add the trigger to.\n\t     * @param {Object} options - Overrides to the default plugin settings.\n\t     */\n\t    function Abide(element) {\n\t      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\t\n\t      _classCallCheck(this, Abide);\n\t\n\t      this.$element = element;\n\t      this.options = $.extend({}, Abide.defaults, this.$element.data(), options);\n\t\n\t      this._init();\n\t\n\t      Foundation.registerPlugin(this, 'Abide');\n\t    }\n\t\n\t    /**\n\t     * Initializes the Abide plugin and calls functions to get Abide functioning on load.\n\t     * @private\n\t     */\n\t\n\t\n\t    _createClass(Abide, [{\n\t      key: '_init',\n\t      value: function _init() {\n\t        this.$inputs = this.$element.find('input, textarea, select');\n\t\n\t        this._events();\n\t      }\n\t\n\t      /**\n\t       * Initializes events for Abide.\n\t       * @private\n\t       */\n\t\n\t    }, {\n\t      key: '_events',\n\t      value: function _events() {\n\t        var _this2 = this;\n\t\n\t        this.$element.off('.abide').on('reset.zf.abide', function () {\n\t          _this2.resetForm();\n\t        }).on('submit.zf.abide', function () {\n\t          return _this2.validateForm();\n\t        });\n\t\n\t        if (this.options.validateOn === 'fieldChange') {\n\t          this.$inputs.off('change.zf.abide').on('change.zf.abide', function (e) {\n\t            _this2.validateInput($(e.target));\n\t          });\n\t        }\n\t\n\t        if (this.options.liveValidate) {\n\t          this.$inputs.off('input.zf.abide').on('input.zf.abide', function (e) {\n\t            _this2.validateInput($(e.target));\n\t          });\n\t        }\n\t\n\t        if (this.options.validateOnBlur) {\n\t          this.$inputs.off('blur.zf.abide').on('blur.zf.abide', function (e) {\n\t            _this2.validateInput($(e.target));\n\t          });\n\t        }\n\t      }\n\t\n\t      /**\n\t       * Calls necessary functions to update Abide upon DOM change\n\t       * @private\n\t       */\n\t\n\t    }, {\n\t      key: '_reflow',\n\t      value: function _reflow() {\n\t        this._init();\n\t      }\n\t\n\t      /**\n\t       * Checks whether or not a form element has the required attribute and if it's checked or not\n\t       * @param {Object} element - jQuery object to check for required attribute\n\t       * @returns {Boolean} Boolean value depends on whether or not attribute is checked or empty\n\t       */\n\t\n\t    }, {\n\t      key: 'requiredCheck',\n\t      value: function requiredCheck($el) {\n\t        if (!$el.attr('required')) return true;\n\t\n\t        var isGood = true;\n\t\n\t        switch ($el[0].type) {\n\t          case 'checkbox':\n\t            isGood = $el[0].checked;\n\t            break;\n\t\n\t          case 'select':\n\t          case 'select-one':\n\t          case 'select-multiple':\n\t            var opt = $el.find('option:selected');\n\t            if (!opt.length || !opt.val()) isGood = false;\n\t            break;\n\t\n\t          default:\n\t            if (!$el.val() || !$el.val().length) isGood = false;\n\t        }\n\t\n\t        return isGood;\n\t      }\n\t\n\t      /**\n\t       * Based on $el, get the first element with selector in this order:\n\t       * 1. The element's direct sibling('s).\n\t       * 3. The element's parent's children.\n\t       *\n\t       * This allows for multiple form errors per input, though if none are found, no form errors will be shown.\n\t       *\n\t       * @param {Object} $el - jQuery object to use as reference to find the form error selector.\n\t       * @returns {Object} jQuery object with the selector.\n\t       */\n\t\n\t    }, {\n\t      key: 'findFormError',\n\t      value: function findFormError($el) {\n\t        var $error = $el.siblings(this.options.formErrorSelector);\n\t\n\t        if (!$error.length) {\n\t          $error = $el.parent().find(this.options.formErrorSelector);\n\t        }\n\t\n\t        return $error;\n\t      }\n\t\n\t      /**\n\t       * Get the first element in this order:\n\t       * 2. The <label> with the attribute `[for=\"someInputId\"]`\n\t       * 3. The `.closest()` <label>\n\t       *\n\t       * @param {Object} $el - jQuery object to check for required attribute\n\t       * @returns {Boolean} Boolean value depends on whether or not attribute is checked or empty\n\t       */\n\t\n\t    }, {\n\t      key: 'findLabel',\n\t      value: function findLabel($el) {\n\t        var id = $el[0].id;\n\t        var $label = this.$element.find('label[for=\"' + id + '\"]');\n\t\n\t        if (!$label.length) {\n\t          return $el.closest('label');\n\t        }\n\t\n\t        return $label;\n\t      }\n\t\n\t      /**\n\t       * Get the set of labels associated with a set of radio els in this order\n\t       * 2. The <label> with the attribute `[for=\"someInputId\"]`\n\t       * 3. The `.closest()` <label>\n\t       *\n\t       * @param {Object} $el - jQuery object to check for required attribute\n\t       * @returns {Boolean} Boolean value depends on whether or not attribute is checked or empty\n\t       */\n\t\n\t    }, {\n\t      key: 'findRadioLabels',\n\t      value: function findRadioLabels($els) {\n\t        var _this3 = this;\n\t\n\t        var labels = $els.map(function (i, el) {\n\t          var id = el.id;\n\t          var $label = _this3.$element.find('label[for=\"' + id + '\"]');\n\t\n\t          if (!$label.length) {\n\t            $label = $(el).closest('label');\n\t          }\n\t          return $label[0];\n\t        });\n\t\n\t        return $(labels);\n\t      }\n\t\n\t      /**\n\t       * Adds the CSS error class as specified by the Abide settings to the label, input, and the form\n\t       * @param {Object} $el - jQuery object to add the class to\n\t       */\n\t\n\t    }, {\n\t      key: 'addErrorClasses',\n\t      value: function addErrorClasses($el) {\n\t        var $label = this.findLabel($el);\n\t        var $formError = this.findFormError($el);\n\t\n\t        if ($label.length) {\n\t          $label.addClass(this.options.labelErrorClass);\n\t        }\n\t\n\t        if ($formError.length) {\n\t          $formError.addClass(this.options.formErrorClass);\n\t        }\n\t\n\t        $el.addClass(this.options.inputErrorClass).attr('data-invalid', '');\n\t      }\n\t\n\t      /**\n\t       * Remove CSS error classes etc from an entire radio button group\n\t       * @param {String} groupName - A string that specifies the name of a radio button group\n\t       *\n\t       */\n\t\n\t    }, {\n\t      key: 'removeRadioErrorClasses',\n\t      value: function removeRadioErrorClasses(groupName) {\n\t        var $els = this.$element.find(':radio[name=\"' + groupName + '\"]');\n\t        var $labels = this.findRadioLabels($els);\n\t        var $formErrors = this.findFormError($els);\n\t\n\t        if ($labels.length) {\n\t          $labels.removeClass(this.options.labelErrorClass);\n\t        }\n\t\n\t        if ($formErrors.length) {\n\t          $formErrors.removeClass(this.options.formErrorClass);\n\t        }\n\t\n\t        $els.removeClass(this.options.inputErrorClass).removeAttr('data-invalid');\n\t      }\n\t\n\t      /**\n\t       * Removes CSS error class as specified by the Abide settings from the label, input, and the form\n\t       * @param {Object} $el - jQuery object to remove the class from\n\t       */\n\t\n\t    }, {\n\t      key: 'removeErrorClasses',\n\t      value: function removeErrorClasses($el) {\n\t        // radios need to clear all of the els\n\t        if ($el[0].type == 'radio') {\n\t          return this.removeRadioErrorClasses($el.attr('name'));\n\t        }\n\t\n\t        var $label = this.findLabel($el);\n\t        var $formError = this.findFormError($el);\n\t\n\t        if ($label.length) {\n\t          $label.removeClass(this.options.labelErrorClass);\n\t        }\n\t\n\t        if ($formError.length) {\n\t          $formError.removeClass(this.options.formErrorClass);\n\t        }\n\t\n\t        $el.removeClass(this.options.inputErrorClass).removeAttr('data-invalid');\n\t      }\n\t\n\t      /**\n\t       * Goes through a form to find inputs and proceeds to validate them in ways specific to their type\n\t       * @fires Abide#invalid\n\t       * @fires Abide#valid\n\t       * @param {Object} element - jQuery object to validate, should be an HTML input\n\t       * @returns {Boolean} goodToGo - If the input is valid or not.\n\t       */\n\t\n\t    }, {\n\t      key: 'validateInput',\n\t      value: function validateInput($el) {\n\t        var _this4 = this;\n\t\n\t        var clearRequire = this.requiredCheck($el),\n\t            validated = false,\n\t            customValidator = true,\n\t            validator = $el.attr('data-validator'),\n\t            equalTo = true;\n\t\n\t        // don't validate ignored inputs or hidden inputs\n\t        if ($el.is('[data-abide-ignore]') || $el.is('[type=\"hidden\"]')) {\n\t          return true;\n\t        }\n\t\n\t        switch ($el[0].type) {\n\t          case 'radio':\n\t            validated = this.validateRadio($el.attr('name'));\n\t            break;\n\t\n\t          case 'checkbox':\n\t            validated = clearRequire;\n\t            break;\n\t\n\t          case 'select':\n\t          case 'select-one':\n\t          case 'select-multiple':\n\t            validated = clearRequire;\n\t            break;\n\t\n\t          default:\n\t            validated = this.validateText($el);\n\t        }\n\t\n\t        if (validator) {\n\t          customValidator = this.matchValidation($el, validator, $el.attr('required'));\n\t        }\n\t\n\t        if ($el.attr('data-equalto')) {\n\t          equalTo = this.options.validators.equalTo($el);\n\t        }\n\t\n\t        var goodToGo = [clearRequire, validated, customValidator, equalTo].indexOf(false) === -1;\n\t        var message = (goodToGo ? 'valid' : 'invalid') + '.zf.abide';\n\t\n\t        if (goodToGo) {\n\t          // Re-validate inputs that depend on this one with equalto\n\t          var dependentElements = this.$element.find('[data-equalto=\"' + $el.attr('id') + '\"]');\n\t          if (dependentElements.length) {\n\t            (function () {\n\t              var _this = _this4;\n\t              dependentElements.each(function () {\n\t                if ($(this).val()) {\n\t                  _this.validateInput($(this));\n\t                }\n\t              });\n\t            })();\n\t          }\n\t        }\n\t\n\t        this[goodToGo ? 'removeErrorClasses' : 'addErrorClasses']($el);\n\t\n\t        /**\n\t         * Fires when the input is done checking for validation. Event trigger is either `valid.zf.abide` or `invalid.zf.abide`\n\t         * Trigger includes the DOM element of the input.\n\t         * @event Abide#valid\n\t         * @event Abide#invalid\n\t         */\n\t        $el.trigger(message, [$el]);\n\t\n\t        return goodToGo;\n\t      }\n\t\n\t      /**\n\t       * Goes through a form and if there are any invalid inputs, it will display the form error element\n\t       * @returns {Boolean} noError - true if no errors were detected...\n\t       * @fires Abide#formvalid\n\t       * @fires Abide#forminvalid\n\t       */\n\t\n\t    }, {\n\t      key: 'validateForm',\n\t      value: function validateForm() {\n\t        var acc = [];\n\t        var _this = this;\n\t\n\t        this.$inputs.each(function () {\n\t          acc.push(_this.validateInput($(this)));\n\t        });\n\t\n\t        var noError = acc.indexOf(false) === -1;\n\t\n\t        this.$element.find('[data-abide-error]').css('display', noError ? 'none' : 'block');\n\t\n\t        /**\n\t         * Fires when the form is finished validating. Event trigger is either `formvalid.zf.abide` or `forminvalid.zf.abide`.\n\t         * Trigger includes the element of the form.\n\t         * @event Abide#formvalid\n\t         * @event Abide#forminvalid\n\t         */\n\t        this.$element.trigger((noError ? 'formvalid' : 'forminvalid') + '.zf.abide', [this.$element]);\n\t\n\t        return noError;\n\t      }\n\t\n\t      /**\n\t       * Determines whether or a not a text input is valid based on the pattern specified in the attribute. If no matching pattern is found, returns true.\n\t       * @param {Object} $el - jQuery object to validate, should be a text input HTML element\n\t       * @param {String} pattern - string value of one of the RegEx patterns in Abide.options.patterns\n\t       * @returns {Boolean} Boolean value depends on whether or not the input value matches the pattern specified\n\t       */\n\t\n\t    }, {\n\t      key: 'validateText',\n\t      value: function validateText($el, pattern) {\n\t        // A pattern can be passed to this function, or it will be infered from the input's \"pattern\" attribute, or it's \"type\" attribute\n\t        pattern = pattern || $el.attr('pattern') || $el.attr('type');\n\t        var inputText = $el.val();\n\t        var valid = false;\n\t\n\t        if (inputText.length) {\n\t          // If the pattern attribute on the element is in Abide's list of patterns, then test that regexp\n\t          if (this.options.patterns.hasOwnProperty(pattern)) {\n\t            valid = this.options.patterns[pattern].test(inputText);\n\t          }\n\t          // If the pattern name isn't also the type attribute of the field, then test it as a regexp\n\t          else if (pattern !== $el.attr('type')) {\n\t              valid = new RegExp(pattern).test(inputText);\n\t            } else {\n\t              valid = true;\n\t            }\n\t        }\n\t        // An empty field is valid if it's not required\n\t        else if (!$el.prop('required')) {\n\t            valid = true;\n\t          }\n\t\n\t        return valid;\n\t      }\n\t\n\t      /**\n\t       * Determines whether or a not a radio input is valid based on whether or not it is required and selected. Although the function targets a single `<input>`, it validates by checking the `required` and `checked` properties of all radio buttons in its group.\n\t       * @param {String} groupName - A string that specifies the name of a radio button group\n\t       * @returns {Boolean} Boolean value depends on whether or not at least one radio input has been selected (if it's required)\n\t       */\n\t\n\t    }, {\n\t      key: 'validateRadio',\n\t      value: function validateRadio(groupName) {\n\t        // If at least one radio in the group has the `required` attribute, the group is considered required\n\t        // Per W3C spec, all radio buttons in a group should have `required`, but we're being nice\n\t        var $group = this.$element.find(':radio[name=\"' + groupName + '\"]');\n\t        var valid = false,\n\t            required = false;\n\t\n\t        // For the group to be required, at least one radio needs to be required\n\t        $group.each(function (i, e) {\n\t          if ($(e).attr('required')) {\n\t            required = true;\n\t          }\n\t        });\n\t        if (!required) valid = true;\n\t\n\t        if (!valid) {\n\t          // For the group to be valid, at least one radio needs to be checked\n\t          $group.each(function (i, e) {\n\t            if ($(e).prop('checked')) {\n\t              valid = true;\n\t            }\n\t          });\n\t        };\n\t\n\t        return valid;\n\t      }\n\t\n\t      /**\n\t       * Determines if a selected input passes a custom validation function. Multiple validations can be used, if passed to the element with `data-validator=\"foo bar baz\"` in a space separated listed.\n\t       * @param {Object} $el - jQuery input element.\n\t       * @param {String} validators - a string of function names matching functions in the Abide.options.validators object.\n\t       * @param {Boolean} required - self explanatory?\n\t       * @returns {Boolean} - true if validations passed.\n\t       */\n\t\n\t    }, {\n\t      key: 'matchValidation',\n\t      value: function matchValidation($el, validators, required) {\n\t        var _this5 = this;\n\t\n\t        required = required ? true : false;\n\t\n\t        var clear = validators.split(' ').map(function (v) {\n\t          return _this5.options.validators[v]($el, required, $el.parent());\n\t        });\n\t        return clear.indexOf(false) === -1;\n\t      }\n\t\n\t      /**\n\t       * Resets form inputs and styles\n\t       * @fires Abide#formreset\n\t       */\n\t\n\t    }, {\n\t      key: 'resetForm',\n\t      value: function resetForm() {\n\t        var $form = this.$element,\n\t            opts = this.options;\n\t\n\t        $('.' + opts.labelErrorClass, $form).not('small').removeClass(opts.labelErrorClass);\n\t        $('.' + opts.inputErrorClass, $form).not('small').removeClass(opts.inputErrorClass);\n\t        $(opts.formErrorSelector + '.' + opts.formErrorClass).removeClass(opts.formErrorClass);\n\t        $form.find('[data-abide-error]').css('display', 'none');\n\t        $(':input', $form).not(':button, :submit, :reset, :hidden, :radio, :checkbox, [data-abide-ignore]').val('').removeAttr('data-invalid');\n\t        $(':input:radio', $form).not('[data-abide-ignore]').prop('checked', false).removeAttr('data-invalid');\n\t        $(':input:checkbox', $form).not('[data-abide-ignore]').prop('checked', false).removeAttr('data-invalid');\n\t        /**\n\t         * Fires when the form has been reset.\n\t         * @event Abide#formreset\n\t         */\n\t        $form.trigger('formreset.zf.abide', [$form]);\n\t      }\n\t\n\t      /**\n\t       * Destroys an instance of Abide.\n\t       * Removes error styles and classes from elements, without resetting their values.\n\t       */\n\t\n\t    }, {\n\t      key: 'destroy',\n\t      value: function destroy() {\n\t        var _this = this;\n\t        this.$element.off('.abide').find('[data-abide-error]').css('display', 'none');\n\t\n\t        this.$inputs.off('.abide').each(function () {\n\t          _this.removeErrorClasses($(this));\n\t        });\n\t\n\t        Foundation.unregisterPlugin(this);\n\t      }\n\t    }]);\n\t\n\t    return Abide;\n\t  }();\n\t\n\t  /**\n\t   * Default settings for plugin\n\t   */\n\t\n\t\n\t  Abide.defaults = {\n\t    /**\n\t     * The default event to validate inputs. Checkboxes and radios validate immediately.\n\t     * Remove or change this value for manual validation.\n\t     * @option\n\t     * @example 'fieldChange'\n\t     */\n\t    validateOn: 'fieldChange',\n\t\n\t    /**\n\t     * Class to be applied to input labels on failed validation.\n\t     * @option\n\t     * @example 'is-invalid-label'\n\t     */\n\t    labelErrorClass: 'is-invalid-label',\n\t\n\t    /**\n\t     * Class to be applied to inputs on failed validation.\n\t     * @option\n\t     * @example 'is-invalid-input'\n\t     */\n\t    inputErrorClass: 'is-invalid-input',\n\t\n\t    /**\n\t     * Class selector to use to target Form Errors for show/hide.\n\t     * @option\n\t     * @example '.form-error'\n\t     */\n\t    formErrorSelector: '.form-error',\n\t\n\t    /**\n\t     * Class added to Form Errors on failed validation.\n\t     * @option\n\t     * @example 'is-visible'\n\t     */\n\t    formErrorClass: 'is-visible',\n\t\n\t    /**\n\t     * Set to true to validate text inputs on any value change.\n\t     * @option\n\t     * @example false\n\t     */\n\t    liveValidate: false,\n\t\n\t    /**\n\t     * Set to true to validate inputs on blur.\n\t     * @option\n\t     * @example false\n\t     */\n\t    validateOnBlur: false,\n\t\n\t    patterns: {\n\t      alpha: /^[a-zA-Z]+$/,\n\t      alpha_numeric: /^[a-zA-Z0-9]+$/,\n\t      integer: /^[-+]?\\d+$/,\n\t      number: /^[-+]?\\d*(?:[\\.\\,]\\d+)?$/,\n\t\n\t      // amex, visa, diners\n\t      card: /^(?:4[0-9]{12}(?:[0-9]{3})?|5[1-5][0-9]{14}|6(?:011|5[0-9][0-9])[0-9]{12}|3[47][0-9]{13}|3(?:0[0-5]|[68][0-9])[0-9]{11}|(?:2131|1800|35\\d{3})\\d{11})$/,\n\t      cvv: /^([0-9]){3,4}$/,\n\t\n\t      // http://www.whatwg.org/specs/web-apps/current-work/multipage/states-of-the-type-attribute.html#valid-e-mail-address\n\t      email: /^[a-zA-Z0-9.!#$%&'*+\\/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)+$/,\n\t\n\t      url: /^(https?|ftp|file|ssh):\\/\\/(((([a-zA-Z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(%[\\da-f]{2})|[!\\$&'\\(\\)\\*\\+,;=]|:)*@)?(((\\d|[1-9]\\d|1\\d\\d|2[0-4]\\d|25[0-5])\\.(\\d|[1-9]\\d|1\\d\\d|2[0-4]\\d|25[0-5])\\.(\\d|[1-9]\\d|1\\d\\d|2[0-4]\\d|25[0-5])\\.(\\d|[1-9]\\d|1\\d\\d|2[0-4]\\d|25[0-5]))|((([a-zA-Z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(([a-zA-Z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])([a-zA-Z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])*([a-zA-Z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])))\\.)+(([a-zA-Z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(([a-zA-Z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])([a-zA-Z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])*([a-zA-Z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])))\\.?)(:\\d*)?)(\\/((([a-zA-Z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(%[\\da-f]{2})|[!\\$&'\\(\\)\\*\\+,;=]|:|@)+(\\/(([a-zA-Z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(%[\\da-f]{2})|[!\\$&'\\(\\)\\*\\+,;=]|:|@)*)*)?)?(\\?((([a-zA-Z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(%[\\da-f]{2})|[!\\$&'\\(\\)\\*\\+,;=]|:|@)|[\\uE000-\\uF8FF]|\\/|\\?)*)?(\\#((([a-zA-Z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(%[\\da-f]{2})|[!\\$&'\\(\\)\\*\\+,;=]|:|@)|\\/|\\?)*)?$/,\n\t      // abc.de\n\t      domain: /^([a-zA-Z0-9]([a-zA-Z0-9\\-]{0,61}[a-zA-Z0-9])?\\.)+[a-zA-Z]{2,8}$/,\n\t\n\t      datetime: /^([0-2][0-9]{3})\\-([0-1][0-9])\\-([0-3][0-9])T([0-5][0-9])\\:([0-5][0-9])\\:([0-5][0-9])(Z|([\\-\\+]([0-1][0-9])\\:00))$/,\n\t      // YYYY-MM-DD\n\t      date: /(?:19|20)[0-9]{2}-(?:(?:0[1-9]|1[0-2])-(?:0[1-9]|1[0-9]|2[0-9])|(?:(?!02)(?:0[1-9]|1[0-2])-(?:30))|(?:(?:0[13578]|1[02])-31))$/,\n\t      // HH:MM:SS\n\t      time: /^(0[0-9]|1[0-9]|2[0-3])(:[0-5][0-9]){2}$/,\n\t      dateISO: /^\\d{4}[\\/\\-]\\d{1,2}[\\/\\-]\\d{1,2}$/,\n\t      // MM/DD/YYYY\n\t      month_day_year: /^(0[1-9]|1[012])[- \\/.](0[1-9]|[12][0-9]|3[01])[- \\/.]\\d{4}$/,\n\t      // DD/MM/YYYY\n\t      day_month_year: /^(0[1-9]|[12][0-9]|3[01])[- \\/.](0[1-9]|1[012])[- \\/.]\\d{4}$/,\n\t\n\t      // #FFF or #FFFFFF\n\t      color: /^#?([a-fA-F0-9]{6}|[a-fA-F0-9]{3})$/\n\t    },\n\t\n\t    /**\n\t     * Optional validation functions to be used. `equalTo` being the only default included function.\n\t     * Functions should return only a boolean if the input is valid or not. Functions are given the following arguments:\n\t     * el : The jQuery element to validate.\n\t     * required : Boolean value of the required attribute be present or not.\n\t     * parent : The direct parent of the input.\n\t     * @option\n\t     */\n\t    validators: {\n\t      equalTo: function (el, required, parent) {\n\t        return $('#' + el.attr('data-equalto')).val() === el.val();\n\t      }\n\t    }\n\t  };\n\t\n\t  // Window exports\n\t  Foundation.plugin(Abide, 'Abide');\n\t}(jQuery);\n\t'use strict';\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\t!function ($) {\n\t\n\t  /**\n\t   * Accordion module.\n\t   * @module foundation.accordion\n\t   * @requires foundation.util.keyboard\n\t   * @requires foundation.util.motion\n\t   */\n\t\n\t  var Accordion = function () {\n\t    /**\n\t     * Creates a new instance of an accordion.\n\t     * @class\n\t     * @fires Accordion#init\n\t     * @param {jQuery} element - jQuery object to make into an accordion.\n\t     * @param {Object} options - a plain object with settings to override the default options.\n\t     */\n\t    function Accordion(element, options) {\n\t      _classCallCheck(this, Accordion);\n\t\n\t      this.$element = element;\n\t      this.options = $.extend({}, Accordion.defaults, this.$element.data(), options);\n\t\n\t      this._init();\n\t\n\t      Foundation.registerPlugin(this, 'Accordion');\n\t      Foundation.Keyboard.register('Accordion', {\n\t        'ENTER': 'toggle',\n\t        'SPACE': 'toggle',\n\t        'ARROW_DOWN': 'next',\n\t        'ARROW_UP': 'previous'\n\t      });\n\t    }\n\t\n\t    /**\n\t     * Initializes the accordion by animating the preset active pane(s).\n\t     * @private\n\t     */\n\t\n\t\n\t    _createClass(Accordion, [{\n\t      key: '_init',\n\t      value: function _init() {\n\t        this.$element.attr('role', 'tablist');\n\t        this.$tabs = this.$element.children('[data-accordion-item]');\n\t\n\t        this.$tabs.each(function (idx, el) {\n\t          var $el = $(el),\n\t              $content = $el.children('[data-tab-content]'),\n\t              id = $content[0].id || Foundation.GetYoDigits(6, 'accordion'),\n\t              linkId = el.id || id + '-label';\n\t\n\t          $el.find('a:first').attr({\n\t            'aria-controls': id,\n\t            'role': 'tab',\n\t            'id': linkId,\n\t            'aria-expanded': false,\n\t            'aria-selected': false\n\t          });\n\t\n\t          $content.attr({ 'role': 'tabpanel', 'aria-labelledby': linkId, 'aria-hidden': true, 'id': id });\n\t        });\n\t        var $initActive = this.$element.find('.is-active').children('[data-tab-content]');\n\t        if ($initActive.length) {\n\t          this.down($initActive, true);\n\t        }\n\t        this._events();\n\t      }\n\t\n\t      /**\n\t       * Adds event handlers for items within the accordion.\n\t       * @private\n\t       */\n\t\n\t    }, {\n\t      key: '_events',\n\t      value: function _events() {\n\t        var _this = this;\n\t\n\t        this.$tabs.each(function () {\n\t          var $elem = $(this);\n\t          var $tabContent = $elem.children('[data-tab-content]');\n\t          if ($tabContent.length) {\n\t            $elem.children('a').off('click.zf.accordion keydown.zf.accordion').on('click.zf.accordion', function (e) {\n\t              e.preventDefault();\n\t              _this.toggle($tabContent);\n\t            }).on('keydown.zf.accordion', function (e) {\n\t              Foundation.Keyboard.handleKey(e, 'Accordion', {\n\t                toggle: function () {\n\t                  _this.toggle($tabContent);\n\t                },\n\t                next: function () {\n\t                  var $a = $elem.next().find('a').focus();\n\t                  if (!_this.options.multiExpand) {\n\t                    $a.trigger('click.zf.accordion');\n\t                  }\n\t                },\n\t                previous: function () {\n\t                  var $a = $elem.prev().find('a').focus();\n\t                  if (!_this.options.multiExpand) {\n\t                    $a.trigger('click.zf.accordion');\n\t                  }\n\t                },\n\t                handled: function () {\n\t                  e.preventDefault();\n\t                  e.stopPropagation();\n\t                }\n\t              });\n\t            });\n\t          }\n\t        });\n\t      }\n\t\n\t      /**\n\t       * Toggles the selected content pane's open/close state.\n\t       * @param {jQuery} $target - jQuery object of the pane to toggle (`.accordion-content`).\n\t       * @function\n\t       */\n\t\n\t    }, {\n\t      key: 'toggle',\n\t      value: function toggle($target) {\n\t        if ($target.parent().hasClass('is-active')) {\n\t          this.up($target);\n\t        } else {\n\t          this.down($target);\n\t        }\n\t      }\n\t\n\t      /**\n\t       * Opens the accordion tab defined by `$target`.\n\t       * @param {jQuery} $target - Accordion pane to open (`.accordion-content`).\n\t       * @param {Boolean} firstTime - flag to determine if reflow should happen.\n\t       * @fires Accordion#down\n\t       * @function\n\t       */\n\t\n\t    }, {\n\t      key: 'down',\n\t      value: function down($target, firstTime) {\n\t        var _this2 = this;\n\t\n\t        $target.attr('aria-hidden', false).parent('[data-tab-content]').addBack().parent().addClass('is-active');\n\t\n\t        if (!this.options.multiExpand && !firstTime) {\n\t          var $currentActive = this.$element.children('.is-active').children('[data-tab-content]');\n\t          if ($currentActive.length) {\n\t            this.up($currentActive.not($target));\n\t          }\n\t        }\n\t\n\t        $target.slideDown(this.options.slideSpeed, function () {\n\t          /**\n\t           * Fires when the tab is done opening.\n\t           * @event Accordion#down\n\t           */\n\t          _this2.$element.trigger('down.zf.accordion', [$target]);\n\t        });\n\t\n\t        $('#' + $target.attr('aria-labelledby')).attr({\n\t          'aria-expanded': true,\n\t          'aria-selected': true\n\t        });\n\t      }\n\t\n\t      /**\n\t       * Closes the tab defined by `$target`.\n\t       * @param {jQuery} $target - Accordion tab to close (`.accordion-content`).\n\t       * @fires Accordion#up\n\t       * @function\n\t       */\n\t\n\t    }, {\n\t      key: 'up',\n\t      value: function up($target) {\n\t        var $aunts = $target.parent().siblings(),\n\t            _this = this;\n\t\n\t        if (!this.options.allowAllClosed && !$aunts.hasClass('is-active') || !$target.parent().hasClass('is-active')) {\n\t          return;\n\t        }\n\t\n\t        // Foundation.Move(this.options.slideSpeed, $target, function(){\n\t        $target.slideUp(_this.options.slideSpeed, function () {\n\t          /**\n\t           * Fires when the tab is done collapsing up.\n\t           * @event Accordion#up\n\t           */\n\t          _this.$element.trigger('up.zf.accordion', [$target]);\n\t        });\n\t        // });\n\t\n\t        $target.attr('aria-hidden', true).parent().removeClass('is-active');\n\t\n\t        $('#' + $target.attr('aria-labelledby')).attr({\n\t          'aria-expanded': false,\n\t          'aria-selected': false\n\t        });\n\t      }\n\t\n\t      /**\n\t       * Destroys an instance of an accordion.\n\t       * @fires Accordion#destroyed\n\t       * @function\n\t       */\n\t\n\t    }, {\n\t      key: 'destroy',\n\t      value: function destroy() {\n\t        this.$element.find('[data-tab-content]').stop(true).slideUp(0).css('display', '');\n\t        this.$element.find('a').off('.zf.accordion');\n\t\n\t        Foundation.unregisterPlugin(this);\n\t      }\n\t    }]);\n\t\n\t    return Accordion;\n\t  }();\n\t\n\t  Accordion.defaults = {\n\t    /**\n\t     * Amount of time to animate the opening of an accordion pane.\n\t     * @option\n\t     * @example 250\n\t     */\n\t    slideSpeed: 250,\n\t    /**\n\t     * Allow the accordion to have multiple open panes.\n\t     * @option\n\t     * @example false\n\t     */\n\t    multiExpand: false,\n\t    /**\n\t     * Allow the accordion to close all panes.\n\t     * @option\n\t     * @example false\n\t     */\n\t    allowAllClosed: false\n\t  };\n\t\n\t  // Window exports\n\t  Foundation.plugin(Accordion, 'Accordion');\n\t}(jQuery);\n\t'use strict';\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\t!function ($) {\n\t\n\t  /**\n\t   * AccordionMenu module.\n\t   * @module foundation.accordionMenu\n\t   * @requires foundation.util.keyboard\n\t   * @requires foundation.util.motion\n\t   * @requires foundation.util.nest\n\t   */\n\t\n\t  var AccordionMenu = function () {\n\t    /**\n\t     * Creates a new instance of an accordion menu.\n\t     * @class\n\t     * @fires AccordionMenu#init\n\t     * @param {jQuery} element - jQuery object to make into an accordion menu.\n\t     * @param {Object} options - Overrides to the default plugin settings.\n\t     */\n\t    function AccordionMenu(element, options) {\n\t      _classCallCheck(this, AccordionMenu);\n\t\n\t      this.$element = element;\n\t      this.options = $.extend({}, AccordionMenu.defaults, this.$element.data(), options);\n\t\n\t      Foundation.Nest.Feather(this.$element, 'accordion');\n\t\n\t      this._init();\n\t\n\t      Foundation.registerPlugin(this, 'AccordionMenu');\n\t      Foundation.Keyboard.register('AccordionMenu', {\n\t        'ENTER': 'toggle',\n\t        'SPACE': 'toggle',\n\t        'ARROW_RIGHT': 'open',\n\t        'ARROW_UP': 'up',\n\t        'ARROW_DOWN': 'down',\n\t        'ARROW_LEFT': 'close',\n\t        'ESCAPE': 'closeAll'\n\t      });\n\t    }\n\t\n\t    /**\n\t     * Initializes the accordion menu by hiding all nested menus.\n\t     * @private\n\t     */\n\t\n\t\n\t    _createClass(AccordionMenu, [{\n\t      key: '_init',\n\t      value: function _init() {\n\t        this.$element.find('[data-submenu]').not('.is-active').slideUp(0); //.find('a').css('padding-left', '1rem');\n\t        this.$element.attr({\n\t          'role': 'menu',\n\t          'aria-multiselectable': this.options.multiOpen\n\t        });\n\t\n\t        this.$menuLinks = this.$element.find('.is-accordion-submenu-parent');\n\t        this.$menuLinks.each(function () {\n\t          var linkId = this.id || Foundation.GetYoDigits(6, 'acc-menu-link'),\n\t              $elem = $(this),\n\t              $sub = $elem.children('[data-submenu]'),\n\t              subId = $sub[0].id || Foundation.GetYoDigits(6, 'acc-menu'),\n\t              isActive = $sub.hasClass('is-active');\n\t          $elem.attr({\n\t            'aria-controls': subId,\n\t            'aria-expanded': isActive,\n\t            'role': 'menuitem',\n\t            'id': linkId\n\t          });\n\t          $sub.attr({\n\t            'aria-labelledby': linkId,\n\t            'aria-hidden': !isActive,\n\t            'role': 'menu',\n\t            'id': subId\n\t          });\n\t        });\n\t        var initPanes = this.$element.find('.is-active');\n\t        if (initPanes.length) {\n\t          var _this = this;\n\t          initPanes.each(function () {\n\t            _this.down($(this));\n\t          });\n\t        }\n\t        this._events();\n\t      }\n\t\n\t      /**\n\t       * Adds event handlers for items within the menu.\n\t       * @private\n\t       */\n\t\n\t    }, {\n\t      key: '_events',\n\t      value: function _events() {\n\t        var _this = this;\n\t\n\t        this.$element.find('li').each(function () {\n\t          var $submenu = $(this).children('[data-submenu]');\n\t\n\t          if ($submenu.length) {\n\t            $(this).children('a').off('click.zf.accordionMenu').on('click.zf.accordionMenu', function (e) {\n\t              e.preventDefault();\n\t\n\t              _this.toggle($submenu);\n\t            });\n\t          }\n\t        }).on('keydown.zf.accordionmenu', function (e) {\n\t          var $element = $(this),\n\t              $elements = $element.parent('ul').children('li'),\n\t              $prevElement,\n\t              $nextElement,\n\t              $target = $element.children('[data-submenu]');\n\t\n\t          $elements.each(function (i) {\n\t            if ($(this).is($element)) {\n\t              $prevElement = $elements.eq(Math.max(0, i - 1)).find('a').first();\n\t              $nextElement = $elements.eq(Math.min(i + 1, $elements.length - 1)).find('a').first();\n\t\n\t              if ($(this).children('[data-submenu]:visible').length) {\n\t                // has open sub menu\n\t                $nextElement = $element.find('li:first-child').find('a').first();\n\t              }\n\t              if ($(this).is(':first-child')) {\n\t                // is first element of sub menu\n\t                $prevElement = $element.parents('li').first().find('a').first();\n\t              } else if ($prevElement.parents('li').first().children('[data-submenu]:visible').length) {\n\t                // if previous element has open sub menu\n\t                $prevElement = $prevElement.parents('li').find('li:last-child').find('a').first();\n\t              }\n\t              if ($(this).is(':last-child')) {\n\t                // is last element of sub menu\n\t                $nextElement = $element.parents('li').first().next('li').find('a').first();\n\t              }\n\t\n\t              return;\n\t            }\n\t          });\n\t\n\t          Foundation.Keyboard.handleKey(e, 'AccordionMenu', {\n\t            open: function () {\n\t              if ($target.is(':hidden')) {\n\t                _this.down($target);\n\t                $target.find('li').first().find('a').first().focus();\n\t              }\n\t            },\n\t            close: function () {\n\t              if ($target.length && !$target.is(':hidden')) {\n\t                // close active sub of this item\n\t                _this.up($target);\n\t              } else if ($element.parent('[data-submenu]').length) {\n\t                // close currently open sub\n\t                _this.up($element.parent('[data-submenu]'));\n\t                $element.parents('li').first().find('a').first().focus();\n\t              }\n\t            },\n\t            up: function () {\n\t              $prevElement.focus();\n\t              return true;\n\t            },\n\t            down: function () {\n\t              $nextElement.focus();\n\t              return true;\n\t            },\n\t            toggle: function () {\n\t              if ($element.children('[data-submenu]').length) {\n\t                _this.toggle($element.children('[data-submenu]'));\n\t              }\n\t            },\n\t            closeAll: function () {\n\t              _this.hideAll();\n\t            },\n\t            handled: function (preventDefault) {\n\t              if (preventDefault) {\n\t                e.preventDefault();\n\t              }\n\t              e.stopImmediatePropagation();\n\t            }\n\t          });\n\t        }); //.attr('tabindex', 0);\n\t      }\n\t\n\t      /**\n\t       * Closes all panes of the menu.\n\t       * @function\n\t       */\n\t\n\t    }, {\n\t      key: 'hideAll',\n\t      value: function hideAll() {\n\t        this.up(this.$element.find('[data-submenu]'));\n\t      }\n\t\n\t      /**\n\t       * Opens all panes of the menu.\n\t       * @function\n\t       */\n\t\n\t    }, {\n\t      key: 'showAll',\n\t      value: function showAll() {\n\t        this.down(this.$element.find('[data-submenu]'));\n\t      }\n\t\n\t      /**\n\t       * Toggles the open/close state of a submenu.\n\t       * @function\n\t       * @param {jQuery} $target - the submenu to toggle\n\t       */\n\t\n\t    }, {\n\t      key: 'toggle',\n\t      value: function toggle($target) {\n\t        if (!$target.is(':animated')) {\n\t          if (!$target.is(':hidden')) {\n\t            this.up($target);\n\t          } else {\n\t            this.down($target);\n\t          }\n\t        }\n\t      }\n\t\n\t      /**\n\t       * Opens the sub-menu defined by `$target`.\n\t       * @param {jQuery} $target - Sub-menu to open.\n\t       * @fires AccordionMenu#down\n\t       */\n\t\n\t    }, {\n\t      key: 'down',\n\t      value: function down($target) {\n\t        var _this = this;\n\t\n\t        if (!this.options.multiOpen) {\n\t          this.up(this.$element.find('.is-active').not($target.parentsUntil(this.$element).add($target)));\n\t        }\n\t\n\t        $target.addClass('is-active').attr({ 'aria-hidden': false }).parent('.is-accordion-submenu-parent').attr({ 'aria-expanded': true });\n\t\n\t        //Foundation.Move(this.options.slideSpeed, $target, function() {\n\t        $target.slideDown(_this.options.slideSpeed, function () {\n\t          /**\n\t           * Fires when the menu is done opening.\n\t           * @event AccordionMenu#down\n\t           */\n\t          _this.$element.trigger('down.zf.accordionMenu', [$target]);\n\t        });\n\t        //});\n\t      }\n\t\n\t      /**\n\t       * Closes the sub-menu defined by `$target`. All sub-menus inside the target will be closed as well.\n\t       * @param {jQuery} $target - Sub-menu to close.\n\t       * @fires AccordionMenu#up\n\t       */\n\t\n\t    }, {\n\t      key: 'up',\n\t      value: function up($target) {\n\t        var _this = this;\n\t        //Foundation.Move(this.options.slideSpeed, $target, function(){\n\t        $target.slideUp(_this.options.slideSpeed, function () {\n\t          /**\n\t           * Fires when the menu is done collapsing up.\n\t           * @event AccordionMenu#up\n\t           */\n\t          _this.$element.trigger('up.zf.accordionMenu', [$target]);\n\t        });\n\t        //});\n\t\n\t        var $menus = $target.find('[data-submenu]').slideUp(0).addBack().attr('aria-hidden', true);\n\t\n\t        $menus.parent('.is-accordion-submenu-parent').attr('aria-expanded', false);\n\t      }\n\t\n\t      /**\n\t       * Destroys an instance of accordion menu.\n\t       * @fires AccordionMenu#destroyed\n\t       */\n\t\n\t    }, {\n\t      key: 'destroy',\n\t      value: function destroy() {\n\t        this.$element.find('[data-submenu]').slideDown(0).css('display', '');\n\t        this.$element.find('a').off('click.zf.accordionMenu');\n\t\n\t        Foundation.Nest.Burn(this.$element, 'accordion');\n\t        Foundation.unregisterPlugin(this);\n\t      }\n\t    }]);\n\t\n\t    return AccordionMenu;\n\t  }();\n\t\n\t  AccordionMenu.defaults = {\n\t    /**\n\t     * Amount of time to animate the opening of a submenu in ms.\n\t     * @option\n\t     * @example 250\n\t     */\n\t    slideSpeed: 250,\n\t    /**\n\t     * Allow the menu to have multiple open panes.\n\t     * @option\n\t     * @example true\n\t     */\n\t    multiOpen: true\n\t  };\n\t\n\t  // Window exports\n\t  Foundation.plugin(AccordionMenu, 'AccordionMenu');\n\t}(jQuery);\n\t'use strict';\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\t!function ($) {\n\t\n\t  /**\n\t   * Drilldown module.\n\t   * @module foundation.drilldown\n\t   * @requires foundation.util.keyboard\n\t   * @requires foundation.util.motion\n\t   * @requires foundation.util.nest\n\t   */\n\t\n\t  var Drilldown = function () {\n\t    /**\n\t     * Creates a new instance of a drilldown menu.\n\t     * @class\n\t     * @param {jQuery} element - jQuery object to make into an accordion menu.\n\t     * @param {Object} options - Overrides to the default plugin settings.\n\t     */\n\t    function Drilldown(element, options) {\n\t      _classCallCheck(this, Drilldown);\n\t\n\t      this.$element = element;\n\t      this.options = $.extend({}, Drilldown.defaults, this.$element.data(), options);\n\t\n\t      Foundation.Nest.Feather(this.$element, 'drilldown');\n\t\n\t      this._init();\n\t\n\t      Foundation.registerPlugin(this, 'Drilldown');\n\t      Foundation.Keyboard.register('Drilldown', {\n\t        'ENTER': 'open',\n\t        'SPACE': 'open',\n\t        'ARROW_RIGHT': 'next',\n\t        'ARROW_UP': 'up',\n\t        'ARROW_DOWN': 'down',\n\t        'ARROW_LEFT': 'previous',\n\t        'ESCAPE': 'close',\n\t        'TAB': 'down',\n\t        'SHIFT_TAB': 'up'\n\t      });\n\t    }\n\t\n\t    /**\n\t     * Initializes the drilldown by creating jQuery collections of elements\n\t     * @private\n\t     */\n\t\n\t\n\t    _createClass(Drilldown, [{\n\t      key: '_init',\n\t      value: function _init() {\n\t        this.$submenuAnchors = this.$element.find('li.is-drilldown-submenu-parent').children('a');\n\t        this.$submenus = this.$submenuAnchors.parent('li').children('[data-submenu]');\n\t        this.$menuItems = this.$element.find('li').not('.js-drilldown-back').attr('role', 'menuitem').find('a');\n\t        this.$element.attr('data-mutate', this.$element.attr('data-drilldown') || Foundation.GetYoDigits(6, 'drilldown'));\n\t\n\t        this._prepareMenu();\n\t        this._registerEvents();\n\t\n\t        this._keyboardEvents();\n\t      }\n\t\n\t      /**\n\t       * prepares drilldown menu by setting attributes to links and elements\n\t       * sets a min height to prevent content jumping\n\t       * wraps the element if not already wrapped\n\t       * @private\n\t       * @function\n\t       */\n\t\n\t    }, {\n\t      key: '_prepareMenu',\n\t      value: function _prepareMenu() {\n\t        var _this = this;\n\t        // if(!this.options.holdOpen){\n\t        //   this._menuLinkEvents();\n\t        // }\n\t        this.$submenuAnchors.each(function () {\n\t          var $link = $(this);\n\t          var $sub = $link.parent();\n\t          if (_this.options.parentLink) {\n\t            $link.clone().prependTo($sub.children('[data-submenu]')).wrap('<li class=\"is-submenu-parent-item is-submenu-item is-drilldown-submenu-item\" role=\"menu-item\"></li>');\n\t          }\n\t          $link.data('savedHref', $link.attr('href')).removeAttr('href').attr('tabindex', 0);\n\t          $link.children('[data-submenu]').attr({\n\t            'aria-hidden': true,\n\t            'tabindex': 0,\n\t            'role': 'menu'\n\t          });\n\t          _this._events($link);\n\t        });\n\t        this.$submenus.each(function () {\n\t          var $menu = $(this),\n\t              $back = $menu.find('.js-drilldown-back');\n\t          if (!$back.length) {\n\t            switch (_this.options.backButtonPosition) {\n\t              case \"bottom\":\n\t                $menu.append(_this.options.backButton);\n\t                break;\n\t              case \"top\":\n\t                $menu.prepend(_this.options.backButton);\n\t                break;\n\t              default:\n\t                console.error(\"Unsupported backButtonPosition value '\" + _this.options.backButtonPosition + \"'\");\n\t            }\n\t          }\n\t          _this._back($menu);\n\t        });\n\t\n\t        if (!this.options.autoHeight) {\n\t          this.$submenus.addClass('drilldown-submenu-cover-previous');\n\t        }\n\t\n\t        if (!this.$element.parent().hasClass('is-drilldown')) {\n\t          this.$wrapper = $(this.options.wrapper).addClass('is-drilldown');\n\t          if (this.options.animateHeight) this.$wrapper.addClass('animate-height');\n\t          this.$wrapper = this.$element.wrap(this.$wrapper).parent().css(this._getMaxDims());\n\t        }\n\t      }\n\t    }, {\n\t      key: '_resize',\n\t      value: function _resize() {\n\t        this.$wrapper.css({ 'max-width': 'none', 'min-height': 'none' });\n\t        // _getMaxDims has side effects (boo) but calling it should update all other necessary heights & widths\n\t        this.$wrapper.css(this._getMaxDims());\n\t      }\n\t\n\t      /**\n\t       * Adds event handlers to elements in the menu.\n\t       * @function\n\t       * @private\n\t       * @param {jQuery} $elem - the current menu item to add handlers to.\n\t       */\n\t\n\t    }, {\n\t      key: '_events',\n\t      value: function _events($elem) {\n\t        var _this = this;\n\t\n\t        $elem.off('click.zf.drilldown').on('click.zf.drilldown', function (e) {\n\t          if ($(e.target).parentsUntil('ul', 'li').hasClass('is-drilldown-submenu-parent')) {\n\t            e.stopImmediatePropagation();\n\t            e.preventDefault();\n\t          }\n\t\n\t          // if(e.target !== e.currentTarget.firstElementChild){\n\t          //   return false;\n\t          // }\n\t          _this._show($elem.parent('li'));\n\t\n\t          if (_this.options.closeOnClick) {\n\t            var $body = $('body');\n\t            $body.off('.zf.drilldown').on('click.zf.drilldown', function (e) {\n\t              if (e.target === _this.$element[0] || $.contains(_this.$element[0], e.target)) {\n\t                return;\n\t              }\n\t              e.preventDefault();\n\t              _this._hideAll();\n\t              $body.off('.zf.drilldown');\n\t            });\n\t          }\n\t        });\n\t        this.$element.on('mutateme.zf.trigger', this._resize.bind(this));\n\t      }\n\t\n\t      /**\n\t       * Adds event handlers to the menu element.\n\t       * @function\n\t       * @private\n\t       */\n\t\n\t    }, {\n\t      key: '_registerEvents',\n\t      value: function _registerEvents() {\n\t        if (this.options.scrollTop) {\n\t          this._bindHandler = this._scrollTop.bind(this);\n\t          this.$element.on('open.zf.drilldown hide.zf.drilldown closed.zf.drilldown', this._bindHandler);\n\t        }\n\t      }\n\t\n\t      /**\n\t       * Scroll to Top of Element or data-scroll-top-element\n\t       * @function\n\t       * @fires Drilldown#scrollme\n\t       */\n\t\n\t    }, {\n\t      key: '_scrollTop',\n\t      value: function _scrollTop() {\n\t        var _this = this;\n\t        var $scrollTopElement = _this.options.scrollTopElement != '' ? $(_this.options.scrollTopElement) : _this.$element,\n\t            scrollPos = parseInt($scrollTopElement.offset().top + _this.options.scrollTopOffset);\n\t        $('html, body').stop(true).animate({ scrollTop: scrollPos }, _this.options.animationDuration, _this.options.animationEasing, function () {\n\t          /**\n\t            * Fires after the menu has scrolled\n\t            * @event Drilldown#scrollme\n\t            */\n\t          if (this === $('html')[0]) _this.$element.trigger('scrollme.zf.drilldown');\n\t        });\n\t      }\n\t\n\t      /**\n\t       * Adds keydown event listener to `li`'s in the menu.\n\t       * @private\n\t       */\n\t\n\t    }, {\n\t      key: '_keyboardEvents',\n\t      value: function _keyboardEvents() {\n\t        var _this = this;\n\t\n\t        this.$menuItems.add(this.$element.find('.js-drilldown-back > a, .is-submenu-parent-item > a')).on('keydown.zf.drilldown', function (e) {\n\t          var $element = $(this),\n\t              $elements = $element.parent('li').parent('ul').children('li').children('a'),\n\t              $prevElement,\n\t              $nextElement;\n\t\n\t          $elements.each(function (i) {\n\t            if ($(this).is($element)) {\n\t              $prevElement = $elements.eq(Math.max(0, i - 1));\n\t              $nextElement = $elements.eq(Math.min(i + 1, $elements.length - 1));\n\t              return;\n\t            }\n\t          });\n\t\n\t          Foundation.Keyboard.handleKey(e, 'Drilldown', {\n\t            next: function () {\n\t              if ($element.is(_this.$submenuAnchors)) {\n\t                _this._show($element.parent('li'));\n\t                $element.parent('li').one(Foundation.transitionend($element), function () {\n\t                  $element.parent('li').find('ul li a').filter(_this.$menuItems).first().focus();\n\t                });\n\t                return true;\n\t              }\n\t            },\n\t            previous: function () {\n\t              _this._hide($element.parent('li').parent('ul'));\n\t              $element.parent('li').parent('ul').one(Foundation.transitionend($element), function () {\n\t                setTimeout(function () {\n\t                  $element.parent('li').parent('ul').parent('li').children('a').first().focus();\n\t                }, 1);\n\t              });\n\t              return true;\n\t            },\n\t            up: function () {\n\t              $prevElement.focus();\n\t              return true;\n\t            },\n\t            down: function () {\n\t              $nextElement.focus();\n\t              return true;\n\t            },\n\t            close: function () {\n\t              _this._back();\n\t              //_this.$menuItems.first().focus(); // focus to first element\n\t            },\n\t            open: function () {\n\t              if (!$element.is(_this.$menuItems)) {\n\t                // not menu item means back button\n\t                _this._hide($element.parent('li').parent('ul'));\n\t                $element.parent('li').parent('ul').one(Foundation.transitionend($element), function () {\n\t                  setTimeout(function () {\n\t                    $element.parent('li').parent('ul').parent('li').children('a').first().focus();\n\t                  }, 1);\n\t                });\n\t                return true;\n\t              } else if ($element.is(_this.$submenuAnchors)) {\n\t                _this._show($element.parent('li'));\n\t                $element.parent('li').one(Foundation.transitionend($element), function () {\n\t                  $element.parent('li').find('ul li a').filter(_this.$menuItems).first().focus();\n\t                });\n\t                return true;\n\t              }\n\t            },\n\t            handled: function (preventDefault) {\n\t              if (preventDefault) {\n\t                e.preventDefault();\n\t              }\n\t              e.stopImmediatePropagation();\n\t            }\n\t          });\n\t        }); // end keyboardAccess\n\t      }\n\t\n\t      /**\n\t       * Closes all open elements, and returns to root menu.\n\t       * @function\n\t       * @fires Drilldown#closed\n\t       */\n\t\n\t    }, {\n\t      key: '_hideAll',\n\t      value: function _hideAll() {\n\t        var $elem = this.$element.find('.is-drilldown-submenu.is-active').addClass('is-closing');\n\t        if (this.options.autoHeight) this.$wrapper.css({ height: $elem.parent().closest('ul').data('calcHeight') });\n\t        $elem.one(Foundation.transitionend($elem), function (e) {\n\t          $elem.removeClass('is-active is-closing');\n\t        });\n\t        /**\n\t         * Fires when the menu is fully closed.\n\t         * @event Drilldown#closed\n\t         */\n\t        this.$element.trigger('closed.zf.drilldown');\n\t      }\n\t\n\t      /**\n\t       * Adds event listener for each `back` button, and closes open menus.\n\t       * @function\n\t       * @fires Drilldown#back\n\t       * @param {jQuery} $elem - the current sub-menu to add `back` event.\n\t       */\n\t\n\t    }, {\n\t      key: '_back',\n\t      value: function _back($elem) {\n\t        var _this = this;\n\t        $elem.off('click.zf.drilldown');\n\t        $elem.children('.js-drilldown-back').on('click.zf.drilldown', function (e) {\n\t          e.stopImmediatePropagation();\n\t          // console.log('mouseup on back');\n\t          _this._hide($elem);\n\t\n\t          // If there is a parent submenu, call show\n\t          var parentSubMenu = $elem.parent('li').parent('ul').parent('li');\n\t          if (parentSubMenu.length) {\n\t            _this._show(parentSubMenu);\n\t          }\n\t        });\n\t      }\n\t\n\t      /**\n\t       * Adds event listener to menu items w/o submenus to close open menus on click.\n\t       * @function\n\t       * @private\n\t       */\n\t\n\t    }, {\n\t      key: '_menuLinkEvents',\n\t      value: function _menuLinkEvents() {\n\t        var _this = this;\n\t        this.$menuItems.not('.is-drilldown-submenu-parent').off('click.zf.drilldown').on('click.zf.drilldown', function (e) {\n\t          // e.stopImmediatePropagation();\n\t          setTimeout(function () {\n\t            _this._hideAll();\n\t          }, 0);\n\t        });\n\t      }\n\t\n\t      /**\n\t       * Opens a submenu.\n\t       * @function\n\t       * @fires Drilldown#open\n\t       * @param {jQuery} $elem - the current element with a submenu to open, i.e. the `li` tag.\n\t       */\n\t\n\t    }, {\n\t      key: '_show',\n\t      value: function _show($elem) {\n\t        if (this.options.autoHeight) this.$wrapper.css({ height: $elem.children('[data-submenu]').data('calcHeight') });\n\t        $elem.attr('aria-expanded', true);\n\t        $elem.children('[data-submenu]').addClass('is-active').attr('aria-hidden', false);\n\t        /**\n\t         * Fires when the submenu has opened.\n\t         * @event Drilldown#open\n\t         */\n\t        this.$element.trigger('open.zf.drilldown', [$elem]);\n\t      }\n\t    }, {\n\t      key: '_hide',\n\t\n\t\n\t      /**\n\t       * Hides a submenu\n\t       * @function\n\t       * @fires Drilldown#hide\n\t       * @param {jQuery} $elem - the current sub-menu to hide, i.e. the `ul` tag.\n\t       */\n\t      value: function _hide($elem) {\n\t        if (this.options.autoHeight) this.$wrapper.css({ height: $elem.parent().closest('ul').data('calcHeight') });\n\t        var _this = this;\n\t        $elem.parent('li').attr('aria-expanded', false);\n\t        $elem.attr('aria-hidden', true).addClass('is-closing');\n\t        $elem.addClass('is-closing').one(Foundation.transitionend($elem), function () {\n\t          $elem.removeClass('is-active is-closing');\n\t          $elem.blur();\n\t        });\n\t        /**\n\t         * Fires when the submenu has closed.\n\t         * @event Drilldown#hide\n\t         */\n\t        $elem.trigger('hide.zf.drilldown', [$elem]);\n\t      }\n\t\n\t      /**\n\t       * Iterates through the nested menus to calculate the min-height, and max-width for the menu.\n\t       * Prevents content jumping.\n\t       * @function\n\t       * @private\n\t       */\n\t\n\t    }, {\n\t      key: '_getMaxDims',\n\t      value: function _getMaxDims() {\n\t        var maxHeight = 0,\n\t            result = {},\n\t            _this = this;\n\t        this.$submenus.add(this.$element).each(function () {\n\t          var numOfElems = $(this).children('li').length;\n\t          var height = Foundation.Box.GetDimensions(this).height;\n\t          maxHeight = height > maxHeight ? height : maxHeight;\n\t          if (_this.options.autoHeight) {\n\t            $(this).data('calcHeight', height);\n\t            if (!$(this).hasClass('is-drilldown-submenu')) result['height'] = height;\n\t          }\n\t        });\n\t\n\t        if (!this.options.autoHeight) result['min-height'] = maxHeight + 'px';\n\t\n\t        result['max-width'] = this.$element[0].getBoundingClientRect().width + 'px';\n\t\n\t        return result;\n\t      }\n\t\n\t      /**\n\t       * Destroys the Drilldown Menu\n\t       * @function\n\t       */\n\t\n\t    }, {\n\t      key: 'destroy',\n\t      value: function destroy() {\n\t        if (this.options.scrollTop) this.$element.off('.zf.drilldown', this._bindHandler);\n\t        this._hideAll();\n\t        this.$element.off('mutateme.zf.trigger');\n\t        Foundation.Nest.Burn(this.$element, 'drilldown');\n\t        this.$element.unwrap().find('.js-drilldown-back, .is-submenu-parent-item').remove().end().find('.is-active, .is-closing, .is-drilldown-submenu').removeClass('is-active is-closing is-drilldown-submenu').end().find('[data-submenu]').removeAttr('aria-hidden tabindex role');\n\t        this.$submenuAnchors.each(function () {\n\t          $(this).off('.zf.drilldown');\n\t        });\n\t\n\t        this.$submenus.removeClass('drilldown-submenu-cover-previous');\n\t\n\t        this.$element.find('a').each(function () {\n\t          var $link = $(this);\n\t          $link.removeAttr('tabindex');\n\t          if ($link.data('savedHref')) {\n\t            $link.attr('href', $link.data('savedHref')).removeData('savedHref');\n\t          } else {\n\t            return;\n\t          }\n\t        });\n\t        Foundation.unregisterPlugin(this);\n\t      }\n\t    }]);\n\t\n\t    return Drilldown;\n\t  }();\n\t\n\t  Drilldown.defaults = {\n\t    /**\n\t     * Markup used for JS generated back button. Prepended  or appended (see backButtonPosition) to submenu lists and deleted on `destroy` method, 'js-drilldown-back' class required. Remove the backslash (`\\`) if copy and pasting.\n\t     * @option\n\t     * @example '<\\li><\\a>Back<\\/a><\\/li>'\n\t     */\n\t    backButton: '<li class=\"js-drilldown-back\"><a tabindex=\"0\">Back</a></li>',\n\t    /**\n\t     * Position the back button either at the top or bottom of drilldown submenus.\n\t     * @option\n\t     * @example bottom\n\t     */\n\t    backButtonPosition: 'top',\n\t    /**\n\t     * Markup used to wrap drilldown menu. Use a class name for independent styling; the JS applied class: `is-drilldown` is required. Remove the backslash (`\\`) if copy and pasting.\n\t     * @option\n\t     * @example '<\\div class=\"is-drilldown\"><\\/div>'\n\t     */\n\t    wrapper: '<div></div>',\n\t    /**\n\t     * Adds the parent link to the submenu.\n\t     * @option\n\t     * @example false\n\t     */\n\t    parentLink: false,\n\t    /**\n\t     * Allow the menu to return to root list on body click.\n\t     * @option\n\t     * @example false\n\t     */\n\t    closeOnClick: false,\n\t    /**\n\t     * Allow the menu to auto adjust height.\n\t     * @option\n\t     * @example false\n\t     */\n\t    autoHeight: false,\n\t    /**\n\t     * Animate the auto adjust height.\n\t     * @option\n\t     * @example false\n\t     */\n\t    animateHeight: false,\n\t    /**\n\t     * Scroll to the top of the menu after opening a submenu or navigating back using the menu back button\n\t     * @option\n\t     * @example false\n\t     */\n\t    scrollTop: false,\n\t    /**\n\t     * String jquery selector (for example 'body') of element to take offset().top from, if empty string the drilldown menu offset().top is taken\n\t     * @option\n\t     * @example ''\n\t     */\n\t    scrollTopElement: '',\n\t    /**\n\t     * ScrollTop offset\n\t     * @option\n\t     * @example 100\n\t     */\n\t    scrollTopOffset: 0,\n\t    /**\n\t     * Scroll animation duration\n\t     * @option\n\t     * @example 500\n\t     */\n\t    animationDuration: 500,\n\t    /**\n\t     * Scroll animation easing\n\t     * @option\n\t     * @example 'swing'\n\t     */\n\t    animationEasing: 'swing'\n\t    // holdOpen: false\n\t  };\n\t\n\t  // Window exports\n\t  Foundation.plugin(Drilldown, 'Drilldown');\n\t}(jQuery);\n\t'use strict';\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\t!function ($) {\n\t\n\t  /**\n\t   * Dropdown module.\n\t   * @module foundation.dropdown\n\t   * @requires foundation.util.keyboard\n\t   * @requires foundation.util.box\n\t   * @requires foundation.util.triggers\n\t   */\n\t\n\t  var Dropdown = function () {\n\t    /**\n\t     * Creates a new instance of a dropdown.\n\t     * @class\n\t     * @param {jQuery} element - jQuery object to make into a dropdown.\n\t     *        Object should be of the dropdown panel, rather than its anchor.\n\t     * @param {Object} options - Overrides to the default plugin settings.\n\t     */\n\t    function Dropdown(element, options) {\n\t      _classCallCheck(this, Dropdown);\n\t\n\t      this.$element = element;\n\t      this.options = $.extend({}, Dropdown.defaults, this.$element.data(), options);\n\t      this._init();\n\t\n\t      Foundation.registerPlugin(this, 'Dropdown');\n\t      Foundation.Keyboard.register('Dropdown', {\n\t        'ENTER': 'open',\n\t        'SPACE': 'open',\n\t        'ESCAPE': 'close'\n\t      });\n\t    }\n\t\n\t    /**\n\t     * Initializes the plugin by setting/checking options and attributes, adding helper variables, and saving the anchor.\n\t     * @function\n\t     * @private\n\t     */\n\t\n\t\n\t    _createClass(Dropdown, [{\n\t      key: '_init',\n\t      value: function _init() {\n\t        var $id = this.$element.attr('id');\n\t\n\t        this.$anchor = $('[data-toggle=\"' + $id + '\"]').length ? $('[data-toggle=\"' + $id + '\"]') : $('[data-open=\"' + $id + '\"]');\n\t        this.$anchor.attr({\n\t          'aria-controls': $id,\n\t          'data-is-focus': false,\n\t          'data-yeti-box': $id,\n\t          'aria-haspopup': true,\n\t          'aria-expanded': false\n\t\n\t        });\n\t\n\t        if (this.options.parentClass) {\n\t          this.$parent = this.$element.parents('.' + this.options.parentClass);\n\t        } else {\n\t          this.$parent = null;\n\t        }\n\t        this.options.positionClass = this.getPositionClass();\n\t        this.counter = 4;\n\t        this.usedPositions = [];\n\t        this.$element.attr({\n\t          'aria-hidden': 'true',\n\t          'data-yeti-box': $id,\n\t          'data-resize': $id,\n\t          'aria-labelledby': this.$anchor[0].id || Foundation.GetYoDigits(6, 'dd-anchor')\n\t        });\n\t        this._events();\n\t      }\n\t\n\t      /**\n\t       * Helper function to determine current orientation of dropdown pane.\n\t       * @function\n\t       * @returns {String} position - string value of a position class.\n\t       */\n\t\n\t    }, {\n\t      key: 'getPositionClass',\n\t      value: function getPositionClass() {\n\t        var verticalPosition = this.$element[0].className.match(/(top|left|right|bottom)/g);\n\t        verticalPosition = verticalPosition ? verticalPosition[0] : '';\n\t        var horizontalPosition = /float-(\\S+)/.exec(this.$anchor[0].className);\n\t        horizontalPosition = horizontalPosition ? horizontalPosition[1] : '';\n\t        var position = horizontalPosition ? horizontalPosition + ' ' + verticalPosition : verticalPosition;\n\t\n\t        return position;\n\t      }\n\t\n\t      /**\n\t       * Adjusts the dropdown panes orientation by adding/removing positioning classes.\n\t       * @function\n\t       * @private\n\t       * @param {String} position - position class to remove.\n\t       */\n\t\n\t    }, {\n\t      key: '_reposition',\n\t      value: function _reposition(position) {\n\t        this.usedPositions.push(position ? position : 'bottom');\n\t        //default, try switching to opposite side\n\t        if (!position && this.usedPositions.indexOf('top') < 0) {\n\t          this.$element.addClass('top');\n\t        } else if (position === 'top' && this.usedPositions.indexOf('bottom') < 0) {\n\t          this.$element.removeClass(position);\n\t        } else if (position === 'left' && this.usedPositions.indexOf('right') < 0) {\n\t          this.$element.removeClass(position).addClass('right');\n\t        } else if (position === 'right' && this.usedPositions.indexOf('left') < 0) {\n\t          this.$element.removeClass(position).addClass('left');\n\t        }\n\t\n\t        //if default change didn't work, try bottom or left first\n\t        else if (!position && this.usedPositions.indexOf('top') > -1 && this.usedPositions.indexOf('left') < 0) {\n\t            this.$element.addClass('left');\n\t          } else if (position === 'top' && this.usedPositions.indexOf('bottom') > -1 && this.usedPositions.indexOf('left') < 0) {\n\t            this.$element.removeClass(position).addClass('left');\n\t          } else if (position === 'left' && this.usedPositions.indexOf('right') > -1 && this.usedPositions.indexOf('bottom') < 0) {\n\t            this.$element.removeClass(position);\n\t          } else if (position === 'right' && this.usedPositions.indexOf('left') > -1 && this.usedPositions.indexOf('bottom') < 0) {\n\t            this.$element.removeClass(position);\n\t          }\n\t          //if nothing cleared, set to bottom\n\t          else {\n\t              this.$element.removeClass(position);\n\t            }\n\t        this.classChanged = true;\n\t        this.counter--;\n\t      }\n\t\n\t      /**\n\t       * Sets the position and orientation of the dropdown pane, checks for collisions.\n\t       * Recursively calls itself if a collision is detected, with a new position class.\n\t       * @function\n\t       * @private\n\t       */\n\t\n\t    }, {\n\t      key: '_setPosition',\n\t      value: function _setPosition() {\n\t        if (this.$anchor.attr('aria-expanded') === 'false') {\n\t          return false;\n\t        }\n\t        var position = this.getPositionClass(),\n\t            $eleDims = Foundation.Box.GetDimensions(this.$element),\n\t            $anchorDims = Foundation.Box.GetDimensions(this.$anchor),\n\t            _this = this,\n\t            direction = position === 'left' ? 'left' : position === 'right' ? 'left' : 'top',\n\t            param = direction === 'top' ? 'height' : 'width',\n\t            offset = param === 'height' ? this.options.vOffset : this.options.hOffset;\n\t\n\t        if ($eleDims.width >= $eleDims.windowDims.width || !this.counter && !Foundation.Box.ImNotTouchingYou(this.$element, this.$parent)) {\n\t          var newWidth = $eleDims.windowDims.width,\n\t              parentHOffset = 0;\n\t          if (this.$parent) {\n\t            var $parentDims = Foundation.Box.GetDimensions(this.$parent),\n\t                parentHOffset = $parentDims.offset.left;\n\t            if ($parentDims.width < newWidth) {\n\t              newWidth = $parentDims.width;\n\t            }\n\t          }\n\t\n\t          this.$element.offset(Foundation.Box.GetOffsets(this.$element, this.$anchor, 'center bottom', this.options.vOffset, this.options.hOffset + parentHOffset, true)).css({\n\t            'width': newWidth - this.options.hOffset * 2,\n\t            'height': 'auto'\n\t          });\n\t          this.classChanged = true;\n\t          return false;\n\t        }\n\t\n\t        this.$element.offset(Foundation.Box.GetOffsets(this.$element, this.$anchor, position, this.options.vOffset, this.options.hOffset));\n\t\n\t        while (!Foundation.Box.ImNotTouchingYou(this.$element, this.$parent, true) && this.counter) {\n\t          this._reposition(position);\n\t          this._setPosition();\n\t        }\n\t      }\n\t\n\t      /**\n\t       * Adds event listeners to the element utilizing the triggers utility library.\n\t       * @function\n\t       * @private\n\t       */\n\t\n\t    }, {\n\t      key: '_events',\n\t      value: function _events() {\n\t        var _this = this;\n\t        this.$element.on({\n\t          'open.zf.trigger': this.open.bind(this),\n\t          'close.zf.trigger': this.close.bind(this),\n\t          'toggle.zf.trigger': this.toggle.bind(this),\n\t          'resizeme.zf.trigger': this._setPosition.bind(this)\n\t        });\n\t\n\t        if (this.options.hover) {\n\t          this.$anchor.off('mouseenter.zf.dropdown mouseleave.zf.dropdown').on('mouseenter.zf.dropdown', function () {\n\t            var bodyData = $('body').data();\n\t            if (typeof bodyData.whatinput === 'undefined' || bodyData.whatinput === 'mouse') {\n\t              clearTimeout(_this.timeout);\n\t              _this.timeout = setTimeout(function () {\n\t                _this.open();\n\t                _this.$anchor.data('hover', true);\n\t              }, _this.options.hoverDelay);\n\t            }\n\t          }).on('mouseleave.zf.dropdown', function () {\n\t            clearTimeout(_this.timeout);\n\t            _this.timeout = setTimeout(function () {\n\t              _this.close();\n\t              _this.$anchor.data('hover', false);\n\t            }, _this.options.hoverDelay);\n\t          });\n\t          if (this.options.hoverPane) {\n\t            this.$element.off('mouseenter.zf.dropdown mouseleave.zf.dropdown').on('mouseenter.zf.dropdown', function () {\n\t              clearTimeout(_this.timeout);\n\t            }).on('mouseleave.zf.dropdown', function () {\n\t              clearTimeout(_this.timeout);\n\t              _this.timeout = setTimeout(function () {\n\t                _this.close();\n\t                _this.$anchor.data('hover', false);\n\t              }, _this.options.hoverDelay);\n\t            });\n\t          }\n\t        }\n\t        this.$anchor.add(this.$element).on('keydown.zf.dropdown', function (e) {\n\t\n\t          var $target = $(this),\n\t              visibleFocusableElements = Foundation.Keyboard.findFocusable(_this.$element);\n\t\n\t          Foundation.Keyboard.handleKey(e, 'Dropdown', {\n\t            open: function () {\n\t              if ($target.is(_this.$anchor)) {\n\t                _this.open();\n\t                _this.$element.attr('tabindex', -1).focus();\n\t                e.preventDefault();\n\t              }\n\t            },\n\t            close: function () {\n\t              _this.close();\n\t              _this.$anchor.focus();\n\t            }\n\t          });\n\t        });\n\t      }\n\t\n\t      /**\n\t       * Adds an event handler to the body to close any dropdowns on a click.\n\t       * @function\n\t       * @private\n\t       */\n\t\n\t    }, {\n\t      key: '_addBodyHandler',\n\t      value: function _addBodyHandler() {\n\t        var $body = $(document.body).not(this.$element),\n\t            _this = this;\n\t        $body.off('click.zf.dropdown').on('click.zf.dropdown', function (e) {\n\t          if (_this.$anchor.is(e.target) || _this.$anchor.find(e.target).length) {\n\t            return;\n\t          }\n\t          if (_this.$element.find(e.target).length) {\n\t            return;\n\t          }\n\t          _this.close();\n\t          $body.off('click.zf.dropdown');\n\t        });\n\t      }\n\t\n\t      /**\n\t       * Opens the dropdown pane, and fires a bubbling event to close other dropdowns.\n\t       * @function\n\t       * @fires Dropdown#closeme\n\t       * @fires Dropdown#show\n\t       */\n\t\n\t    }, {\n\t      key: 'open',\n\t      value: function open() {\n\t        // var _this = this;\n\t        /**\n\t         * Fires to close other open dropdowns\n\t         * @event Dropdown#closeme\n\t         */\n\t        this.$element.trigger('closeme.zf.dropdown', this.$element.attr('id'));\n\t        this.$anchor.addClass('hover').attr({ 'aria-expanded': true });\n\t        // this.$element/*.show()*/;\n\t        this._setPosition();\n\t        this.$element.addClass('is-open').attr({ 'aria-hidden': false });\n\t\n\t        if (this.options.autoFocus) {\n\t          var $focusable = Foundation.Keyboard.findFocusable(this.$element);\n\t          if ($focusable.length) {\n\t            $focusable.eq(0).focus();\n\t          }\n\t        }\n\t\n\t        if (this.options.closeOnClick) {\n\t          this._addBodyHandler();\n\t        }\n\t\n\t        if (this.options.trapFocus) {\n\t          Foundation.Keyboard.trapFocus(this.$element);\n\t        }\n\t\n\t        /**\n\t         * Fires once the dropdown is visible.\n\t         * @event Dropdown#show\n\t         */\n\t        this.$element.trigger('show.zf.dropdown', [this.$element]);\n\t      }\n\t\n\t      /**\n\t       * Closes the open dropdown pane.\n\t       * @function\n\t       * @fires Dropdown#hide\n\t       */\n\t\n\t    }, {\n\t      key: 'close',\n\t      value: function close() {\n\t        if (!this.$element.hasClass('is-open')) {\n\t          return false;\n\t        }\n\t        this.$element.removeClass('is-open').attr({ 'aria-hidden': true });\n\t\n\t        this.$anchor.removeClass('hover').attr('aria-expanded', false);\n\t\n\t        if (this.classChanged) {\n\t          var curPositionClass = this.getPositionClass();\n\t          if (curPositionClass) {\n\t            this.$element.removeClass(curPositionClass);\n\t          }\n\t          this.$element.addClass(this.options.positionClass)\n\t          /*.hide()*/.css({ height: '', width: '' });\n\t          this.classChanged = false;\n\t          this.counter = 4;\n\t          this.usedPositions.length = 0;\n\t        }\n\t        this.$element.trigger('hide.zf.dropdown', [this.$element]);\n\t\n\t        if (this.options.trapFocus) {\n\t          Foundation.Keyboard.releaseFocus(this.$element);\n\t        }\n\t      }\n\t\n\t      /**\n\t       * Toggles the dropdown pane's visibility.\n\t       * @function\n\t       */\n\t\n\t    }, {\n\t      key: 'toggle',\n\t      value: function toggle() {\n\t        if (this.$element.hasClass('is-open')) {\n\t          if (this.$anchor.data('hover')) return;\n\t          this.close();\n\t        } else {\n\t          this.open();\n\t        }\n\t      }\n\t\n\t      /**\n\t       * Destroys the dropdown.\n\t       * @function\n\t       */\n\t\n\t    }, {\n\t      key: 'destroy',\n\t      value: function destroy() {\n\t        this.$element.off('.zf.trigger').hide();\n\t        this.$anchor.off('.zf.dropdown');\n\t\n\t        Foundation.unregisterPlugin(this);\n\t      }\n\t    }]);\n\t\n\t    return Dropdown;\n\t  }();\n\t\n\t  Dropdown.defaults = {\n\t    /**\n\t     * Class that designates bounding container of Dropdown (Default: window)\n\t     * @option\n\t     * @example 'dropdown-parent'\n\t     */\n\t    parentClass: null,\n\t    /**\n\t     * Amount of time to delay opening a submenu on hover event.\n\t     * @option\n\t     * @example 250\n\t     */\n\t    hoverDelay: 250,\n\t    /**\n\t     * Allow submenus to open on hover events\n\t     * @option\n\t     * @example false\n\t     */\n\t    hover: false,\n\t    /**\n\t     * Don't close dropdown when hovering over dropdown pane\n\t     * @option\n\t     * @example true\n\t     */\n\t    hoverPane: false,\n\t    /**\n\t     * Number of pixels between the dropdown pane and the triggering element on open.\n\t     * @option\n\t     * @example 1\n\t     */\n\t    vOffset: 1,\n\t    /**\n\t     * Number of pixels between the dropdown pane and the triggering element on open.\n\t     * @option\n\t     * @example 1\n\t     */\n\t    hOffset: 1,\n\t    /**\n\t     * Class applied to adjust open position. JS will test and fill this in.\n\t     * @option\n\t     * @example 'top'\n\t     */\n\t    positionClass: '',\n\t    /**\n\t     * Allow the plugin to trap focus to the dropdown pane if opened with keyboard commands.\n\t     * @option\n\t     * @example false\n\t     */\n\t    trapFocus: false,\n\t    /**\n\t     * Allow the plugin to set focus to the first focusable element within the pane, regardless of method of opening.\n\t     * @option\n\t     * @example true\n\t     */\n\t    autoFocus: false,\n\t    /**\n\t     * Allows a click on the body to close the dropdown.\n\t     * @option\n\t     * @example false\n\t     */\n\t    closeOnClick: false\n\t  };\n\t\n\t  // Window exports\n\t  Foundation.plugin(Dropdown, 'Dropdown');\n\t}(jQuery);\n\t'use strict';\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\t!function ($) {\n\t\n\t  /**\n\t   * DropdownMenu module.\n\t   * @module foundation.dropdown-menu\n\t   * @requires foundation.util.keyboard\n\t   * @requires foundation.util.box\n\t   * @requires foundation.util.nest\n\t   */\n\t\n\t  var DropdownMenu = function () {\n\t    /**\n\t     * Creates a new instance of DropdownMenu.\n\t     * @class\n\t     * @fires DropdownMenu#init\n\t     * @param {jQuery} element - jQuery object to make into a dropdown menu.\n\t     * @param {Object} options - Overrides to the default plugin settings.\n\t     */\n\t    function DropdownMenu(element, options) {\n\t      _classCallCheck(this, DropdownMenu);\n\t\n\t      this.$element = element;\n\t      this.options = $.extend({}, DropdownMenu.defaults, this.$element.data(), options);\n\t\n\t      Foundation.Nest.Feather(this.$element, 'dropdown');\n\t      this._init();\n\t\n\t      Foundation.registerPlugin(this, 'DropdownMenu');\n\t      Foundation.Keyboard.register('DropdownMenu', {\n\t        'ENTER': 'open',\n\t        'SPACE': 'open',\n\t        'ARROW_RIGHT': 'next',\n\t        'ARROW_UP': 'up',\n\t        'ARROW_DOWN': 'down',\n\t        'ARROW_LEFT': 'previous',\n\t        'ESCAPE': 'close'\n\t      });\n\t    }\n\t\n\t    /**\n\t     * Initializes the plugin, and calls _prepareMenu\n\t     * @private\n\t     * @function\n\t     */\n\t\n\t\n\t    _createClass(DropdownMenu, [{\n\t      key: '_init',\n\t      value: function _init() {\n\t        var subs = this.$element.find('li.is-dropdown-submenu-parent');\n\t        this.$element.children('.is-dropdown-submenu-parent').children('.is-dropdown-submenu').addClass('first-sub');\n\t\n\t        this.$menuItems = this.$element.find('[role=\"menuitem\"]');\n\t        this.$tabs = this.$element.children('[role=\"menuitem\"]');\n\t        this.$tabs.find('ul.is-dropdown-submenu').addClass(this.options.verticalClass);\n\t\n\t        if (this.$element.hasClass(this.options.rightClass) || this.options.alignment === 'right' || Foundation.rtl() || this.$element.parents('.top-bar-right').is('*')) {\n\t          this.options.alignment = 'right';\n\t          subs.addClass('opens-left');\n\t        } else {\n\t          subs.addClass('opens-right');\n\t        }\n\t        this.changed = false;\n\t        this._events();\n\t      }\n\t    }, {\n\t      key: '_isVertical',\n\t      value: function _isVertical() {\n\t        return this.$tabs.css('display') === 'block';\n\t      }\n\t\n\t      /**\n\t       * Adds event listeners to elements within the menu\n\t       * @private\n\t       * @function\n\t       */\n\t\n\t    }, {\n\t      key: '_events',\n\t      value: function _events() {\n\t        var _this = this,\n\t            hasTouch = 'ontouchstart' in window || typeof window.ontouchstart !== 'undefined',\n\t            parClass = 'is-dropdown-submenu-parent';\n\t\n\t        // used for onClick and in the keyboard handlers\n\t        var handleClickFn = function (e) {\n\t          var $elem = $(e.target).parentsUntil('ul', '.' + parClass),\n\t              hasSub = $elem.hasClass(parClass),\n\t              hasClicked = $elem.attr('data-is-click') === 'true',\n\t              $sub = $elem.children('.is-dropdown-submenu');\n\t\n\t          if (hasSub) {\n\t            if (hasClicked) {\n\t              if (!_this.options.closeOnClick || !_this.options.clickOpen && !hasTouch || _this.options.forceFollow && hasTouch) {\n\t                return;\n\t              } else {\n\t                e.stopImmediatePropagation();\n\t                e.preventDefault();\n\t                _this._hide($elem);\n\t              }\n\t            } else {\n\t              e.preventDefault();\n\t              e.stopImmediatePropagation();\n\t              _this._show($sub);\n\t              $elem.add($elem.parentsUntil(_this.$element, '.' + parClass)).attr('data-is-click', true);\n\t            }\n\t          }\n\t        };\n\t\n\t        if (this.options.clickOpen || hasTouch) {\n\t          this.$menuItems.on('click.zf.dropdownmenu touchstart.zf.dropdownmenu', handleClickFn);\n\t        }\n\t\n\t        // Handle Leaf element Clicks\n\t        if (_this.options.closeOnClickInside) {\n\t          this.$menuItems.on('click.zf.dropdownmenu touchend.zf.dropdownmenu', function (e) {\n\t            var $elem = $(this),\n\t                hasSub = $elem.hasClass(parClass);\n\t            if (!hasSub) {\n\t              _this._hide();\n\t            }\n\t          });\n\t        }\n\t\n\t        if (!this.options.disableHover) {\n\t          this.$menuItems.on('mouseenter.zf.dropdownmenu', function (e) {\n\t            var $elem = $(this),\n\t                hasSub = $elem.hasClass(parClass);\n\t\n\t            if (hasSub) {\n\t              clearTimeout($elem.data('_delay'));\n\t              $elem.data('_delay', setTimeout(function () {\n\t                _this._show($elem.children('.is-dropdown-submenu'));\n\t              }, _this.options.hoverDelay));\n\t            }\n\t          }).on('mouseleave.zf.dropdownmenu', function (e) {\n\t            var $elem = $(this),\n\t                hasSub = $elem.hasClass(parClass);\n\t            if (hasSub && _this.options.autoclose) {\n\t              if ($elem.attr('data-is-click') === 'true' && _this.options.clickOpen) {\n\t                return false;\n\t              }\n\t\n\t              clearTimeout($elem.data('_delay'));\n\t              $elem.data('_delay', setTimeout(function () {\n\t                _this._hide($elem);\n\t              }, _this.options.closingTime));\n\t            }\n\t          });\n\t        }\n\t        this.$menuItems.on('keydown.zf.dropdownmenu', function (e) {\n\t          var $element = $(e.target).parentsUntil('ul', '[role=\"menuitem\"]'),\n\t              isTab = _this.$tabs.index($element) > -1,\n\t              $elements = isTab ? _this.$tabs : $element.siblings('li').add($element),\n\t              $prevElement,\n\t              $nextElement;\n\t\n\t          $elements.each(function (i) {\n\t            if ($(this).is($element)) {\n\t              $prevElement = $elements.eq(i - 1);\n\t              $nextElement = $elements.eq(i + 1);\n\t              return;\n\t            }\n\t          });\n\t\n\t          var nextSibling = function () {\n\t            if (!$element.is(':last-child')) {\n\t              $nextElement.children('a:first').focus();\n\t              e.preventDefault();\n\t            }\n\t          },\n\t              prevSibling = function () {\n\t            $prevElement.children('a:first').focus();\n\t            e.preventDefault();\n\t          },\n\t              openSub = function () {\n\t            var $sub = $element.children('ul.is-dropdown-submenu');\n\t            if ($sub.length) {\n\t              _this._show($sub);\n\t              $element.find('li > a:first').focus();\n\t              e.preventDefault();\n\t            } else {\n\t              return;\n\t            }\n\t          },\n\t              closeSub = function () {\n\t            //if ($element.is(':first-child')) {\n\t            var close = $element.parent('ul').parent('li');\n\t            close.children('a:first').focus();\n\t            _this._hide(close);\n\t            e.preventDefault();\n\t            //}\n\t          };\n\t          var functions = {\n\t            open: openSub,\n\t            close: function () {\n\t              _this._hide(_this.$element);\n\t              _this.$menuItems.find('a:first').focus(); // focus to first element\n\t              e.preventDefault();\n\t            },\n\t            handled: function () {\n\t              e.stopImmediatePropagation();\n\t            }\n\t          };\n\t\n\t          if (isTab) {\n\t            if (_this._isVertical()) {\n\t              // vertical menu\n\t              if (Foundation.rtl()) {\n\t                // right aligned\n\t                $.extend(functions, {\n\t                  down: nextSibling,\n\t                  up: prevSibling,\n\t                  next: closeSub,\n\t                  previous: openSub\n\t                });\n\t              } else {\n\t                // left aligned\n\t                $.extend(functions, {\n\t                  down: nextSibling,\n\t                  up: prevSibling,\n\t                  next: openSub,\n\t                  previous: closeSub\n\t                });\n\t              }\n\t            } else {\n\t              // horizontal menu\n\t              if (Foundation.rtl()) {\n\t                // right aligned\n\t                $.extend(functions, {\n\t                  next: prevSibling,\n\t                  previous: nextSibling,\n\t                  down: openSub,\n\t                  up: closeSub\n\t                });\n\t              } else {\n\t                // left aligned\n\t                $.extend(functions, {\n\t                  next: nextSibling,\n\t                  previous: prevSibling,\n\t                  down: openSub,\n\t                  up: closeSub\n\t                });\n\t              }\n\t            }\n\t          } else {\n\t            // not tabs -> one sub\n\t            if (Foundation.rtl()) {\n\t              // right aligned\n\t              $.extend(functions, {\n\t                next: closeSub,\n\t                previous: openSub,\n\t                down: nextSibling,\n\t                up: prevSibling\n\t              });\n\t            } else {\n\t              // left aligned\n\t              $.extend(functions, {\n\t                next: openSub,\n\t                previous: closeSub,\n\t                down: nextSibling,\n\t                up: prevSibling\n\t              });\n\t            }\n\t          }\n\t          Foundation.Keyboard.handleKey(e, 'DropdownMenu', functions);\n\t        });\n\t      }\n\t\n\t      /**\n\t       * Adds an event handler to the body to close any dropdowns on a click.\n\t       * @function\n\t       * @private\n\t       */\n\t\n\t    }, {\n\t      key: '_addBodyHandler',\n\t      value: function _addBodyHandler() {\n\t        var $body = $(document.body),\n\t            _this = this;\n\t        $body.off('mouseup.zf.dropdownmenu touchend.zf.dropdownmenu').on('mouseup.zf.dropdownmenu touchend.zf.dropdownmenu', function (e) {\n\t          var $link = _this.$element.find(e.target);\n\t          if ($link.length) {\n\t            return;\n\t          }\n\t\n\t          _this._hide();\n\t          $body.off('mouseup.zf.dropdownmenu touchend.zf.dropdownmenu');\n\t        });\n\t      }\n\t\n\t      /**\n\t       * Opens a dropdown pane, and checks for collisions first.\n\t       * @param {jQuery} $sub - ul element that is a submenu to show\n\t       * @function\n\t       * @private\n\t       * @fires DropdownMenu#show\n\t       */\n\t\n\t    }, {\n\t      key: '_show',\n\t      value: function _show($sub) {\n\t        var idx = this.$tabs.index(this.$tabs.filter(function (i, el) {\n\t          return $(el).find($sub).length > 0;\n\t        }));\n\t        var $sibs = $sub.parent('li.is-dropdown-submenu-parent').siblings('li.is-dropdown-submenu-parent');\n\t        this._hide($sibs, idx);\n\t        $sub.css('visibility', 'hidden').addClass('js-dropdown-active').parent('li.is-dropdown-submenu-parent').addClass('is-active');\n\t        var clear = Foundation.Box.ImNotTouchingYou($sub, null, true);\n\t        if (!clear) {\n\t          var oldClass = this.options.alignment === 'left' ? '-right' : '-left',\n\t              $parentLi = $sub.parent('.is-dropdown-submenu-parent');\n\t          $parentLi.removeClass('opens' + oldClass).addClass('opens-' + this.options.alignment);\n\t          clear = Foundation.Box.ImNotTouchingYou($sub, null, true);\n\t          if (!clear) {\n\t            $parentLi.removeClass('opens-' + this.options.alignment).addClass('opens-inner');\n\t          }\n\t          this.changed = true;\n\t        }\n\t        $sub.css('visibility', '');\n\t        if (this.options.closeOnClick) {\n\t          this._addBodyHandler();\n\t        }\n\t        /**\n\t         * Fires when the new dropdown pane is visible.\n\t         * @event DropdownMenu#show\n\t         */\n\t        this.$element.trigger('show.zf.dropdownmenu', [$sub]);\n\t      }\n\t\n\t      /**\n\t       * Hides a single, currently open dropdown pane, if passed a parameter, otherwise, hides everything.\n\t       * @function\n\t       * @param {jQuery} $elem - element with a submenu to hide\n\t       * @param {Number} idx - index of the $tabs collection to hide\n\t       * @private\n\t       */\n\t\n\t    }, {\n\t      key: '_hide',\n\t      value: function _hide($elem, idx) {\n\t        var $toClose;\n\t        if ($elem && $elem.length) {\n\t          $toClose = $elem;\n\t        } else if (idx !== undefined) {\n\t          $toClose = this.$tabs.not(function (i, el) {\n\t            return i === idx;\n\t          });\n\t        } else {\n\t          $toClose = this.$element;\n\t        }\n\t        var somethingToClose = $toClose.hasClass('is-active') || $toClose.find('.is-active').length > 0;\n\t\n\t        if (somethingToClose) {\n\t          $toClose.find('li.is-active').add($toClose).attr({\n\t            'data-is-click': false\n\t          }).removeClass('is-active');\n\t\n\t          $toClose.find('ul.js-dropdown-active').removeClass('js-dropdown-active');\n\t\n\t          if (this.changed || $toClose.find('opens-inner').length) {\n\t            var oldClass = this.options.alignment === 'left' ? 'right' : 'left';\n\t            $toClose.find('li.is-dropdown-submenu-parent').add($toClose).removeClass('opens-inner opens-' + this.options.alignment).addClass('opens-' + oldClass);\n\t            this.changed = false;\n\t          }\n\t          /**\n\t           * Fires when the open menus are closed.\n\t           * @event DropdownMenu#hide\n\t           */\n\t          this.$element.trigger('hide.zf.dropdownmenu', [$toClose]);\n\t        }\n\t      }\n\t\n\t      /**\n\t       * Destroys the plugin.\n\t       * @function\n\t       */\n\t\n\t    }, {\n\t      key: 'destroy',\n\t      value: function destroy() {\n\t        this.$menuItems.off('.zf.dropdownmenu').removeAttr('data-is-click').removeClass('is-right-arrow is-left-arrow is-down-arrow opens-right opens-left opens-inner');\n\t        $(document.body).off('.zf.dropdownmenu');\n\t        Foundation.Nest.Burn(this.$element, 'dropdown');\n\t        Foundation.unregisterPlugin(this);\n\t      }\n\t    }]);\n\t\n\t    return DropdownMenu;\n\t  }();\n\t\n\t  /**\n\t   * Default settings for plugin\n\t   */\n\t\n\t\n\t  DropdownMenu.defaults = {\n\t    /**\n\t     * Disallows hover events from opening submenus\n\t     * @option\n\t     * @example false\n\t     */\n\t    disableHover: false,\n\t    /**\n\t     * Allow a submenu to automatically close on a mouseleave event, if not clicked open.\n\t     * @option\n\t     * @example true\n\t     */\n\t    autoclose: true,\n\t    /**\n\t     * Amount of time to delay opening a submenu on hover event.\n\t     * @option\n\t     * @example 50\n\t     */\n\t    hoverDelay: 50,\n\t    /**\n\t     * Allow a submenu to open/remain open on parent click event. Allows cursor to move away from menu.\n\t     * @option\n\t     * @example true\n\t     */\n\t    clickOpen: false,\n\t    /**\n\t     * Amount of time to delay closing a submenu on a mouseleave event.\n\t     * @option\n\t     * @example 500\n\t     */\n\t\n\t    closingTime: 500,\n\t    /**\n\t     * Position of the menu relative to what direction the submenus should open. Handled by JS.\n\t     * @option\n\t     * @example 'left'\n\t     */\n\t    alignment: 'left',\n\t    /**\n\t     * Allow clicks on the body to close any open submenus.\n\t     * @option\n\t     * @example true\n\t     */\n\t    closeOnClick: true,\n\t    /**\n\t     * Allow clicks on leaf anchor links to close any open submenus.\n\t     * @option\n\t     * @example true\n\t     */\n\t    closeOnClickInside: true,\n\t    /**\n\t     * Class applied to vertical oriented menus, Foundation default is `vertical`. Update this if using your own class.\n\t     * @option\n\t     * @example 'vertical'\n\t     */\n\t    verticalClass: 'vertical',\n\t    /**\n\t     * Class applied to right-side oriented menus, Foundation default is `align-right`. Update this if using your own class.\n\t     * @option\n\t     * @example 'align-right'\n\t     */\n\t    rightClass: 'align-right',\n\t    /**\n\t     * Boolean to force overide the clicking of links to perform default action, on second touch event for mobile.\n\t     * @option\n\t     * @example false\n\t     */\n\t    forceFollow: true\n\t  };\n\t\n\t  // Window exports\n\t  Foundation.plugin(DropdownMenu, 'DropdownMenu');\n\t}(jQuery);\n\t'use strict';\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\t!function ($) {\n\t\n\t  /**\n\t   * Equalizer module.\n\t   * @module foundation.equalizer\n\t   * @requires foundation.util.mediaQuery\n\t   * @requires foundation.util.timerAndImageLoader if equalizer contains images\n\t   */\n\t\n\t  var Equalizer = function () {\n\t    /**\n\t     * Creates a new instance of Equalizer.\n\t     * @class\n\t     * @fires Equalizer#init\n\t     * @param {Object} element - jQuery object to add the trigger to.\n\t     * @param {Object} options - Overrides to the default plugin settings.\n\t     */\n\t    function Equalizer(element, options) {\n\t      _classCallCheck(this, Equalizer);\n\t\n\t      this.$element = element;\n\t      this.options = $.extend({}, Equalizer.defaults, this.$element.data(), options);\n\t\n\t      this._init();\n\t\n\t      Foundation.registerPlugin(this, 'Equalizer');\n\t    }\n\t\n\t    /**\n\t     * Initializes the Equalizer plugin and calls functions to get equalizer functioning on load.\n\t     * @private\n\t     */\n\t\n\t\n\t    _createClass(Equalizer, [{\n\t      key: '_init',\n\t      value: function _init() {\n\t        var eqId = this.$element.attr('data-equalizer') || '';\n\t        var $watched = this.$element.find('[data-equalizer-watch=\"' + eqId + '\"]');\n\t\n\t        this.$watched = $watched.length ? $watched : this.$element.find('[data-equalizer-watch]');\n\t        this.$element.attr('data-resize', eqId || Foundation.GetYoDigits(6, 'eq'));\n\t        this.$element.attr('data-mutate', eqId || Foundation.GetYoDigits(6, 'eq'));\n\t\n\t        this.hasNested = this.$element.find('[data-equalizer]').length > 0;\n\t        this.isNested = this.$element.parentsUntil(document.body, '[data-equalizer]').length > 0;\n\t        this.isOn = false;\n\t        this._bindHandler = {\n\t          onResizeMeBound: this._onResizeMe.bind(this),\n\t          onPostEqualizedBound: this._onPostEqualized.bind(this)\n\t        };\n\t\n\t        var imgs = this.$element.find('img');\n\t        var tooSmall;\n\t        if (this.options.equalizeOn) {\n\t          tooSmall = this._checkMQ();\n\t          $(window).on('changed.zf.mediaquery', this._checkMQ.bind(this));\n\t        } else {\n\t          this._events();\n\t        }\n\t        if (tooSmall !== undefined && tooSmall === false || tooSmall === undefined) {\n\t          if (imgs.length) {\n\t            Foundation.onImagesLoaded(imgs, this._reflow.bind(this));\n\t          } else {\n\t            this._reflow();\n\t          }\n\t        }\n\t      }\n\t\n\t      /**\n\t       * Removes event listeners if the breakpoint is too small.\n\t       * @private\n\t       */\n\t\n\t    }, {\n\t      key: '_pauseEvents',\n\t      value: function _pauseEvents() {\n\t        this.isOn = false;\n\t        this.$element.off({\n\t          '.zf.equalizer': this._bindHandler.onPostEqualizedBound,\n\t          'resizeme.zf.trigger': this._bindHandler.onResizeMeBound,\n\t          'mutateme.zf.trigger': this._bindHandler.onResizeMeBound\n\t        });\n\t      }\n\t\n\t      /**\n\t       * function to handle $elements resizeme.zf.trigger, with bound this on _bindHandler.onResizeMeBound\n\t       * @private\n\t       */\n\t\n\t    }, {\n\t      key: '_onResizeMe',\n\t      value: function _onResizeMe(e) {\n\t        this._reflow();\n\t      }\n\t\n\t      /**\n\t       * function to handle $elements postequalized.zf.equalizer, with bound this on _bindHandler.onPostEqualizedBound\n\t       * @private\n\t       */\n\t\n\t    }, {\n\t      key: '_onPostEqualized',\n\t      value: function _onPostEqualized(e) {\n\t        if (e.target !== this.$element[0]) {\n\t          this._reflow();\n\t        }\n\t      }\n\t\n\t      /**\n\t       * Initializes events for Equalizer.\n\t       * @private\n\t       */\n\t\n\t    }, {\n\t      key: '_events',\n\t      value: function _events() {\n\t        var _this = this;\n\t        this._pauseEvents();\n\t        if (this.hasNested) {\n\t          this.$element.on('postequalized.zf.equalizer', this._bindHandler.onPostEqualizedBound);\n\t        } else {\n\t          this.$element.on('resizeme.zf.trigger', this._bindHandler.onResizeMeBound);\n\t          this.$element.on('mutateme.zf.trigger', this._bindHandler.onResizeMeBound);\n\t        }\n\t        this.isOn = true;\n\t      }\n\t\n\t      /**\n\t       * Checks the current breakpoint to the minimum required size.\n\t       * @private\n\t       */\n\t\n\t    }, {\n\t      key: '_checkMQ',\n\t      value: function _checkMQ() {\n\t        var tooSmall = !Foundation.MediaQuery.is(this.options.equalizeOn);\n\t        if (tooSmall) {\n\t          if (this.isOn) {\n\t            this._pauseEvents();\n\t            this.$watched.css('height', 'auto');\n\t          }\n\t        } else {\n\t          if (!this.isOn) {\n\t            this._events();\n\t          }\n\t        }\n\t        return tooSmall;\n\t      }\n\t\n\t      /**\n\t       * A noop version for the plugin\n\t       * @private\n\t       */\n\t\n\t    }, {\n\t      key: '_killswitch',\n\t      value: function _killswitch() {\n\t        return;\n\t      }\n\t\n\t      /**\n\t       * Calls necessary functions to update Equalizer upon DOM change\n\t       * @private\n\t       */\n\t\n\t    }, {\n\t      key: '_reflow',\n\t      value: function _reflow() {\n\t        if (!this.options.equalizeOnStack) {\n\t          if (this._isStacked()) {\n\t            this.$watched.css('height', 'auto');\n\t            return false;\n\t          }\n\t        }\n\t        if (this.options.equalizeByRow) {\n\t          this.getHeightsByRow(this.applyHeightByRow.bind(this));\n\t        } else {\n\t          this.getHeights(this.applyHeight.bind(this));\n\t        }\n\t      }\n\t\n\t      /**\n\t       * Manually determines if the first 2 elements are *NOT* stacked.\n\t       * @private\n\t       */\n\t\n\t    }, {\n\t      key: '_isStacked',\n\t      value: function _isStacked() {\n\t        if (!this.$watched[0] || !this.$watched[1]) {\n\t          return true;\n\t        }\n\t        return this.$watched[0].getBoundingClientRect().top !== this.$watched[1].getBoundingClientRect().top;\n\t      }\n\t\n\t      /**\n\t       * Finds the outer heights of children contained within an Equalizer parent and returns them in an array\n\t       * @param {Function} cb - A non-optional callback to return the heights array to.\n\t       * @returns {Array} heights - An array of heights of children within Equalizer container\n\t       */\n\t\n\t    }, {\n\t      key: 'getHeights',\n\t      value: function getHeights(cb) {\n\t        var heights = [];\n\t        for (var i = 0, len = this.$watched.length; i < len; i++) {\n\t          this.$watched[i].style.height = 'auto';\n\t          heights.push(this.$watched[i].offsetHeight);\n\t        }\n\t        cb(heights);\n\t      }\n\t\n\t      /**\n\t       * Finds the outer heights of children contained within an Equalizer parent and returns them in an array\n\t       * @param {Function} cb - A non-optional callback to return the heights array to.\n\t       * @returns {Array} groups - An array of heights of children within Equalizer container grouped by row with element,height and max as last child\n\t       */\n\t\n\t    }, {\n\t      key: 'getHeightsByRow',\n\t      value: function getHeightsByRow(cb) {\n\t        var lastElTopOffset = this.$watched.length ? this.$watched.first().offset().top : 0,\n\t            groups = [],\n\t            group = 0;\n\t        //group by Row\n\t        groups[group] = [];\n\t        for (var i = 0, len = this.$watched.length; i < len; i++) {\n\t          this.$watched[i].style.height = 'auto';\n\t          //maybe could use this.$watched[i].offsetTop\n\t          var elOffsetTop = $(this.$watched[i]).offset().top;\n\t          if (elOffsetTop != lastElTopOffset) {\n\t            group++;\n\t            groups[group] = [];\n\t            lastElTopOffset = elOffsetTop;\n\t          }\n\t          groups[group].push([this.$watched[i], this.$watched[i].offsetHeight]);\n\t        }\n\t\n\t        for (var j = 0, ln = groups.length; j < ln; j++) {\n\t          var heights = $(groups[j]).map(function () {\n\t            return this[1];\n\t          }).get();\n\t          var max = Math.max.apply(null, heights);\n\t          groups[j].push(max);\n\t        }\n\t        cb(groups);\n\t      }\n\t\n\t      /**\n\t       * Changes the CSS height property of each child in an Equalizer parent to match the tallest\n\t       * @param {array} heights - An array of heights of children within Equalizer container\n\t       * @fires Equalizer#preequalized\n\t       * @fires Equalizer#postequalized\n\t       */\n\t\n\t    }, {\n\t      key: 'applyHeight',\n\t      value: function applyHeight(heights) {\n\t        var max = Math.max.apply(null, heights);\n\t        /**\n\t         * Fires before the heights are applied\n\t         * @event Equalizer#preequalized\n\t         */\n\t        this.$element.trigger('preequalized.zf.equalizer');\n\t\n\t        this.$watched.css('height', max);\n\t\n\t        /**\n\t         * Fires when the heights have been applied\n\t         * @event Equalizer#postequalized\n\t         */\n\t        this.$element.trigger('postequalized.zf.equalizer');\n\t      }\n\t\n\t      /**\n\t       * Changes the CSS height property of each child in an Equalizer parent to match the tallest by row\n\t       * @param {array} groups - An array of heights of children within Equalizer container grouped by row with element,height and max as last child\n\t       * @fires Equalizer#preequalized\n\t       * @fires Equalizer#preequalizedrow\n\t       * @fires Equalizer#postequalizedrow\n\t       * @fires Equalizer#postequalized\n\t       */\n\t\n\t    }, {\n\t      key: 'applyHeightByRow',\n\t      value: function applyHeightByRow(groups) {\n\t        /**\n\t         * Fires before the heights are applied\n\t         */\n\t        this.$element.trigger('preequalized.zf.equalizer');\n\t        for (var i = 0, len = groups.length; i < len; i++) {\n\t          var groupsILength = groups[i].length,\n\t              max = groups[i][groupsILength - 1];\n\t          if (groupsILength <= 2) {\n\t            $(groups[i][0][0]).css({ 'height': 'auto' });\n\t            continue;\n\t          }\n\t          /**\n\t            * Fires before the heights per row are applied\n\t            * @event Equalizer#preequalizedrow\n\t            */\n\t          this.$element.trigger('preequalizedrow.zf.equalizer');\n\t          for (var j = 0, lenJ = groupsILength - 1; j < lenJ; j++) {\n\t            $(groups[i][j][0]).css({ 'height': max });\n\t          }\n\t          /**\n\t            * Fires when the heights per row have been applied\n\t            * @event Equalizer#postequalizedrow\n\t            */\n\t          this.$element.trigger('postequalizedrow.zf.equalizer');\n\t        }\n\t        /**\n\t         * Fires when the heights have been applied\n\t         */\n\t        this.$element.trigger('postequalized.zf.equalizer');\n\t      }\n\t\n\t      /**\n\t       * Destroys an instance of Equalizer.\n\t       * @function\n\t       */\n\t\n\t    }, {\n\t      key: 'destroy',\n\t      value: function destroy() {\n\t        this._pauseEvents();\n\t        this.$watched.css('height', 'auto');\n\t\n\t        Foundation.unregisterPlugin(this);\n\t      }\n\t    }]);\n\t\n\t    return Equalizer;\n\t  }();\n\t\n\t  /**\n\t   * Default settings for plugin\n\t   */\n\t\n\t\n\t  Equalizer.defaults = {\n\t    /**\n\t     * Enable height equalization when stacked on smaller screens.\n\t     * @option\n\t     * @example true\n\t     */\n\t    equalizeOnStack: false,\n\t    /**\n\t     * Enable height equalization row by row.\n\t     * @option\n\t     * @example false\n\t     */\n\t    equalizeByRow: false,\n\t    /**\n\t     * String representing the minimum breakpoint size the plugin should equalize heights on.\n\t     * @option\n\t     * @example 'medium'\n\t     */\n\t    equalizeOn: ''\n\t  };\n\t\n\t  // Window exports\n\t  Foundation.plugin(Equalizer, 'Equalizer');\n\t}(jQuery);\n\t'use strict';\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\t!function ($) {\n\t\n\t  /**\n\t   * Interchange module.\n\t   * @module foundation.interchange\n\t   * @requires foundation.util.mediaQuery\n\t   * @requires foundation.util.timerAndImageLoader\n\t   */\n\t\n\t  var Interchange = function () {\n\t    /**\n\t     * Creates a new instance of Interchange.\n\t     * @class\n\t     * @fires Interchange#init\n\t     * @param {Object} element - jQuery object to add the trigger to.\n\t     * @param {Object} options - Overrides to the default plugin settings.\n\t     */\n\t    function Interchange(element, options) {\n\t      _classCallCheck(this, Interchange);\n\t\n\t      this.$element = element;\n\t      this.options = $.extend({}, Interchange.defaults, options);\n\t      this.rules = [];\n\t      this.currentPath = '';\n\t\n\t      this._init();\n\t      this._events();\n\t\n\t      Foundation.registerPlugin(this, 'Interchange');\n\t    }\n\t\n\t    /**\n\t     * Initializes the Interchange plugin and calls functions to get interchange functioning on load.\n\t     * @function\n\t     * @private\n\t     */\n\t\n\t\n\t    _createClass(Interchange, [{\n\t      key: '_init',\n\t      value: function _init() {\n\t        this._addBreakpoints();\n\t        this._generateRules();\n\t        this._reflow();\n\t      }\n\t\n\t      /**\n\t       * Initializes events for Interchange.\n\t       * @function\n\t       * @private\n\t       */\n\t\n\t    }, {\n\t      key: '_events',\n\t      value: function _events() {\n\t        var _this2 = this;\n\t\n\t        $(window).on('resize.zf.interchange', Foundation.util.throttle(function () {\n\t          _this2._reflow();\n\t        }, 50));\n\t      }\n\t\n\t      /**\n\t       * Calls necessary functions to update Interchange upon DOM change\n\t       * @function\n\t       * @private\n\t       */\n\t\n\t    }, {\n\t      key: '_reflow',\n\t      value: function _reflow() {\n\t        var match;\n\t\n\t        // Iterate through each rule, but only save the last match\n\t        for (var i in this.rules) {\n\t          if (this.rules.hasOwnProperty(i)) {\n\t            var rule = this.rules[i];\n\t            if (window.matchMedia(rule.query).matches) {\n\t              match = rule;\n\t            }\n\t          }\n\t        }\n\t\n\t        if (match) {\n\t          this.replace(match.path);\n\t        }\n\t      }\n\t\n\t      /**\n\t       * Gets the Foundation breakpoints and adds them to the Interchange.SPECIAL_QUERIES object.\n\t       * @function\n\t       * @private\n\t       */\n\t\n\t    }, {\n\t      key: '_addBreakpoints',\n\t      value: function _addBreakpoints() {\n\t        for (var i in Foundation.MediaQuery.queries) {\n\t          if (Foundation.MediaQuery.queries.hasOwnProperty(i)) {\n\t            var query = Foundation.MediaQuery.queries[i];\n\t            Interchange.SPECIAL_QUERIES[query.name] = query.value;\n\t          }\n\t        }\n\t      }\n\t\n\t      /**\n\t       * Checks the Interchange element for the provided media query + content pairings\n\t       * @function\n\t       * @private\n\t       * @param {Object} element - jQuery object that is an Interchange instance\n\t       * @returns {Array} scenarios - Array of objects that have 'mq' and 'path' keys with corresponding keys\n\t       */\n\t\n\t    }, {\n\t      key: '_generateRules',\n\t      value: function _generateRules(element) {\n\t        var rulesList = [];\n\t        var rules;\n\t\n\t        if (this.options.rules) {\n\t          rules = this.options.rules;\n\t        } else {\n\t          rules = this.$element.data('interchange').match(/\\[.*?\\]/g);\n\t        }\n\t\n\t        for (var i in rules) {\n\t          if (rules.hasOwnProperty(i)) {\n\t            var rule = rules[i].slice(1, -1).split(', ');\n\t            var path = rule.slice(0, -1).join('');\n\t            var query = rule[rule.length - 1];\n\t\n\t            if (Interchange.SPECIAL_QUERIES[query]) {\n\t              query = Interchange.SPECIAL_QUERIES[query];\n\t            }\n\t\n\t            rulesList.push({\n\t              path: path,\n\t              query: query\n\t            });\n\t          }\n\t        }\n\t\n\t        this.rules = rulesList;\n\t      }\n\t\n\t      /**\n\t       * Update the `src` property of an image, or change the HTML of a container, to the specified path.\n\t       * @function\n\t       * @param {String} path - Path to the image or HTML partial.\n\t       * @fires Interchange#replaced\n\t       */\n\t\n\t    }, {\n\t      key: 'replace',\n\t      value: function replace(path) {\n\t        if (this.currentPath === path) return;\n\t\n\t        var _this = this,\n\t            trigger = 'replaced.zf.interchange';\n\t\n\t        // Replacing images\n\t        if (this.$element[0].nodeName === 'IMG') {\n\t          this.$element.attr('src', path).on('load', function () {\n\t            _this.currentPath = path;\n\t          }).trigger(trigger);\n\t        }\n\t        // Replacing background images\n\t        else if (path.match(/\\.(gif|jpg|jpeg|png|svg|tiff)([?#].*)?/i)) {\n\t            this.$element.css({ 'background-image': 'url(' + path + ')' }).trigger(trigger);\n\t          }\n\t          // Replacing HTML\n\t          else {\n\t              $.get(path, function (response) {\n\t                _this.$element.html(response).trigger(trigger);\n\t                $(response).foundation();\n\t                _this.currentPath = path;\n\t              });\n\t            }\n\t\n\t        /**\n\t         * Fires when content in an Interchange element is done being loaded.\n\t         * @event Interchange#replaced\n\t         */\n\t        // this.$element.trigger('replaced.zf.interchange');\n\t      }\n\t\n\t      /**\n\t       * Destroys an instance of interchange.\n\t       * @function\n\t       */\n\t\n\t    }, {\n\t      key: 'destroy',\n\t      value: function destroy() {\n\t        //TODO this.\n\t      }\n\t    }]);\n\t\n\t    return Interchange;\n\t  }();\n\t\n\t  /**\n\t   * Default settings for plugin\n\t   */\n\t\n\t\n\t  Interchange.defaults = {\n\t    /**\n\t     * Rules to be applied to Interchange elements. Set with the `data-interchange` array notation.\n\t     * @option\n\t     */\n\t    rules: null\n\t  };\n\t\n\t  Interchange.SPECIAL_QUERIES = {\n\t    'landscape': 'screen and (orientation: landscape)',\n\t    'portrait': 'screen and (orientation: portrait)',\n\t    'retina': 'only screen and (-webkit-min-device-pixel-ratio: 2), only screen and (min--moz-device-pixel-ratio: 2), only screen and (-o-min-device-pixel-ratio: 2/1), only screen and (min-device-pixel-ratio: 2), only screen and (min-resolution: 192dpi), only screen and (min-resolution: 2dppx)'\n\t  };\n\t\n\t  // Window exports\n\t  Foundation.plugin(Interchange, 'Interchange');\n\t}(jQuery);\n\t'use strict';\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\t!function ($) {\n\t\n\t  /**\n\t   * Magellan module.\n\t   * @module foundation.magellan\n\t   */\n\t\n\t  var Magellan = function () {\n\t    /**\n\t     * Creates a new instance of Magellan.\n\t     * @class\n\t     * @fires Magellan#init\n\t     * @param {Object} element - jQuery object to add the trigger to.\n\t     * @param {Object} options - Overrides to the default plugin settings.\n\t     */\n\t    function Magellan(element, options) {\n\t      _classCallCheck(this, Magellan);\n\t\n\t      this.$element = element;\n\t      this.options = $.extend({}, Magellan.defaults, this.$element.data(), options);\n\t\n\t      this._init();\n\t      this.calcPoints();\n\t\n\t      Foundation.registerPlugin(this, 'Magellan');\n\t    }\n\t\n\t    /**\n\t     * Initializes the Magellan plugin and calls functions to get equalizer functioning on load.\n\t     * @private\n\t     */\n\t\n\t\n\t    _createClass(Magellan, [{\n\t      key: '_init',\n\t      value: function _init() {\n\t        var id = this.$element[0].id || Foundation.GetYoDigits(6, 'magellan');\n\t        var _this = this;\n\t        this.$targets = $('[data-magellan-target]');\n\t        this.$links = this.$element.find('a');\n\t        this.$element.attr({\n\t          'data-resize': id,\n\t          'data-scroll': id,\n\t          'id': id\n\t        });\n\t        this.$active = $();\n\t        this.scrollPos = parseInt(window.pageYOffset, 10);\n\t\n\t        this._events();\n\t      }\n\t\n\t      /**\n\t       * Calculates an array of pixel values that are the demarcation lines between locations on the page.\n\t       * Can be invoked if new elements are added or the size of a location changes.\n\t       * @function\n\t       */\n\t\n\t    }, {\n\t      key: 'calcPoints',\n\t      value: function calcPoints() {\n\t        var _this = this,\n\t            body = document.body,\n\t            html = document.documentElement;\n\t\n\t        this.points = [];\n\t        this.winHeight = Math.round(Math.max(window.innerHeight, html.clientHeight));\n\t        this.docHeight = Math.round(Math.max(body.scrollHeight, body.offsetHeight, html.clientHeight, html.scrollHeight, html.offsetHeight));\n\t\n\t        this.$targets.each(function () {\n\t          var $tar = $(this),\n\t              pt = Math.round($tar.offset().top - _this.options.threshold);\n\t          $tar.targetPoint = pt;\n\t          _this.points.push(pt);\n\t        });\n\t      }\n\t\n\t      /**\n\t       * Initializes events for Magellan.\n\t       * @private\n\t       */\n\t\n\t    }, {\n\t      key: '_events',\n\t      value: function _events() {\n\t        var _this = this,\n\t            $body = $('html, body'),\n\t            opts = {\n\t          duration: _this.options.animationDuration,\n\t          easing: _this.options.animationEasing\n\t        };\n\t        $(window).one('load', function () {\n\t          if (_this.options.deepLinking) {\n\t            if (location.hash) {\n\t              _this.scrollToLoc(location.hash);\n\t            }\n\t          }\n\t          _this.calcPoints();\n\t          _this._updateActive();\n\t        });\n\t\n\t        this.$element.on({\n\t          'resizeme.zf.trigger': this.reflow.bind(this),\n\t          'scrollme.zf.trigger': this._updateActive.bind(this)\n\t        }).on('click.zf.magellan', 'a[href^=\"#\"]', function (e) {\n\t          e.preventDefault();\n\t          var arrival = this.getAttribute('href');\n\t          _this.scrollToLoc(arrival);\n\t        });\n\t        $(window).on('popstate', function (e) {\n\t          if (_this.options.deepLinking) {\n\t            _this.scrollToLoc(window.location.hash);\n\t          }\n\t        });\n\t      }\n\t\n\t      /**\n\t       * Function to scroll to a given location on the page.\n\t       * @param {String} loc - a properly formatted jQuery id selector. Example: '#foo'\n\t       * @function\n\t       */\n\t\n\t    }, {\n\t      key: 'scrollToLoc',\n\t      value: function scrollToLoc(loc) {\n\t        // Do nothing if target does not exist to prevent errors\n\t        if (!$(loc).length) {\n\t          return false;\n\t        }\n\t        this._inTransition = true;\n\t        var _this = this,\n\t            scrollPos = Math.round($(loc).offset().top - this.options.threshold / 2 - this.options.barOffset);\n\t\n\t        $('html, body').stop(true).animate({ scrollTop: scrollPos }, this.options.animationDuration, this.options.animationEasing, function () {\n\t          _this._inTransition = false;_this._updateActive();\n\t        });\n\t      }\n\t\n\t      /**\n\t       * Calls necessary functions to update Magellan upon DOM change\n\t       * @function\n\t       */\n\t\n\t    }, {\n\t      key: 'reflow',\n\t      value: function reflow() {\n\t        this.calcPoints();\n\t        this._updateActive();\n\t      }\n\t\n\t      /**\n\t       * Updates the visibility of an active location link, and updates the url hash for the page, if deepLinking enabled.\n\t       * @private\n\t       * @function\n\t       * @fires Magellan#update\n\t       */\n\t\n\t    }, {\n\t      key: '_updateActive',\n\t      value: function _updateActive() /*evt, elem, scrollPos*/{\n\t        if (this._inTransition) {\n\t          return;\n\t        }\n\t        var winPos = /*scrollPos ||*/parseInt(window.pageYOffset, 10),\n\t            curIdx;\n\t\n\t        if (winPos + this.winHeight === this.docHeight) {\n\t          curIdx = this.points.length - 1;\n\t        } else if (winPos < this.points[0]) {\n\t          curIdx = undefined;\n\t        } else {\n\t          var isDown = this.scrollPos < winPos,\n\t              _this = this,\n\t              curVisible = this.points.filter(function (p, i) {\n\t            return isDown ? p - _this.options.barOffset <= winPos : p - _this.options.barOffset - _this.options.threshold <= winPos;\n\t          });\n\t          curIdx = curVisible.length ? curVisible.length - 1 : 0;\n\t        }\n\t\n\t        this.$active.removeClass(this.options.activeClass);\n\t        this.$active = this.$links.filter('[href=\"#' + this.$targets.eq(curIdx).data('magellan-target') + '\"]').addClass(this.options.activeClass);\n\t\n\t        if (this.options.deepLinking) {\n\t          var hash = \"\";\n\t          if (curIdx != undefined) {\n\t            hash = this.$active[0].getAttribute('href');\n\t          }\n\t          if (hash !== window.location.hash) {\n\t            if (window.history.pushState) {\n\t              window.history.pushState(null, null, hash);\n\t            } else {\n\t              window.location.hash = hash;\n\t            }\n\t          }\n\t        }\n\t\n\t        this.scrollPos = winPos;\n\t        /**\n\t         * Fires when magellan is finished updating to the new active element.\n\t         * @event Magellan#update\n\t         */\n\t        this.$element.trigger('update.zf.magellan', [this.$active]);\n\t      }\n\t\n\t      /**\n\t       * Destroys an instance of Magellan and resets the url of the window.\n\t       * @function\n\t       */\n\t\n\t    }, {\n\t      key: 'destroy',\n\t      value: function destroy() {\n\t        this.$element.off('.zf.trigger .zf.magellan').find('.' + this.options.activeClass).removeClass(this.options.activeClass);\n\t\n\t        if (this.options.deepLinking) {\n\t          var hash = this.$active[0].getAttribute('href');\n\t          window.location.hash.replace(hash, '');\n\t        }\n\t\n\t        Foundation.unregisterPlugin(this);\n\t      }\n\t    }]);\n\t\n\t    return Magellan;\n\t  }();\n\t\n\t  /**\n\t   * Default settings for plugin\n\t   */\n\t\n\t\n\t  Magellan.defaults = {\n\t    /**\n\t     * Amount of time, in ms, the animated scrolling should take between locations.\n\t     * @option\n\t     * @example 500\n\t     */\n\t    animationDuration: 500,\n\t    /**\n\t     * Animation style to use when scrolling between locations.\n\t     * @option\n\t     * @example 'ease-in-out'\n\t     */\n\t    animationEasing: 'linear',\n\t    /**\n\t     * Number of pixels to use as a marker for location changes.\n\t     * @option\n\t     * @example 50\n\t     */\n\t    threshold: 50,\n\t    /**\n\t     * Class applied to the active locations link on the magellan container.\n\t     * @option\n\t     * @example 'active'\n\t     */\n\t    activeClass: 'active',\n\t    /**\n\t     * Allows the script to manipulate the url of the current page, and if supported, alter the history.\n\t     * @option\n\t     * @example true\n\t     */\n\t    deepLinking: false,\n\t    /**\n\t     * Number of pixels to offset the scroll of the page on item click if using a sticky nav bar.\n\t     * @option\n\t     * @example 25\n\t     */\n\t    barOffset: 0\n\t  };\n\t\n\t  // Window exports\n\t  Foundation.plugin(Magellan, 'Magellan');\n\t}(jQuery);\n\t'use strict';\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\t!function ($) {\n\t\n\t  /**\n\t   * OffCanvas module.\n\t   * @module foundation.offcanvas\n\t   * @requires foundation.util.mediaQuery\n\t   * @requires foundation.util.triggers\n\t   * @requires foundation.util.motion\n\t   */\n\t\n\t  var OffCanvas = function () {\n\t    /**\n\t     * Creates a new instance of an off-canvas wrapper.\n\t     * @class\n\t     * @fires OffCanvas#init\n\t     * @param {Object} element - jQuery object to initialize.\n\t     * @param {Object} options - Overrides to the default plugin settings.\n\t     */\n\t    function OffCanvas(element, options) {\n\t      _classCallCheck(this, OffCanvas);\n\t\n\t      this.$element = element;\n\t      this.options = $.extend({}, OffCanvas.defaults, this.$element.data(), options);\n\t      this.$lastTrigger = $();\n\t      this.$triggers = $();\n\t\n\t      this._init();\n\t      this._events();\n\t\n\t      Foundation.registerPlugin(this, 'OffCanvas');\n\t      Foundation.Keyboard.register('OffCanvas', {\n\t        'ESCAPE': 'close'\n\t      });\n\t    }\n\t\n\t    /**\n\t     * Initializes the off-canvas wrapper by adding the exit overlay (if needed).\n\t     * @function\n\t     * @private\n\t     */\n\t\n\t\n\t    _createClass(OffCanvas, [{\n\t      key: '_init',\n\t      value: function _init() {\n\t        var id = this.$element.attr('id');\n\t\n\t        this.$element.attr('aria-hidden', 'true');\n\t\n\t        this.$element.addClass('is-transition-' + this.options.transition);\n\t\n\t        // Find triggers that affect this element and add aria-expanded to them\n\t        this.$triggers = $(document).find('[data-open=\"' + id + '\"], [data-close=\"' + id + '\"], [data-toggle=\"' + id + '\"]').attr('aria-expanded', 'false').attr('aria-controls', id);\n\t\n\t        // Add an overlay over the content if necessary\n\t        if (this.options.contentOverlay === true) {\n\t          var overlay = document.createElement('div');\n\t          var overlayPosition = $(this.$element).css(\"position\") === 'fixed' ? 'is-overlay-fixed' : 'is-overlay-absolute';\n\t          overlay.setAttribute('class', 'js-off-canvas-overlay ' + overlayPosition);\n\t          this.$overlay = $(overlay);\n\t          if (overlayPosition === 'is-overlay-fixed') {\n\t            $('body').append(this.$overlay);\n\t          } else {\n\t            this.$element.siblings('[data-off-canvas-content]').append(this.$overlay);\n\t          }\n\t        }\n\t\n\t        this.options.isRevealed = this.options.isRevealed || new RegExp(this.options.revealClass, 'g').test(this.$element[0].className);\n\t\n\t        if (this.options.isRevealed === true) {\n\t          this.options.revealOn = this.options.revealOn || this.$element[0].className.match(/(reveal-for-medium|reveal-for-large)/g)[0].split('-')[2];\n\t          this._setMQChecker();\n\t        }\n\t        if (!this.options.transitionTime === true) {\n\t          this.options.transitionTime = parseFloat(window.getComputedStyle($('[data-off-canvas]')[0]).transitionDuration) * 1000;\n\t        }\n\t      }\n\t\n\t      /**\n\t       * Adds event handlers to the off-canvas wrapper and the exit overlay.\n\t       * @function\n\t       * @private\n\t       */\n\t\n\t    }, {\n\t      key: '_events',\n\t      value: function _events() {\n\t        this.$element.off('.zf.trigger .zf.offcanvas').on({\n\t          'open.zf.trigger': this.open.bind(this),\n\t          'close.zf.trigger': this.close.bind(this),\n\t          'toggle.zf.trigger': this.toggle.bind(this),\n\t          'keydown.zf.offcanvas': this._handleKeyboard.bind(this)\n\t        });\n\t\n\t        if (this.options.closeOnClick === true) {\n\t          var $target = this.options.contentOverlay ? this.$overlay : $('[data-off-canvas-content]');\n\t          $target.on({ 'click.zf.offcanvas': this.close.bind(this) });\n\t        }\n\t      }\n\t\n\t      /**\n\t       * Applies event listener for elements that will reveal at certain breakpoints.\n\t       * @private\n\t       */\n\t\n\t    }, {\n\t      key: '_setMQChecker',\n\t      value: function _setMQChecker() {\n\t        var _this = this;\n\t\n\t        $(window).on('changed.zf.mediaquery', function () {\n\t          if (Foundation.MediaQuery.atLeast(_this.options.revealOn)) {\n\t            _this.reveal(true);\n\t          } else {\n\t            _this.reveal(false);\n\t          }\n\t        }).one('load.zf.offcanvas', function () {\n\t          if (Foundation.MediaQuery.atLeast(_this.options.revealOn)) {\n\t            _this.reveal(true);\n\t          }\n\t        });\n\t      }\n\t\n\t      /**\n\t       * Handles the revealing/hiding the off-canvas at breakpoints, not the same as open.\n\t       * @param {Boolean} isRevealed - true if element should be revealed.\n\t       * @function\n\t       */\n\t\n\t    }, {\n\t      key: 'reveal',\n\t      value: function reveal(isRevealed) {\n\t        var $closer = this.$element.find('[data-close]');\n\t        if (isRevealed) {\n\t          this.close();\n\t          this.isRevealed = true;\n\t          this.$element.attr('aria-hidden', 'false');\n\t          this.$element.off('open.zf.trigger toggle.zf.trigger');\n\t          if ($closer.length) {\n\t            $closer.hide();\n\t          }\n\t        } else {\n\t          this.isRevealed = false;\n\t          this.$element.attr('aria-hidden', 'true');\n\t          this.$element.on({\n\t            'open.zf.trigger': this.open.bind(this),\n\t            'toggle.zf.trigger': this.toggle.bind(this)\n\t          });\n\t          if ($closer.length) {\n\t            $closer.show();\n\t          }\n\t        }\n\t      }\n\t\n\t      /**\n\t       * Stops scrolling of the body when offcanvas is open on mobile Safari and other troublesome browsers.\n\t       * @private\n\t       */\n\t\n\t    }, {\n\t      key: '_stopScrolling',\n\t      value: function _stopScrolling(event) {\n\t        return false;\n\t      }\n\t\n\t      /**\n\t       * Opens the off-canvas menu.\n\t       * @function\n\t       * @param {Object} event - Event object passed from listener.\n\t       * @param {jQuery} trigger - element that triggered the off-canvas to open.\n\t       * @fires OffCanvas#opened\n\t       */\n\t\n\t    }, {\n\t      key: 'open',\n\t      value: function open(event, trigger) {\n\t        if (this.$element.hasClass('is-open') || this.isRevealed) {\n\t          return;\n\t        }\n\t        var _this = this;\n\t\n\t        if (trigger) {\n\t          this.$lastTrigger = trigger;\n\t        }\n\t\n\t        if (this.options.forceTo === 'top') {\n\t          window.scrollTo(0, 0);\n\t        } else if (this.options.forceTo === 'bottom') {\n\t          window.scrollTo(0, document.body.scrollHeight);\n\t        }\n\t\n\t        /**\n\t         * Fires when the off-canvas menu opens.\n\t         * @event OffCanvas#opened\n\t         */\n\t        _this.$element.addClass('is-open');\n\t\n\t        this.$triggers.attr('aria-expanded', 'true');\n\t        this.$element.attr('aria-hidden', 'false').trigger('opened.zf.offcanvas');\n\t\n\t        // If `contentScroll` is set to false, add class and disable scrolling on touch devices.\n\t        if (this.options.contentScroll === false) {\n\t          $('body').addClass('is-off-canvas-open').on('touchmove', this._stopScrolling);\n\t        }\n\t\n\t        if (this.options.contentOverlay === true) {\n\t          this.$overlay.addClass('is-visible');\n\t        }\n\t\n\t        if (this.options.closeOnClick === true && this.options.contentOverlay === true) {\n\t          this.$overlay.addClass('is-closable');\n\t        }\n\t\n\t        if (this.options.autoFocus === true) {\n\t          this.$element.one(Foundation.transitionend(this.$element), function () {\n\t            _this.$element.find('a, button').eq(0).focus();\n\t          });\n\t        }\n\t\n\t        if (this.options.trapFocus === true) {\n\t          this.$element.siblings('[data-off-canvas-content]').attr('tabindex', '-1');\n\t          Foundation.Keyboard.trapFocus(this.$element);\n\t        }\n\t      }\n\t\n\t      /**\n\t       * Closes the off-canvas menu.\n\t       * @function\n\t       * @param {Function} cb - optional cb to fire after closure.\n\t       * @fires OffCanvas#closed\n\t       */\n\t\n\t    }, {\n\t      key: 'close',\n\t      value: function close(cb) {\n\t        if (!this.$element.hasClass('is-open') || this.isRevealed) {\n\t          return;\n\t        }\n\t\n\t        var _this = this;\n\t\n\t        _this.$element.removeClass('is-open');\n\t\n\t        this.$element.attr('aria-hidden', 'true')\n\t        /**\n\t         * Fires when the off-canvas menu opens.\n\t         * @event OffCanvas#closed\n\t         */\n\t        .trigger('closed.zf.offcanvas');\n\t\n\t        // If `contentScroll` is set to false, remove class and re-enable scrolling on touch devices.\n\t        if (this.options.contentScroll === false) {\n\t          $('body').removeClass('is-off-canvas-open').off('touchmove', this._stopScrolling);\n\t        }\n\t\n\t        if (this.options.contentOverlay === true) {\n\t          this.$overlay.removeClass('is-visible');\n\t        }\n\t\n\t        if (this.options.closeOnClick === true && this.options.contentOverlay === true) {\n\t          this.$overlay.removeClass('is-closable');\n\t        }\n\t\n\t        this.$triggers.attr('aria-expanded', 'false');\n\t\n\t        if (this.options.trapFocus === true) {\n\t          this.$element.siblings('[data-off-canvas-content]').removeAttr('tabindex');\n\t          Foundation.Keyboard.releaseFocus(this.$element);\n\t        }\n\t      }\n\t\n\t      /**\n\t       * Toggles the off-canvas menu open or closed.\n\t       * @function\n\t       * @param {Object} event - Event object passed from listener.\n\t       * @param {jQuery} trigger - element that triggered the off-canvas to open.\n\t       */\n\t\n\t    }, {\n\t      key: 'toggle',\n\t      value: function toggle(event, trigger) {\n\t        if (this.$element.hasClass('is-open')) {\n\t          this.close(event, trigger);\n\t        } else {\n\t          this.open(event, trigger);\n\t        }\n\t      }\n\t\n\t      /**\n\t       * Handles keyboard input when detected. When the escape key is pressed, the off-canvas menu closes, and focus is restored to the element that opened the menu.\n\t       * @function\n\t       * @private\n\t       */\n\t\n\t    }, {\n\t      key: '_handleKeyboard',\n\t      value: function _handleKeyboard(e) {\n\t        var _this2 = this;\n\t\n\t        Foundation.Keyboard.handleKey(e, 'OffCanvas', {\n\t          close: function () {\n\t            _this2.close();\n\t            _this2.$lastTrigger.focus();\n\t            return true;\n\t          },\n\t          handled: function () {\n\t            e.stopPropagation();\n\t            e.preventDefault();\n\t          }\n\t        });\n\t      }\n\t\n\t      /**\n\t       * Destroys the offcanvas plugin.\n\t       * @function\n\t       */\n\t\n\t    }, {\n\t      key: 'destroy',\n\t      value: function destroy() {\n\t        this.close();\n\t        this.$element.off('.zf.trigger .zf.offcanvas');\n\t        this.$overlay.off('.zf.offcanvas');\n\t\n\t        Foundation.unregisterPlugin(this);\n\t      }\n\t    }]);\n\t\n\t    return OffCanvas;\n\t  }();\n\t\n\t  OffCanvas.defaults = {\n\t    /**\n\t     * Allow the user to click outside of the menu to close it.\n\t     * @option\n\t     * @example true\n\t     */\n\t    closeOnClick: true,\n\t\n\t    /**\n\t     * Adds an overlay on top of `[data-off-canvas-content]`.\n\t     * @option\n\t     * @example true\n\t     */\n\t    contentOverlay: true,\n\t\n\t    /**\n\t     * Enable/disable scrolling of the main content when an off canvas panel is open.\n\t     * @option\n\t     * @example true\n\t     */\n\t    contentScroll: true,\n\t\n\t    /**\n\t     * Amount of time in ms the open and close transition requires. If none selected, pulls from body style.\n\t     * @option\n\t     * @example 500\n\t     */\n\t    transitionTime: 0,\n\t\n\t    /**\n\t     * Type of transition for the offcanvas menu. Options are 'push', 'detached' or 'slide'.\n\t     * @option\n\t     * @example push\n\t     */\n\t    transition: 'push',\n\t\n\t    /**\n\t     * Force the page to scroll to top or bottom on open.\n\t     * @option\n\t     * @example top\n\t     */\n\t    forceTo: null,\n\t\n\t    /**\n\t     * Allow the offcanvas to remain open for certain breakpoints.\n\t     * @option\n\t     * @example false\n\t     */\n\t    isRevealed: false,\n\t\n\t    /**\n\t     * Breakpoint at which to reveal. JS will use a RegExp to target standard classes, if changing classnames, pass your class with the `revealClass` option.\n\t     * @option\n\t     * @example reveal-for-large\n\t     */\n\t    revealOn: null,\n\t\n\t    /**\n\t     * Force focus to the offcanvas on open. If true, will focus the opening trigger on close.\n\t     * @option\n\t     * @example true\n\t     */\n\t    autoFocus: true,\n\t\n\t    /**\n\t     * Class used to force an offcanvas to remain open. Foundation defaults for this are `reveal-for-large` & `reveal-for-medium`.\n\t     * @option\n\t     * TODO improve the regex testing for this.\n\t     * @example reveal-for-large\n\t     */\n\t    revealClass: 'reveal-for-',\n\t\n\t    /**\n\t     * Triggers optional focus trapping when opening an offcanvas. Sets tabindex of [data-off-canvas-content] to -1 for accessibility purposes.\n\t     * @option\n\t     * @example true\n\t     */\n\t    trapFocus: false\n\t  };\n\t\n\t  // Window exports\n\t  Foundation.plugin(OffCanvas, 'OffCanvas');\n\t}(jQuery);\n\t'use strict';\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\t!function ($) {\n\t\n\t  /**\n\t   * Orbit module.\n\t   * @module foundation.orbit\n\t   * @requires foundation.util.keyboard\n\t   * @requires foundation.util.motion\n\t   * @requires foundation.util.timerAndImageLoader\n\t   * @requires foundation.util.touch\n\t   */\n\t\n\t  var Orbit = function () {\n\t    /**\n\t    * Creates a new instance of an orbit carousel.\n\t    * @class\n\t    * @param {jQuery} element - jQuery object to make into an Orbit Carousel.\n\t    * @param {Object} options - Overrides to the default plugin settings.\n\t    */\n\t    function Orbit(element, options) {\n\t      _classCallCheck(this, Orbit);\n\t\n\t      this.$element = element;\n\t      this.options = $.extend({}, Orbit.defaults, this.$element.data(), options);\n\t\n\t      this._init();\n\t\n\t      Foundation.registerPlugin(this, 'Orbit');\n\t      Foundation.Keyboard.register('Orbit', {\n\t        'ltr': {\n\t          'ARROW_RIGHT': 'next',\n\t          'ARROW_LEFT': 'previous'\n\t        },\n\t        'rtl': {\n\t          'ARROW_LEFT': 'next',\n\t          'ARROW_RIGHT': 'previous'\n\t        }\n\t      });\n\t    }\n\t\n\t    /**\n\t    * Initializes the plugin by creating jQuery collections, setting attributes, and starting the animation.\n\t    * @function\n\t    * @private\n\t    */\n\t\n\t\n\t    _createClass(Orbit, [{\n\t      key: '_init',\n\t      value: function _init() {\n\t        // @TODO: consider discussion on PR #9278 about DOM pollution by changeSlide\n\t        this._reset();\n\t\n\t        this.$wrapper = this.$element.find('.' + this.options.containerClass);\n\t        this.$slides = this.$element.find('.' + this.options.slideClass);\n\t\n\t        var $images = this.$element.find('img'),\n\t            initActive = this.$slides.filter('.is-active'),\n\t            id = this.$element[0].id || Foundation.GetYoDigits(6, 'orbit');\n\t\n\t        this.$element.attr({\n\t          'data-resize': id,\n\t          'id': id\n\t        });\n\t\n\t        if (!initActive.length) {\n\t          this.$slides.eq(0).addClass('is-active');\n\t        }\n\t\n\t        if (!this.options.useMUI) {\n\t          this.$slides.addClass('no-motionui');\n\t        }\n\t\n\t        if ($images.length) {\n\t          Foundation.onImagesLoaded($images, this._prepareForOrbit.bind(this));\n\t        } else {\n\t          this._prepareForOrbit(); //hehe\n\t        }\n\t\n\t        if (this.options.bullets) {\n\t          this._loadBullets();\n\t        }\n\t\n\t        this._events();\n\t\n\t        if (this.options.autoPlay && this.$slides.length > 1) {\n\t          this.geoSync();\n\t        }\n\t\n\t        if (this.options.accessible) {\n\t          // allow wrapper to be focusable to enable arrow navigation\n\t          this.$wrapper.attr('tabindex', 0);\n\t        }\n\t      }\n\t\n\t      /**\n\t      * Creates a jQuery collection of bullets, if they are being used.\n\t      * @function\n\t      * @private\n\t      */\n\t\n\t    }, {\n\t      key: '_loadBullets',\n\t      value: function _loadBullets() {\n\t        this.$bullets = this.$element.find('.' + this.options.boxOfBullets).find('button');\n\t      }\n\t\n\t      /**\n\t      * Sets a `timer` object on the orbit, and starts the counter for the next slide.\n\t      * @function\n\t      */\n\t\n\t    }, {\n\t      key: 'geoSync',\n\t      value: function geoSync() {\n\t        var _this = this;\n\t        this.timer = new Foundation.Timer(this.$element, {\n\t          duration: this.options.timerDelay,\n\t          infinite: false\n\t        }, function () {\n\t          _this.changeSlide(true);\n\t        });\n\t        this.timer.start();\n\t      }\n\t\n\t      /**\n\t      * Sets wrapper and slide heights for the orbit.\n\t      * @function\n\t      * @private\n\t      */\n\t\n\t    }, {\n\t      key: '_prepareForOrbit',\n\t      value: function _prepareForOrbit() {\n\t        var _this = this;\n\t        this._setWrapperHeight();\n\t      }\n\t\n\t      /**\n\t      * Calulates the height of each slide in the collection, and uses the tallest one for the wrapper height.\n\t      * @function\n\t      * @private\n\t      * @param {Function} cb - a callback function to fire when complete.\n\t      */\n\t\n\t    }, {\n\t      key: '_setWrapperHeight',\n\t      value: function _setWrapperHeight(cb) {\n\t        //rewrite this to `for` loop\n\t        var max = 0,\n\t            temp,\n\t            counter = 0,\n\t            _this = this;\n\t\n\t        this.$slides.each(function () {\n\t          temp = this.getBoundingClientRect().height;\n\t          $(this).attr('data-slide', counter);\n\t\n\t          if (_this.$slides.filter('.is-active')[0] !== _this.$slides.eq(counter)[0]) {\n\t            //if not the active slide, set css position and display property\n\t            $(this).css({ 'position': 'relative', 'display': 'none' });\n\t          }\n\t          max = temp > max ? temp : max;\n\t          counter++;\n\t        });\n\t\n\t        if (counter === this.$slides.length) {\n\t          this.$wrapper.css({ 'height': max }); //only change the wrapper height property once.\n\t          if (cb) {\n\t            cb(max);\n\t          } //fire callback with max height dimension.\n\t        }\n\t      }\n\t\n\t      /**\n\t      * Sets the max-height of each slide.\n\t      * @function\n\t      * @private\n\t      */\n\t\n\t    }, {\n\t      key: '_setSlideHeight',\n\t      value: function _setSlideHeight(height) {\n\t        this.$slides.each(function () {\n\t          $(this).css('max-height', height);\n\t        });\n\t      }\n\t\n\t      /**\n\t      * Adds event listeners to basically everything within the element.\n\t      * @function\n\t      * @private\n\t      */\n\t\n\t    }, {\n\t      key: '_events',\n\t      value: function _events() {\n\t        var _this = this;\n\t\n\t        //***************************************\n\t        //**Now using custom event - thanks to:**\n\t        //**      Yohai Ararat of Toronto      **\n\t        //***************************************\n\t        //\n\t        this.$element.off('.resizeme.zf.trigger').on({\n\t          'resizeme.zf.trigger': this._prepareForOrbit.bind(this)\n\t        });\n\t        if (this.$slides.length > 1) {\n\t\n\t          if (this.options.swipe) {\n\t            this.$slides.off('swipeleft.zf.orbit swiperight.zf.orbit').on('swipeleft.zf.orbit', function (e) {\n\t              e.preventDefault();\n\t              _this.changeSlide(true);\n\t            }).on('swiperight.zf.orbit', function (e) {\n\t              e.preventDefault();\n\t              _this.changeSlide(false);\n\t            });\n\t          }\n\t          //***************************************\n\t\n\t          if (this.options.autoPlay) {\n\t            this.$slides.on('click.zf.orbit', function () {\n\t              _this.$element.data('clickedOn', _this.$element.data('clickedOn') ? false : true);\n\t              _this.timer[_this.$element.data('clickedOn') ? 'pause' : 'start']();\n\t            });\n\t\n\t            if (this.options.pauseOnHover) {\n\t              this.$element.on('mouseenter.zf.orbit', function () {\n\t                _this.timer.pause();\n\t              }).on('mouseleave.zf.orbit', function () {\n\t                if (!_this.$element.data('clickedOn')) {\n\t                  _this.timer.start();\n\t                }\n\t              });\n\t            }\n\t          }\n\t\n\t          if (this.options.navButtons) {\n\t            var $controls = this.$element.find('.' + this.options.nextClass + ', .' + this.options.prevClass);\n\t            $controls.attr('tabindex', 0)\n\t            //also need to handle enter/return and spacebar key presses\n\t            .on('click.zf.orbit touchend.zf.orbit', function (e) {\n\t              e.preventDefault();\n\t              _this.changeSlide($(this).hasClass(_this.options.nextClass));\n\t            });\n\t          }\n\t\n\t          if (this.options.bullets) {\n\t            this.$bullets.on('click.zf.orbit touchend.zf.orbit', function () {\n\t              if (/is-active/g.test(this.className)) {\n\t                return false;\n\t              } //if this is active, kick out of function.\n\t              var idx = $(this).data('slide'),\n\t                  ltr = idx > _this.$slides.filter('.is-active').data('slide'),\n\t                  $slide = _this.$slides.eq(idx);\n\t\n\t              _this.changeSlide(ltr, $slide, idx);\n\t            });\n\t          }\n\t\n\t          if (this.options.accessible) {\n\t            this.$wrapper.add(this.$bullets).on('keydown.zf.orbit', function (e) {\n\t              // handle keyboard event with keyboard util\n\t              Foundation.Keyboard.handleKey(e, 'Orbit', {\n\t                next: function () {\n\t                  _this.changeSlide(true);\n\t                },\n\t                previous: function () {\n\t                  _this.changeSlide(false);\n\t                },\n\t                handled: function () {\n\t                  // if bullet is focused, make sure focus moves\n\t                  if ($(e.target).is(_this.$bullets)) {\n\t                    _this.$bullets.filter('.is-active').focus();\n\t                  }\n\t                }\n\t              });\n\t            });\n\t          }\n\t        }\n\t      }\n\t\n\t      /**\n\t       * Resets Orbit so it can be reinitialized\n\t       */\n\t\n\t    }, {\n\t      key: '_reset',\n\t      value: function _reset() {\n\t        // Don't do anything if there are no slides (first run)\n\t        if (typeof this.$slides == 'undefined') {\n\t          return;\n\t        }\n\t\n\t        if (this.$slides.length > 1) {\n\t          // Remove old events\n\t          this.$element.off('.zf.orbit').find('*').off('.zf.orbit');\n\t\n\t          // Restart timer if autoPlay is enabled\n\t          if (this.options.autoPlay) {\n\t            this.timer.restart();\n\t          }\n\t\n\t          // Reset all sliddes\n\t          this.$slides.each(function (el) {\n\t            $(el).removeClass('is-active is-active is-in').removeAttr('aria-live').hide();\n\t          });\n\t\n\t          // Show the first slide\n\t          this.$slides.first().addClass('is-active').show();\n\t\n\t          // Triggers when the slide has finished animating\n\t          this.$element.trigger('slidechange.zf.orbit', [this.$slides.first()]);\n\t\n\t          // Select first bullet if bullets are present\n\t          if (this.options.bullets) {\n\t            this._updateBullets(0);\n\t          }\n\t        }\n\t      }\n\t\n\t      /**\n\t      * Changes the current slide to a new one.\n\t      * @function\n\t      * @param {Boolean} isLTR - flag if the slide should move left to right.\n\t      * @param {jQuery} chosenSlide - the jQuery element of the slide to show next, if one is selected.\n\t      * @param {Number} idx - the index of the new slide in its collection, if one chosen.\n\t      * @fires Orbit#slidechange\n\t      */\n\t\n\t    }, {\n\t      key: 'changeSlide',\n\t      value: function changeSlide(isLTR, chosenSlide, idx) {\n\t        if (!this.$slides) {\n\t          return;\n\t        } // Don't freak out if we're in the middle of cleanup\n\t        var $curSlide = this.$slides.filter('.is-active').eq(0);\n\t\n\t        if (/mui/g.test($curSlide[0].className)) {\n\t          return false;\n\t        } //if the slide is currently animating, kick out of the function\n\t\n\t        var $firstSlide = this.$slides.first(),\n\t            $lastSlide = this.$slides.last(),\n\t            dirIn = isLTR ? 'Right' : 'Left',\n\t            dirOut = isLTR ? 'Left' : 'Right',\n\t            _this = this,\n\t            $newSlide;\n\t\n\t        if (!chosenSlide) {\n\t          //most of the time, this will be auto played or clicked from the navButtons.\n\t          $newSlide = isLTR ? //if wrapping enabled, check to see if there is a `next` or `prev` sibling, if not, select the first or last slide to fill in. if wrapping not enabled, attempt to select `next` or `prev`, if there's nothing there, the function will kick out on next step. CRAZY NESTED TERNARIES!!!!!\n\t          this.options.infiniteWrap ? $curSlide.next('.' + this.options.slideClass).length ? $curSlide.next('.' + this.options.slideClass) : $firstSlide : $curSlide.next('.' + this.options.slideClass) : //pick next slide if moving left to right\n\t          this.options.infiniteWrap ? $curSlide.prev('.' + this.options.slideClass).length ? $curSlide.prev('.' + this.options.slideClass) : $lastSlide : $curSlide.prev('.' + this.options.slideClass); //pick prev slide if moving right to left\n\t        } else {\n\t          $newSlide = chosenSlide;\n\t        }\n\t\n\t        if ($newSlide.length) {\n\t          /**\n\t          * Triggers before the next slide starts animating in and only if a next slide has been found.\n\t          * @event Orbit#beforeslidechange\n\t          */\n\t          this.$element.trigger('beforeslidechange.zf.orbit', [$curSlide, $newSlide]);\n\t\n\t          if (this.options.bullets) {\n\t            idx = idx || this.$slides.index($newSlide); //grab index to update bullets\n\t            this._updateBullets(idx);\n\t          }\n\t\n\t          if (this.options.useMUI && !this.$element.is(':hidden')) {\n\t            Foundation.Motion.animateIn($newSlide.addClass('is-active').css({ 'position': 'absolute', 'top': 0 }), this.options['animInFrom' + dirIn], function () {\n\t              $newSlide.css({ 'position': 'relative', 'display': 'block' }).attr('aria-live', 'polite');\n\t            });\n\t\n\t            Foundation.Motion.animateOut($curSlide.removeClass('is-active'), this.options['animOutTo' + dirOut], function () {\n\t              $curSlide.removeAttr('aria-live');\n\t              if (_this.options.autoPlay && !_this.timer.isPaused) {\n\t                _this.timer.restart();\n\t              }\n\t              //do stuff?\n\t            });\n\t          } else {\n\t            $curSlide.removeClass('is-active is-in').removeAttr('aria-live').hide();\n\t            $newSlide.addClass('is-active is-in').attr('aria-live', 'polite').show();\n\t            if (this.options.autoPlay && !this.timer.isPaused) {\n\t              this.timer.restart();\n\t            }\n\t          }\n\t          /**\n\t          * Triggers when the slide has finished animating in.\n\t          * @event Orbit#slidechange\n\t          */\n\t          this.$element.trigger('slidechange.zf.orbit', [$newSlide]);\n\t        }\n\t      }\n\t\n\t      /**\n\t      * Updates the active state of the bullets, if displayed.\n\t      * @function\n\t      * @private\n\t      * @param {Number} idx - the index of the current slide.\n\t      */\n\t\n\t    }, {\n\t      key: '_updateBullets',\n\t      value: function _updateBullets(idx) {\n\t        var $oldBullet = this.$element.find('.' + this.options.boxOfBullets).find('.is-active').removeClass('is-active').blur(),\n\t            span = $oldBullet.find('span:last').detach(),\n\t            $newBullet = this.$bullets.eq(idx).addClass('is-active').append(span);\n\t      }\n\t\n\t      /**\n\t      * Destroys the carousel and hides the element.\n\t      * @function\n\t      */\n\t\n\t    }, {\n\t      key: 'destroy',\n\t      value: function destroy() {\n\t        this.$element.off('.zf.orbit').find('*').off('.zf.orbit').end().hide();\n\t        Foundation.unregisterPlugin(this);\n\t      }\n\t    }]);\n\t\n\t    return Orbit;\n\t  }();\n\t\n\t  Orbit.defaults = {\n\t    /**\n\t    * Tells the JS to look for and loadBullets.\n\t    * @option\n\t    * @example true\n\t    */\n\t    bullets: true,\n\t    /**\n\t    * Tells the JS to apply event listeners to nav buttons\n\t    * @option\n\t    * @example true\n\t    */\n\t    navButtons: true,\n\t    /**\n\t    * motion-ui animation class to apply\n\t    * @option\n\t    * @example 'slide-in-right'\n\t    */\n\t    animInFromRight: 'slide-in-right',\n\t    /**\n\t    * motion-ui animation class to apply\n\t    * @option\n\t    * @example 'slide-out-right'\n\t    */\n\t    animOutToRight: 'slide-out-right',\n\t    /**\n\t    * motion-ui animation class to apply\n\t    * @option\n\t    * @example 'slide-in-left'\n\t    *\n\t    */\n\t    animInFromLeft: 'slide-in-left',\n\t    /**\n\t    * motion-ui animation class to apply\n\t    * @option\n\t    * @example 'slide-out-left'\n\t    */\n\t    animOutToLeft: 'slide-out-left',\n\t    /**\n\t    * Allows Orbit to automatically animate on page load.\n\t    * @option\n\t    * @example true\n\t    */\n\t    autoPlay: true,\n\t    /**\n\t    * Amount of time, in ms, between slide transitions\n\t    * @option\n\t    * @example 5000\n\t    */\n\t    timerDelay: 5000,\n\t    /**\n\t    * Allows Orbit to infinitely loop through the slides\n\t    * @option\n\t    * @example true\n\t    */\n\t    infiniteWrap: true,\n\t    /**\n\t    * Allows the Orbit slides to bind to swipe events for mobile, requires an additional util library\n\t    * @option\n\t    * @example true\n\t    */\n\t    swipe: true,\n\t    /**\n\t    * Allows the timing function to pause animation on hover.\n\t    * @option\n\t    * @example true\n\t    */\n\t    pauseOnHover: true,\n\t    /**\n\t    * Allows Orbit to bind keyboard events to the slider, to animate frames with arrow keys\n\t    * @option\n\t    * @example true\n\t    */\n\t    accessible: true,\n\t    /**\n\t    * Class applied to the container of Orbit\n\t    * @option\n\t    * @example 'orbit-container'\n\t    */\n\t    containerClass: 'orbit-container',\n\t    /**\n\t    * Class applied to individual slides.\n\t    * @option\n\t    * @example 'orbit-slide'\n\t    */\n\t    slideClass: 'orbit-slide',\n\t    /**\n\t    * Class applied to the bullet container. You're welcome.\n\t    * @option\n\t    * @example 'orbit-bullets'\n\t    */\n\t    boxOfBullets: 'orbit-bullets',\n\t    /**\n\t    * Class applied to the `next` navigation button.\n\t    * @option\n\t    * @example 'orbit-next'\n\t    */\n\t    nextClass: 'orbit-next',\n\t    /**\n\t    * Class applied to the `previous` navigation button.\n\t    * @option\n\t    * @example 'orbit-previous'\n\t    */\n\t    prevClass: 'orbit-previous',\n\t    /**\n\t    * Boolean to flag the js to use motion ui classes or not. Default to true for backwards compatability.\n\t    * @option\n\t    * @example true\n\t    */\n\t    useMUI: true\n\t  };\n\t\n\t  // Window exports\n\t  Foundation.plugin(Orbit, 'Orbit');\n\t}(jQuery);\n\t'use strict';\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\t!function ($) {\n\t\n\t  /**\n\t   * ResponsiveMenu module.\n\t   * @module foundation.responsiveMenu\n\t   * @requires foundation.util.triggers\n\t   * @requires foundation.util.mediaQuery\n\t   * @requires foundation.util.accordionMenu\n\t   * @requires foundation.util.drilldown\n\t   * @requires foundation.util.dropdown-menu\n\t   */\n\t\n\t  var ResponsiveMenu = function () {\n\t    /**\n\t     * Creates a new instance of a responsive menu.\n\t     * @class\n\t     * @fires ResponsiveMenu#init\n\t     * @param {jQuery} element - jQuery object to make into a dropdown menu.\n\t     * @param {Object} options - Overrides to the default plugin settings.\n\t     */\n\t    function ResponsiveMenu(element, options) {\n\t      _classCallCheck(this, ResponsiveMenu);\n\t\n\t      this.$element = $(element);\n\t      this.rules = this.$element.data('responsive-menu');\n\t      this.currentMq = null;\n\t      this.currentPlugin = null;\n\t\n\t      this._init();\n\t      this._events();\n\t\n\t      Foundation.registerPlugin(this, 'ResponsiveMenu');\n\t    }\n\t\n\t    /**\n\t     * Initializes the Menu by parsing the classes from the 'data-ResponsiveMenu' attribute on the element.\n\t     * @function\n\t     * @private\n\t     */\n\t\n\t\n\t    _createClass(ResponsiveMenu, [{\n\t      key: '_init',\n\t      value: function _init() {\n\t        // The first time an Interchange plugin is initialized, this.rules is converted from a string of \"classes\" to an object of rules\n\t        if (typeof this.rules === 'string') {\n\t          var rulesTree = {};\n\t\n\t          // Parse rules from \"classes\" pulled from data attribute\n\t          var rules = this.rules.split(' ');\n\t\n\t          // Iterate through every rule found\n\t          for (var i = 0; i < rules.length; i++) {\n\t            var rule = rules[i].split('-');\n\t            var ruleSize = rule.length > 1 ? rule[0] : 'small';\n\t            var rulePlugin = rule.length > 1 ? rule[1] : rule[0];\n\t\n\t            if (MenuPlugins[rulePlugin] !== null) {\n\t              rulesTree[ruleSize] = MenuPlugins[rulePlugin];\n\t            }\n\t          }\n\t\n\t          this.rules = rulesTree;\n\t        }\n\t\n\t        if (!$.isEmptyObject(this.rules)) {\n\t          this._checkMediaQueries();\n\t        }\n\t        // Add data-mutate since children may need it.\n\t        this.$element.attr('data-mutate', this.$element.attr('data-mutate') || Foundation.GetYoDigits(6, 'responsive-menu'));\n\t      }\n\t\n\t      /**\n\t       * Initializes events for the Menu.\n\t       * @function\n\t       * @private\n\t       */\n\t\n\t    }, {\n\t      key: '_events',\n\t      value: function _events() {\n\t        var _this = this;\n\t\n\t        $(window).on('changed.zf.mediaquery', function () {\n\t          _this._checkMediaQueries();\n\t        });\n\t        // $(window).on('resize.zf.ResponsiveMenu', function() {\n\t        //   _this._checkMediaQueries();\n\t        // });\n\t      }\n\t\n\t      /**\n\t       * Checks the current screen width against available media queries. If the media query has changed, and the plugin needed has changed, the plugins will swap out.\n\t       * @function\n\t       * @private\n\t       */\n\t\n\t    }, {\n\t      key: '_checkMediaQueries',\n\t      value: function _checkMediaQueries() {\n\t        var matchedMq,\n\t            _this = this;\n\t        // Iterate through each rule and find the last matching rule\n\t        $.each(this.rules, function (key) {\n\t          if (Foundation.MediaQuery.atLeast(key)) {\n\t            matchedMq = key;\n\t          }\n\t        });\n\t\n\t        // No match? No dice\n\t        if (!matchedMq) return;\n\t\n\t        // Plugin already initialized? We good\n\t        if (this.currentPlugin instanceof this.rules[matchedMq].plugin) return;\n\t\n\t        // Remove existing plugin-specific CSS classes\n\t        $.each(MenuPlugins, function (key, value) {\n\t          _this.$element.removeClass(value.cssClass);\n\t        });\n\t\n\t        // Add the CSS class for the new plugin\n\t        this.$element.addClass(this.rules[matchedMq].cssClass);\n\t\n\t        // Create an instance of the new plugin\n\t        if (this.currentPlugin) this.currentPlugin.destroy();\n\t        this.currentPlugin = new this.rules[matchedMq].plugin(this.$element, {});\n\t      }\n\t\n\t      /**\n\t       * Destroys the instance of the current plugin on this element, as well as the window resize handler that switches the plugins out.\n\t       * @function\n\t       */\n\t\n\t    }, {\n\t      key: 'destroy',\n\t      value: function destroy() {\n\t        this.currentPlugin.destroy();\n\t        $(window).off('.zf.ResponsiveMenu');\n\t        Foundation.unregisterPlugin(this);\n\t      }\n\t    }]);\n\t\n\t    return ResponsiveMenu;\n\t  }();\n\t\n\t  ResponsiveMenu.defaults = {};\n\t\n\t  // The plugin matches the plugin classes with these plugin instances.\n\t  var MenuPlugins = {\n\t    dropdown: {\n\t      cssClass: 'dropdown',\n\t      plugin: Foundation._plugins['dropdown-menu'] || null\n\t    },\n\t    drilldown: {\n\t      cssClass: 'drilldown',\n\t      plugin: Foundation._plugins['drilldown'] || null\n\t    },\n\t    accordion: {\n\t      cssClass: 'accordion-menu',\n\t      plugin: Foundation._plugins['accordion-menu'] || null\n\t    }\n\t  };\n\t\n\t  // Window exports\n\t  Foundation.plugin(ResponsiveMenu, 'ResponsiveMenu');\n\t}(jQuery);\n\t'use strict';\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\t!function ($) {\n\t\n\t  /**\n\t   * ResponsiveToggle module.\n\t   * @module foundation.responsiveToggle\n\t   * @requires foundation.util.mediaQuery\n\t   */\n\t\n\t  var ResponsiveToggle = function () {\n\t    /**\n\t     * Creates a new instance of Tab Bar.\n\t     * @class\n\t     * @fires ResponsiveToggle#init\n\t     * @param {jQuery} element - jQuery object to attach tab bar functionality to.\n\t     * @param {Object} options - Overrides to the default plugin settings.\n\t     */\n\t    function ResponsiveToggle(element, options) {\n\t      _classCallCheck(this, ResponsiveToggle);\n\t\n\t      this.$element = $(element);\n\t      this.options = $.extend({}, ResponsiveToggle.defaults, this.$element.data(), options);\n\t\n\t      this._init();\n\t      this._events();\n\t\n\t      Foundation.registerPlugin(this, 'ResponsiveToggle');\n\t    }\n\t\n\t    /**\n\t     * Initializes the tab bar by finding the target element, toggling element, and running update().\n\t     * @function\n\t     * @private\n\t     */\n\t\n\t\n\t    _createClass(ResponsiveToggle, [{\n\t      key: '_init',\n\t      value: function _init() {\n\t        var targetID = this.$element.data('responsive-toggle');\n\t        if (!targetID) {\n\t          console.error('Your tab bar needs an ID of a Menu as the value of data-tab-bar.');\n\t        }\n\t\n\t        this.$targetMenu = $('#' + targetID);\n\t        this.$toggler = this.$element.find('[data-toggle]');\n\t        this.options = $.extend({}, this.options, this.$targetMenu.data());\n\t\n\t        // If they were set, parse the animation classes\n\t        if (this.options.animate) {\n\t          var input = this.options.animate.split(' ');\n\t\n\t          this.animationIn = input[0];\n\t          this.animationOut = input[1] || null;\n\t        }\n\t\n\t        this._update();\n\t      }\n\t\n\t      /**\n\t       * Adds necessary event handlers for the tab bar to work.\n\t       * @function\n\t       * @private\n\t       */\n\t\n\t    }, {\n\t      key: '_events',\n\t      value: function _events() {\n\t        var _this = this;\n\t\n\t        this._updateMqHandler = this._update.bind(this);\n\t\n\t        $(window).on('changed.zf.mediaquery', this._updateMqHandler);\n\t\n\t        this.$toggler.on('click.zf.responsiveToggle', this.toggleMenu.bind(this));\n\t      }\n\t\n\t      /**\n\t       * Checks the current media query to determine if the tab bar should be visible or hidden.\n\t       * @function\n\t       * @private\n\t       */\n\t\n\t    }, {\n\t      key: '_update',\n\t      value: function _update() {\n\t        // Mobile\n\t        if (!Foundation.MediaQuery.atLeast(this.options.hideFor)) {\n\t          this.$element.show();\n\t          this.$targetMenu.hide();\n\t        }\n\t\n\t        // Desktop\n\t        else {\n\t            this.$element.hide();\n\t            this.$targetMenu.show();\n\t          }\n\t      }\n\t\n\t      /**\n\t       * Toggles the element attached to the tab bar. The toggle only happens if the screen is small enough to allow it.\n\t       * @function\n\t       * @fires ResponsiveToggle#toggled\n\t       */\n\t\n\t    }, {\n\t      key: 'toggleMenu',\n\t      value: function toggleMenu() {\n\t        var _this2 = this;\n\t\n\t        if (!Foundation.MediaQuery.atLeast(this.options.hideFor)) {\n\t          if (this.options.animate) {\n\t            if (this.$targetMenu.is(':hidden')) {\n\t              Foundation.Motion.animateIn(this.$targetMenu, this.animationIn, function () {\n\t                /**\n\t                 * Fires when the element attached to the tab bar toggles.\n\t                 * @event ResponsiveToggle#toggled\n\t                 */\n\t                _this2.$element.trigger('toggled.zf.responsiveToggle');\n\t                _this2.$targetMenu.find('[data-mutate]').triggerHandler('mutateme.zf.trigger');\n\t              });\n\t            } else {\n\t              Foundation.Motion.animateOut(this.$targetMenu, this.animationOut, function () {\n\t                /**\n\t                 * Fires when the element attached to the tab bar toggles.\n\t                 * @event ResponsiveToggle#toggled\n\t                 */\n\t                _this2.$element.trigger('toggled.zf.responsiveToggle');\n\t              });\n\t            }\n\t          } else {\n\t            this.$targetMenu.toggle(0);\n\t            this.$targetMenu.find('[data-mutate]').trigger('mutateme.zf.trigger');\n\t\n\t            /**\n\t             * Fires when the element attached to the tab bar toggles.\n\t             * @event ResponsiveToggle#toggled\n\t             */\n\t            this.$element.trigger('toggled.zf.responsiveToggle');\n\t          }\n\t        }\n\t      }\n\t    }, {\n\t      key: 'destroy',\n\t      value: function destroy() {\n\t        this.$element.off('.zf.responsiveToggle');\n\t        this.$toggler.off('.zf.responsiveToggle');\n\t\n\t        $(window).off('changed.zf.mediaquery', this._updateMqHandler);\n\t\n\t        Foundation.unregisterPlugin(this);\n\t      }\n\t    }]);\n\t\n\t    return ResponsiveToggle;\n\t  }();\n\t\n\t  ResponsiveToggle.defaults = {\n\t    /**\n\t     * The breakpoint after which the menu is always shown, and the tab bar is hidden.\n\t     * @option\n\t     * @example 'medium'\n\t     */\n\t    hideFor: 'medium',\n\t\n\t    /**\n\t     * To decide if the toggle should be animated or not.\n\t     * @option\n\t     * @example false\n\t     */\n\t    animate: false\n\t  };\n\t\n\t  // Window exports\n\t  Foundation.plugin(ResponsiveToggle, 'ResponsiveToggle');\n\t}(jQuery);\n\t'use strict';\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\t!function ($) {\n\t\n\t  /**\n\t   * Reveal module.\n\t   * @module foundation.reveal\n\t   * @requires foundation.util.keyboard\n\t   * @requires foundation.util.box\n\t   * @requires foundation.util.triggers\n\t   * @requires foundation.util.mediaQuery\n\t   * @requires foundation.util.motion if using animations\n\t   */\n\t\n\t  var Reveal = function () {\n\t    /**\n\t     * Creates a new instance of Reveal.\n\t     * @class\n\t     * @param {jQuery} element - jQuery object to use for the modal.\n\t     * @param {Object} options - optional parameters.\n\t     */\n\t    function Reveal(element, options) {\n\t      _classCallCheck(this, Reveal);\n\t\n\t      this.$element = element;\n\t      this.options = $.extend({}, Reveal.defaults, this.$element.data(), options);\n\t      this._init();\n\t\n\t      Foundation.registerPlugin(this, 'Reveal');\n\t      Foundation.Keyboard.register('Reveal', {\n\t        'ENTER': 'open',\n\t        'SPACE': 'open',\n\t        'ESCAPE': 'close'\n\t      });\n\t    }\n\t\n\t    /**\n\t     * Initializes the modal by adding the overlay and close buttons, (if selected).\n\t     * @private\n\t     */\n\t\n\t\n\t    _createClass(Reveal, [{\n\t      key: '_init',\n\t      value: function _init() {\n\t        this.id = this.$element.attr('id');\n\t        this.isActive = false;\n\t        this.cached = { mq: Foundation.MediaQuery.current };\n\t        this.isMobile = mobileSniff();\n\t\n\t        this.$anchor = $('[data-open=\"' + this.id + '\"]').length ? $('[data-open=\"' + this.id + '\"]') : $('[data-toggle=\"' + this.id + '\"]');\n\t        this.$anchor.attr({\n\t          'aria-controls': this.id,\n\t          'aria-haspopup': true,\n\t          'tabindex': 0\n\t        });\n\t\n\t        if (this.options.fullScreen || this.$element.hasClass('full')) {\n\t          this.options.fullScreen = true;\n\t          this.options.overlay = false;\n\t        }\n\t        if (this.options.overlay && !this.$overlay) {\n\t          this.$overlay = this._makeOverlay(this.id);\n\t        }\n\t\n\t        this.$element.attr({\n\t          'role': 'dialog',\n\t          'aria-hidden': true,\n\t          'data-yeti-box': this.id,\n\t          'data-resize': this.id\n\t        });\n\t\n\t        if (this.$overlay) {\n\t          this.$element.detach().appendTo(this.$overlay);\n\t        } else {\n\t          this.$element.detach().appendTo($(this.options.appendTo));\n\t          this.$element.addClass('without-overlay');\n\t        }\n\t        this._events();\n\t        if (this.options.deepLink && window.location.hash === '#' + this.id) {\n\t          $(window).one('load.zf.reveal', this.open.bind(this));\n\t        }\n\t      }\n\t\n\t      /**\n\t       * Creates an overlay div to display behind the modal.\n\t       * @private\n\t       */\n\t\n\t    }, {\n\t      key: '_makeOverlay',\n\t      value: function _makeOverlay() {\n\t        return $('<div></div>').addClass('reveal-overlay').appendTo(this.options.appendTo);\n\t      }\n\t\n\t      /**\n\t       * Updates position of modal\n\t       * TODO:  Figure out if we actually need to cache these values or if it doesn't matter\n\t       * @private\n\t       */\n\t\n\t    }, {\n\t      key: '_updatePosition',\n\t      value: function _updatePosition() {\n\t        var width = this.$element.outerWidth();\n\t        var outerWidth = $(window).width();\n\t        var height = this.$element.outerHeight();\n\t        var outerHeight = $(window).height();\n\t        var left, top;\n\t        if (this.options.hOffset === 'auto') {\n\t          left = parseInt((outerWidth - width) / 2, 10);\n\t        } else {\n\t          left = parseInt(this.options.hOffset, 10);\n\t        }\n\t        if (this.options.vOffset === 'auto') {\n\t          if (height > outerHeight) {\n\t            top = parseInt(Math.min(100, outerHeight / 10), 10);\n\t          } else {\n\t            top = parseInt((outerHeight - height) / 4, 10);\n\t          }\n\t        } else {\n\t          top = parseInt(this.options.vOffset, 10);\n\t        }\n\t        this.$element.css({ top: top + 'px' });\n\t        // only worry about left if we don't have an overlay or we havea  horizontal offset,\n\t        // otherwise we're perfectly in the middle\n\t        if (!this.$overlay || this.options.hOffset !== 'auto') {\n\t          this.$element.css({ left: left + 'px' });\n\t          this.$element.css({ margin: '0px' });\n\t        }\n\t      }\n\t\n\t      /**\n\t       * Adds event handlers for the modal.\n\t       * @private\n\t       */\n\t\n\t    }, {\n\t      key: '_events',\n\t      value: function _events() {\n\t        var _this2 = this;\n\t\n\t        var _this = this;\n\t\n\t        this.$element.on({\n\t          'open.zf.trigger': this.open.bind(this),\n\t          'close.zf.trigger': function (event, $element) {\n\t            if (event.target === _this.$element[0] || $(event.target).parents('[data-closable]')[0] === $element) {\n\t              // only close reveal when it's explicitly called\n\t              return _this2.close.apply(_this2);\n\t            }\n\t          },\n\t          'toggle.zf.trigger': this.toggle.bind(this),\n\t          'resizeme.zf.trigger': function () {\n\t            _this._updatePosition();\n\t          }\n\t        });\n\t\n\t        if (this.$anchor.length) {\n\t          this.$anchor.on('keydown.zf.reveal', function (e) {\n\t            if (e.which === 13 || e.which === 32) {\n\t              e.stopPropagation();\n\t              e.preventDefault();\n\t              _this.open();\n\t            }\n\t          });\n\t        }\n\t\n\t        if (this.options.closeOnClick && this.options.overlay) {\n\t          this.$overlay.off('.zf.reveal').on('click.zf.reveal', function (e) {\n\t            if (e.target === _this.$element[0] || $.contains(_this.$element[0], e.target) || !$.contains(document, e.target)) {\n\t              return;\n\t            }\n\t            _this.close();\n\t          });\n\t        }\n\t        if (this.options.deepLink) {\n\t          $(window).on('popstate.zf.reveal:' + this.id, this._handleState.bind(this));\n\t        }\n\t      }\n\t\n\t      /**\n\t       * Handles modal methods on back/forward button clicks or any other event that triggers popstate.\n\t       * @private\n\t       */\n\t\n\t    }, {\n\t      key: '_handleState',\n\t      value: function _handleState(e) {\n\t        if (window.location.hash === '#' + this.id && !this.isActive) {\n\t          this.open();\n\t        } else {\n\t          this.close();\n\t        }\n\t      }\n\t\n\t      /**\n\t       * Opens the modal controlled by `this.$anchor`, and closes all others by default.\n\t       * @function\n\t       * @fires Reveal#closeme\n\t       * @fires Reveal#open\n\t       */\n\t\n\t    }, {\n\t      key: 'open',\n\t      value: function open() {\n\t        var _this3 = this;\n\t\n\t        if (this.options.deepLink) {\n\t          var hash = '#' + this.id;\n\t\n\t          if (window.history.pushState) {\n\t            window.history.pushState(null, null, hash);\n\t          } else {\n\t            window.location.hash = hash;\n\t          }\n\t        }\n\t\n\t        this.isActive = true;\n\t\n\t        // Make elements invisible, but remove display: none so we can get size and positioning\n\t        this.$element.css({ 'visibility': 'hidden' }).show().scrollTop(0);\n\t        if (this.options.overlay) {\n\t          this.$overlay.css({ 'visibility': 'hidden' }).show();\n\t        }\n\t\n\t        this._updatePosition();\n\t\n\t        this.$element.hide().css({ 'visibility': '' });\n\t\n\t        if (this.$overlay) {\n\t          this.$overlay.css({ 'visibility': '' }).hide();\n\t          if (this.$element.hasClass('fast')) {\n\t            this.$overlay.addClass('fast');\n\t          } else if (this.$element.hasClass('slow')) {\n\t            this.$overlay.addClass('slow');\n\t          }\n\t        }\n\t\n\t        if (!this.options.multipleOpened) {\n\t          /**\n\t           * Fires immediately before the modal opens.\n\t           * Closes any other modals that are currently open\n\t           * @event Reveal#closeme\n\t           */\n\t          this.$element.trigger('closeme.zf.reveal', this.id);\n\t        }\n\t\n\t        var _this = this;\n\t\n\t        function addRevealOpenClasses() {\n\t          if (_this.isMobile) {\n\t            if (!_this.originalScrollPos) {\n\t              _this.originalScrollPos = window.pageYOffset;\n\t            }\n\t            $('html, body').addClass('is-reveal-open');\n\t          } else {\n\t            $('body').addClass('is-reveal-open');\n\t          }\n\t        }\n\t        // Motion UI method of reveal\n\t        if (this.options.animationIn) {\n\t          (function () {\n\t            var afterAnimation = function () {\n\t              _this.$element.attr({\n\t                'aria-hidden': false,\n\t                'tabindex': -1\n\t              }).focus();\n\t              addRevealOpenClasses();\n\t              Foundation.Keyboard.trapFocus(_this.$element);\n\t            };\n\t\n\t            if (_this3.options.overlay) {\n\t              Foundation.Motion.animateIn(_this3.$overlay, 'fade-in');\n\t            }\n\t            Foundation.Motion.animateIn(_this3.$element, _this3.options.animationIn, function () {\n\t              if (_this3.$element) {\n\t                // protect against object having been removed\n\t                _this3.focusableElements = Foundation.Keyboard.findFocusable(_this3.$element);\n\t                afterAnimation();\n\t              }\n\t            });\n\t          })();\n\t        }\n\t        // jQuery method of reveal\n\t        else {\n\t            if (this.options.overlay) {\n\t              this.$overlay.show(0);\n\t            }\n\t            this.$element.show(this.options.showDelay);\n\t          }\n\t\n\t        // handle accessibility\n\t        this.$element.attr({\n\t          'aria-hidden': false,\n\t          'tabindex': -1\n\t        }).focus();\n\t        Foundation.Keyboard.trapFocus(this.$element);\n\t\n\t        /**\n\t         * Fires when the modal has successfully opened.\n\t         * @event Reveal#open\n\t         */\n\t        this.$element.trigger('open.zf.reveal');\n\t\n\t        addRevealOpenClasses();\n\t\n\t        setTimeout(function () {\n\t          _this3._extraHandlers();\n\t        }, 0);\n\t      }\n\t\n\t      /**\n\t       * Adds extra event handlers for the body and window if necessary.\n\t       * @private\n\t       */\n\t\n\t    }, {\n\t      key: '_extraHandlers',\n\t      value: function _extraHandlers() {\n\t        var _this = this;\n\t        if (!this.$element) {\n\t          return;\n\t        } // If we're in the middle of cleanup, don't freak out\n\t        this.focusableElements = Foundation.Keyboard.findFocusable(this.$element);\n\t\n\t        if (!this.options.overlay && this.options.closeOnClick && !this.options.fullScreen) {\n\t          $('body').on('click.zf.reveal', function (e) {\n\t            if (e.target === _this.$element[0] || $.contains(_this.$element[0], e.target) || !$.contains(document, e.target)) {\n\t              return;\n\t            }\n\t            _this.close();\n\t          });\n\t        }\n\t\n\t        if (this.options.closeOnEsc) {\n\t          $(window).on('keydown.zf.reveal', function (e) {\n\t            Foundation.Keyboard.handleKey(e, 'Reveal', {\n\t              close: function () {\n\t                if (_this.options.closeOnEsc) {\n\t                  _this.close();\n\t                  _this.$anchor.focus();\n\t                }\n\t              }\n\t            });\n\t          });\n\t        }\n\t\n\t        // lock focus within modal while tabbing\n\t        this.$element.on('keydown.zf.reveal', function (e) {\n\t          var $target = $(this);\n\t          // handle keyboard event with keyboard util\n\t          Foundation.Keyboard.handleKey(e, 'Reveal', {\n\t            open: function () {\n\t              if (_this.$element.find(':focus').is(_this.$element.find('[data-close]'))) {\n\t                setTimeout(function () {\n\t                  // set focus back to anchor if close button has been activated\n\t                  _this.$anchor.focus();\n\t                }, 1);\n\t              } else if ($target.is(_this.focusableElements)) {\n\t                // dont't trigger if acual element has focus (i.e. inputs, links, ...)\n\t                _this.open();\n\t              }\n\t            },\n\t            close: function () {\n\t              if (_this.options.closeOnEsc) {\n\t                _this.close();\n\t                _this.$anchor.focus();\n\t              }\n\t            },\n\t            handled: function (preventDefault) {\n\t              if (preventDefault) {\n\t                e.preventDefault();\n\t              }\n\t            }\n\t          });\n\t        });\n\t      }\n\t\n\t      /**\n\t       * Closes the modal.\n\t       * @function\n\t       * @fires Reveal#closed\n\t       */\n\t\n\t    }, {\n\t      key: 'close',\n\t      value: function close() {\n\t        if (!this.isActive || !this.$element.is(':visible')) {\n\t          return false;\n\t        }\n\t        var _this = this;\n\t\n\t        // Motion UI method of hiding\n\t        if (this.options.animationOut) {\n\t          if (this.options.overlay) {\n\t            Foundation.Motion.animateOut(this.$overlay, 'fade-out', finishUp);\n\t          } else {\n\t            finishUp();\n\t          }\n\t\n\t          Foundation.Motion.animateOut(this.$element, this.options.animationOut);\n\t        }\n\t        // jQuery method of hiding\n\t        else {\n\t            if (this.options.overlay) {\n\t              this.$overlay.hide(0, finishUp);\n\t            } else {\n\t              finishUp();\n\t            }\n\t\n\t            this.$element.hide(this.options.hideDelay);\n\t          }\n\t\n\t        // Conditionals to remove extra event listeners added on open\n\t        if (this.options.closeOnEsc) {\n\t          $(window).off('keydown.zf.reveal');\n\t        }\n\t\n\t        if (!this.options.overlay && this.options.closeOnClick) {\n\t          $('body').off('click.zf.reveal');\n\t        }\n\t\n\t        this.$element.off('keydown.zf.reveal');\n\t\n\t        function finishUp() {\n\t          if (_this.isMobile) {\n\t            $('html, body').removeClass('is-reveal-open');\n\t            if (_this.originalScrollPos) {\n\t              $('body').scrollTop(_this.originalScrollPos);\n\t              _this.originalScrollPos = null;\n\t            }\n\t          } else {\n\t            $('body').removeClass('is-reveal-open');\n\t          }\n\t\n\t          Foundation.Keyboard.releaseFocus(_this.$element);\n\t\n\t          _this.$element.attr('aria-hidden', true);\n\t\n\t          /**\n\t          * Fires when the modal is done closing.\n\t          * @event Reveal#closed\n\t          */\n\t          _this.$element.trigger('closed.zf.reveal');\n\t        }\n\t\n\t        /**\n\t        * Resets the modal content\n\t        * This prevents a running video to keep going in the background\n\t        */\n\t        if (this.options.resetOnClose) {\n\t          this.$element.html(this.$element.html());\n\t        }\n\t\n\t        this.isActive = false;\n\t        if (_this.options.deepLink) {\n\t          if (window.history.replaceState) {\n\t            window.history.replaceState('', document.title, window.location.href.replace('#' + this.id, ''));\n\t          } else {\n\t            window.location.hash = '';\n\t          }\n\t        }\n\t      }\n\t\n\t      /**\n\t       * Toggles the open/closed state of a modal.\n\t       * @function\n\t       */\n\t\n\t    }, {\n\t      key: 'toggle',\n\t      value: function toggle() {\n\t        if (this.isActive) {\n\t          this.close();\n\t        } else {\n\t          this.open();\n\t        }\n\t      }\n\t    }, {\n\t      key: 'destroy',\n\t\n\t\n\t      /**\n\t       * Destroys an instance of a modal.\n\t       * @function\n\t       */\n\t      value: function destroy() {\n\t        if (this.options.overlay) {\n\t          this.$element.appendTo($(this.options.appendTo)); // move $element outside of $overlay to prevent error unregisterPlugin()\n\t          this.$overlay.hide().off().remove();\n\t        }\n\t        this.$element.hide().off();\n\t        this.$anchor.off('.zf');\n\t        $(window).off('.zf.reveal:' + this.id);\n\t\n\t        Foundation.unregisterPlugin(this);\n\t      }\n\t    }]);\n\t\n\t    return Reveal;\n\t  }();\n\t\n\t  Reveal.defaults = {\n\t    /**\n\t     * Motion-UI class to use for animated elements. If none used, defaults to simple show/hide.\n\t     * @option\n\t     * @example 'slide-in-left'\n\t     */\n\t    animationIn: '',\n\t    /**\n\t     * Motion-UI class to use for animated elements. If none used, defaults to simple show/hide.\n\t     * @option\n\t     * @example 'slide-out-right'\n\t     */\n\t    animationOut: '',\n\t    /**\n\t     * Time, in ms, to delay the opening of a modal after a click if no animation used.\n\t     * @option\n\t     * @example 10\n\t     */\n\t    showDelay: 0,\n\t    /**\n\t     * Time, in ms, to delay the closing of a modal after a click if no animation used.\n\t     * @option\n\t     * @example 10\n\t     */\n\t    hideDelay: 0,\n\t    /**\n\t     * Allows a click on the body/overlay to close the modal.\n\t     * @option\n\t     * @example true\n\t     */\n\t    closeOnClick: true,\n\t    /**\n\t     * Allows the modal to close if the user presses the `ESCAPE` key.\n\t     * @option\n\t     * @example true\n\t     */\n\t    closeOnEsc: true,\n\t    /**\n\t     * If true, allows multiple modals to be displayed at once.\n\t     * @option\n\t     * @example false\n\t     */\n\t    multipleOpened: false,\n\t    /**\n\t     * Distance, in pixels, the modal should push down from the top of the screen.\n\t     * @option\n\t     * @example auto\n\t     */\n\t    vOffset: 'auto',\n\t    /**\n\t     * Distance, in pixels, the modal should push in from the side of the screen.\n\t     * @option\n\t     * @example auto\n\t     */\n\t    hOffset: 'auto',\n\t    /**\n\t     * Allows the modal to be fullscreen, completely blocking out the rest of the view. JS checks for this as well.\n\t     * @option\n\t     * @example false\n\t     */\n\t    fullScreen: false,\n\t    /**\n\t     * Percentage of screen height the modal should push up from the bottom of the view.\n\t     * @option\n\t     * @example 10\n\t     */\n\t    btmOffsetPct: 10,\n\t    /**\n\t     * Allows the modal to generate an overlay div, which will cover the view when modal opens.\n\t     * @option\n\t     * @example true\n\t     */\n\t    overlay: true,\n\t    /**\n\t     * Allows the modal to remove and reinject markup on close. Should be true if using video elements w/o using provider's api, otherwise, videos will continue to play in the background.\n\t     * @option\n\t     * @example false\n\t     */\n\t    resetOnClose: false,\n\t    /**\n\t     * Allows the modal to alter the url on open/close, and allows the use of the `back` button to close modals. ALSO, allows a modal to auto-maniacally open on page load IF the hash === the modal's user-set id.\n\t     * @option\n\t     * @example false\n\t     */\n\t    deepLink: false,\n\t    /**\n\t    * Allows the modal to append to custom div.\n\t    * @option\n\t    * @example false\n\t    */\n\t    appendTo: \"body\"\n\t\n\t  };\n\t\n\t  // Window exports\n\t  Foundation.plugin(Reveal, 'Reveal');\n\t\n\t  function iPhoneSniff() {\n\t    return (/iP(ad|hone|od).*OS/.test(window.navigator.userAgent)\n\t    );\n\t  }\n\t\n\t  function androidSniff() {\n\t    return (/Android/.test(window.navigator.userAgent)\n\t    );\n\t  }\n\t\n\t  function mobileSniff() {\n\t    return iPhoneSniff() || androidSniff();\n\t  }\n\t}(jQuery);\n\t'use strict';\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\t!function ($) {\n\t\n\t  /**\n\t   * Slider module.\n\t   * @module foundation.slider\n\t   * @requires foundation.util.motion\n\t   * @requires foundation.util.triggers\n\t   * @requires foundation.util.keyboard\n\t   * @requires foundation.util.touch\n\t   */\n\t\n\t  var Slider = function () {\n\t    /**\n\t     * Creates a new instance of a slider control.\n\t     * @class\n\t     * @param {jQuery} element - jQuery object to make into a slider control.\n\t     * @param {Object} options - Overrides to the default plugin settings.\n\t     */\n\t    function Slider(element, options) {\n\t      _classCallCheck(this, Slider);\n\t\n\t      this.$element = element;\n\t      this.options = $.extend({}, Slider.defaults, this.$element.data(), options);\n\t\n\t      this._init();\n\t\n\t      Foundation.registerPlugin(this, 'Slider');\n\t      Foundation.Keyboard.register('Slider', {\n\t        'ltr': {\n\t          'ARROW_RIGHT': 'increase',\n\t          'ARROW_UP': 'increase',\n\t          'ARROW_DOWN': 'decrease',\n\t          'ARROW_LEFT': 'decrease',\n\t          'SHIFT_ARROW_RIGHT': 'increase_fast',\n\t          'SHIFT_ARROW_UP': 'increase_fast',\n\t          'SHIFT_ARROW_DOWN': 'decrease_fast',\n\t          'SHIFT_ARROW_LEFT': 'decrease_fast'\n\t        },\n\t        'rtl': {\n\t          'ARROW_LEFT': 'increase',\n\t          'ARROW_RIGHT': 'decrease',\n\t          'SHIFT_ARROW_LEFT': 'increase_fast',\n\t          'SHIFT_ARROW_RIGHT': 'decrease_fast'\n\t        }\n\t      });\n\t    }\n\t\n\t    /**\n\t     * Initilizes the plugin by reading/setting attributes, creating collections and setting the initial position of the handle(s).\n\t     * @function\n\t     * @private\n\t     */\n\t\n\t\n\t    _createClass(Slider, [{\n\t      key: '_init',\n\t      value: function _init() {\n\t        this.inputs = this.$element.find('input');\n\t        this.handles = this.$element.find('[data-slider-handle]');\n\t\n\t        this.$handle = this.handles.eq(0);\n\t        this.$input = this.inputs.length ? this.inputs.eq(0) : $('#' + this.$handle.attr('aria-controls'));\n\t        this.$fill = this.$element.find('[data-slider-fill]').css(this.options.vertical ? 'height' : 'width', 0);\n\t\n\t        var isDbl = false,\n\t            _this = this;\n\t        if (this.options.disabled || this.$element.hasClass(this.options.disabledClass)) {\n\t          this.options.disabled = true;\n\t          this.$element.addClass(this.options.disabledClass);\n\t        }\n\t        if (!this.inputs.length) {\n\t          this.inputs = $().add(this.$input);\n\t          this.options.binding = true;\n\t        }\n\t\n\t        this._setInitAttr(0);\n\t\n\t        if (this.handles[1]) {\n\t          this.options.doubleSided = true;\n\t          this.$handle2 = this.handles.eq(1);\n\t          this.$input2 = this.inputs.length > 1 ? this.inputs.eq(1) : $('#' + this.$handle2.attr('aria-controls'));\n\t\n\t          if (!this.inputs[1]) {\n\t            this.inputs = this.inputs.add(this.$input2);\n\t          }\n\t          isDbl = true;\n\t\n\t          // this.$handle.triggerHandler('click.zf.slider');\n\t          this._setInitAttr(1);\n\t        }\n\t\n\t        // Set handle positions\n\t        this.setHandles();\n\t\n\t        this._events();\n\t      }\n\t    }, {\n\t      key: 'setHandles',\n\t      value: function setHandles() {\n\t        var _this2 = this;\n\t\n\t        if (this.handles[1]) {\n\t          this._setHandlePos(this.$handle, this.inputs.eq(0).val(), true, function () {\n\t            _this2._setHandlePos(_this2.$handle2, _this2.inputs.eq(1).val(), true);\n\t          });\n\t        } else {\n\t          this._setHandlePos(this.$handle, this.inputs.eq(0).val(), true);\n\t        }\n\t      }\n\t    }, {\n\t      key: '_reflow',\n\t      value: function _reflow() {\n\t        this.setHandles();\n\t      }\n\t      /**\n\t      * @function\n\t      * @private\n\t      * @param {Number} value - floating point (the value) to be transformed using to a relative position on the slider (the inverse of _value)\n\t      */\n\t\n\t    }, {\n\t      key: '_pctOfBar',\n\t      value: function _pctOfBar(value) {\n\t        var pctOfBar = percent(value - this.options.start, this.options.end - this.options.start);\n\t\n\t        switch (this.options.positionValueFunction) {\n\t          case \"pow\":\n\t            pctOfBar = this._logTransform(pctOfBar);\n\t            break;\n\t          case \"log\":\n\t            pctOfBar = this._powTransform(pctOfBar);\n\t            break;\n\t        }\n\t\n\t        return pctOfBar.toFixed(2);\n\t      }\n\t\n\t      /**\n\t      * @function\n\t      * @private\n\t      * @param {Number} pctOfBar - floating point, the relative position of the slider (typically between 0-1) to be transformed to a value\n\t      */\n\t\n\t    }, {\n\t      key: '_value',\n\t      value: function _value(pctOfBar) {\n\t        switch (this.options.positionValueFunction) {\n\t          case \"pow\":\n\t            pctOfBar = this._powTransform(pctOfBar);\n\t            break;\n\t          case \"log\":\n\t            pctOfBar = this._logTransform(pctOfBar);\n\t            break;\n\t        }\n\t        var value = (this.options.end - this.options.start) * pctOfBar + this.options.start;\n\t\n\t        return value;\n\t      }\n\t\n\t      /**\n\t      * @function\n\t      * @private\n\t      * @param {Number} value - floating point (typically between 0-1) to be transformed using the log function\n\t      */\n\t\n\t    }, {\n\t      key: '_logTransform',\n\t      value: function _logTransform(value) {\n\t        return baseLog(this.options.nonLinearBase, value * (this.options.nonLinearBase - 1) + 1);\n\t      }\n\t\n\t      /**\n\t      * @function\n\t      * @private\n\t      * @param {Number} value - floating point (typically between 0-1) to be transformed using the power function\n\t      */\n\t\n\t    }, {\n\t      key: '_powTransform',\n\t      value: function _powTransform(value) {\n\t        return (Math.pow(this.options.nonLinearBase, value) - 1) / (this.options.nonLinearBase - 1);\n\t      }\n\t\n\t      /**\n\t       * Sets the position of the selected handle and fill bar.\n\t       * @function\n\t       * @private\n\t       * @param {jQuery} $hndl - the selected handle to move.\n\t       * @param {Number} location - floating point between the start and end values of the slider bar.\n\t       * @param {Function} cb - callback function to fire on completion.\n\t       * @fires Slider#moved\n\t       * @fires Slider#changed\n\t       */\n\t\n\t    }, {\n\t      key: '_setHandlePos',\n\t      value: function _setHandlePos($hndl, location, noInvert, cb) {\n\t        // don't move if the slider has been disabled since its initialization\n\t        if (this.$element.hasClass(this.options.disabledClass)) {\n\t          return;\n\t        }\n\t        //might need to alter that slightly for bars that will have odd number selections.\n\t        location = parseFloat(location); //on input change events, convert string to number...grumble.\n\t\n\t        // prevent slider from running out of bounds, if value exceeds the limits set through options, override the value to min/max\n\t        if (location < this.options.start) {\n\t          location = this.options.start;\n\t        } else if (location > this.options.end) {\n\t          location = this.options.end;\n\t        }\n\t\n\t        var isDbl = this.options.doubleSided;\n\t\n\t        if (isDbl) {\n\t          //this block is to prevent 2 handles from crossing eachother. Could/should be improved.\n\t          if (this.handles.index($hndl) === 0) {\n\t            var h2Val = parseFloat(this.$handle2.attr('aria-valuenow'));\n\t            location = location >= h2Val ? h2Val - this.options.step : location;\n\t          } else {\n\t            var h1Val = parseFloat(this.$handle.attr('aria-valuenow'));\n\t            location = location <= h1Val ? h1Val + this.options.step : location;\n\t          }\n\t        }\n\t\n\t        //this is for single-handled vertical sliders, it adjusts the value to account for the slider being \"upside-down\"\n\t        //for click and drag events, it's weird due to the scale(-1, 1) css property\n\t        if (this.options.vertical && !noInvert) {\n\t          location = this.options.end - location;\n\t        }\n\t\n\t        var _this = this,\n\t            vert = this.options.vertical,\n\t            hOrW = vert ? 'height' : 'width',\n\t            lOrT = vert ? 'top' : 'left',\n\t            handleDim = $hndl[0].getBoundingClientRect()[hOrW],\n\t            elemDim = this.$element[0].getBoundingClientRect()[hOrW],\n\t\n\t        //percentage of bar min/max value based on click or drag point\n\t        pctOfBar = this._pctOfBar(location),\n\t\n\t        //number of actual pixels to shift the handle, based on the percentage obtained above\n\t        pxToMove = (elemDim - handleDim) * pctOfBar,\n\t\n\t        //percentage of bar to shift the handle\n\t        movement = (percent(pxToMove, elemDim) * 100).toFixed(this.options.decimal);\n\t        //fixing the decimal value for the location number, is passed to other methods as a fixed floating-point value\n\t        location = parseFloat(location.toFixed(this.options.decimal));\n\t        // declare empty object for css adjustments, only used with 2 handled-sliders\n\t        var css = {};\n\t\n\t        this._setValues($hndl, location);\n\t\n\t        // TODO update to calculate based on values set to respective inputs??\n\t        if (isDbl) {\n\t          var isLeftHndl = this.handles.index($hndl) === 0,\n\t\n\t          //empty variable, will be used for min-height/width for fill bar\n\t          dim,\n\t\n\t          //percentage w/h of the handle compared to the slider bar\n\t          handlePct = ~~(percent(handleDim, elemDim) * 100);\n\t          //if left handle, the math is slightly different than if it's the right handle, and the left/top property needs to be changed for the fill bar\n\t          if (isLeftHndl) {\n\t            //left or top percentage value to apply to the fill bar.\n\t            css[lOrT] = movement + '%';\n\t            //calculate the new min-height/width for the fill bar.\n\t            dim = parseFloat(this.$handle2[0].style[lOrT]) - movement + handlePct;\n\t            //this callback is necessary to prevent errors and allow the proper placement and initialization of a 2-handled slider\n\t            //plus, it means we don't care if 'dim' isNaN on init, it won't be in the future.\n\t            if (cb && typeof cb === 'function') {\n\t              cb();\n\t            } //this is only needed for the initialization of 2 handled sliders\n\t          } else {\n\t            //just caching the value of the left/bottom handle's left/top property\n\t            var handlePos = parseFloat(this.$handle[0].style[lOrT]);\n\t            //calculate the new min-height/width for the fill bar. Use isNaN to prevent false positives for numbers <= 0\n\t            //based on the percentage of movement of the handle being manipulated, less the opposing handle's left/top position, plus the percentage w/h of the handle itself\n\t            dim = movement - (isNaN(handlePos) ? (this.options.initialStart - this.options.start) / ((this.options.end - this.options.start) / 100) : handlePos) + handlePct;\n\t          }\n\t          // assign the min-height/width to our css object\n\t          css['min-' + hOrW] = dim + '%';\n\t        }\n\t\n\t        this.$element.one('finished.zf.animate', function () {\n\t          /**\n\t           * Fires when the handle is done moving.\n\t           * @event Slider#moved\n\t           */\n\t          _this.$element.trigger('moved.zf.slider', [$hndl]);\n\t        });\n\t\n\t        //because we don't know exactly how the handle will be moved, check the amount of time it should take to move.\n\t        var moveTime = this.$element.data('dragging') ? 1000 / 60 : this.options.moveTime;\n\t\n\t        Foundation.Move(moveTime, $hndl, function () {\n\t          // adjusting the left/top property of the handle, based on the percentage calculated above\n\t          // if movement isNaN, that is because the slider is hidden and we cannot determine handle width,\n\t          // fall back to next best guess.\n\t          if (isNaN(movement)) {\n\t            $hndl.css(lOrT, pctOfBar * 100 + '%');\n\t          } else {\n\t            $hndl.css(lOrT, movement + '%');\n\t          }\n\t\n\t          if (!_this.options.doubleSided) {\n\t            //if single-handled, a simple method to expand the fill bar\n\t            _this.$fill.css(hOrW, pctOfBar * 100 + '%');\n\t          } else {\n\t            //otherwise, use the css object we created above\n\t            _this.$fill.css(css);\n\t          }\n\t        });\n\t\n\t        /**\n\t         * Fires when the value has not been change for a given time.\n\t         * @event Slider#changed\n\t         */\n\t        clearTimeout(_this.timeout);\n\t        _this.timeout = setTimeout(function () {\n\t          _this.$element.trigger('changed.zf.slider', [$hndl]);\n\t        }, _this.options.changedDelay);\n\t      }\n\t\n\t      /**\n\t       * Sets the initial attribute for the slider element.\n\t       * @function\n\t       * @private\n\t       * @param {Number} idx - index of the current handle/input to use.\n\t       */\n\t\n\t    }, {\n\t      key: '_setInitAttr',\n\t      value: function _setInitAttr(idx) {\n\t        var initVal = idx === 0 ? this.options.initialStart : this.options.initialEnd;\n\t        var id = this.inputs.eq(idx).attr('id') || Foundation.GetYoDigits(6, 'slider');\n\t        this.inputs.eq(idx).attr({\n\t          'id': id,\n\t          'max': this.options.end,\n\t          'min': this.options.start,\n\t          'step': this.options.step\n\t        });\n\t        this.inputs.eq(idx).val(initVal);\n\t        this.handles.eq(idx).attr({\n\t          'role': 'slider',\n\t          'aria-controls': id,\n\t          'aria-valuemax': this.options.end,\n\t          'aria-valuemin': this.options.start,\n\t          'aria-valuenow': initVal,\n\t          'aria-orientation': this.options.vertical ? 'vertical' : 'horizontal',\n\t          'tabindex': 0\n\t        });\n\t      }\n\t\n\t      /**\n\t       * Sets the input and `aria-valuenow` values for the slider element.\n\t       * @function\n\t       * @private\n\t       * @param {jQuery} $handle - the currently selected handle.\n\t       * @param {Number} val - floating point of the new value.\n\t       */\n\t\n\t    }, {\n\t      key: '_setValues',\n\t      value: function _setValues($handle, val) {\n\t        var idx = this.options.doubleSided ? this.handles.index($handle) : 0;\n\t        this.inputs.eq(idx).val(val);\n\t        $handle.attr('aria-valuenow', val);\n\t      }\n\t\n\t      /**\n\t       * Handles events on the slider element.\n\t       * Calculates the new location of the current handle.\n\t       * If there are two handles and the bar was clicked, it determines which handle to move.\n\t       * @function\n\t       * @private\n\t       * @param {Object} e - the `event` object passed from the listener.\n\t       * @param {jQuery} $handle - the current handle to calculate for, if selected.\n\t       * @param {Number} val - floating point number for the new value of the slider.\n\t       * TODO clean this up, there's a lot of repeated code between this and the _setHandlePos fn.\n\t       */\n\t\n\t    }, {\n\t      key: '_handleEvent',\n\t      value: function _handleEvent(e, $handle, val) {\n\t        var value, hasVal;\n\t        if (!val) {\n\t          //click or drag events\n\t          e.preventDefault();\n\t          var _this = this,\n\t              vertical = this.options.vertical,\n\t              param = vertical ? 'height' : 'width',\n\t              direction = vertical ? 'top' : 'left',\n\t              eventOffset = vertical ? e.pageY : e.pageX,\n\t              halfOfHandle = this.$handle[0].getBoundingClientRect()[param] / 2,\n\t              barDim = this.$element[0].getBoundingClientRect()[param],\n\t              windowScroll = vertical ? $(window).scrollTop() : $(window).scrollLeft();\n\t\n\t          var elemOffset = this.$element.offset()[direction];\n\t\n\t          // touch events emulated by the touch util give position relative to screen, add window.scroll to event coordinates...\n\t          // best way to guess this is simulated is if clientY == pageY\n\t          if (e.clientY === e.pageY) {\n\t            eventOffset = eventOffset + windowScroll;\n\t          }\n\t          var eventFromBar = eventOffset - elemOffset;\n\t          var barXY;\n\t          if (eventFromBar < 0) {\n\t            barXY = 0;\n\t          } else if (eventFromBar > barDim) {\n\t            barXY = barDim;\n\t          } else {\n\t            barXY = eventFromBar;\n\t          }\n\t          var offsetPct = percent(barXY, barDim);\n\t\n\t          value = this._value(offsetPct);\n\t\n\t          // turn everything around for RTL, yay math!\n\t          if (Foundation.rtl() && !this.options.vertical) {\n\t            value = this.options.end - value;\n\t          }\n\t\n\t          value = _this._adjustValue(null, value);\n\t          //boolean flag for the setHandlePos fn, specifically for vertical sliders\n\t          hasVal = false;\n\t\n\t          if (!$handle) {\n\t            //figure out which handle it is, pass it to the next function.\n\t            var firstHndlPos = absPosition(this.$handle, direction, barXY, param),\n\t                secndHndlPos = absPosition(this.$handle2, direction, barXY, param);\n\t            $handle = firstHndlPos <= secndHndlPos ? this.$handle : this.$handle2;\n\t          }\n\t        } else {\n\t          //change event on input\n\t          value = this._adjustValue(null, val);\n\t          hasVal = true;\n\t        }\n\t\n\t        this._setHandlePos($handle, value, hasVal);\n\t      }\n\t\n\t      /**\n\t       * Adjustes value for handle in regard to step value. returns adjusted value\n\t       * @function\n\t       * @private\n\t       * @param {jQuery} $handle - the selected handle.\n\t       * @param {Number} value - value to adjust. used if $handle is falsy\n\t       */\n\t\n\t    }, {\n\t      key: '_adjustValue',\n\t      value: function _adjustValue($handle, value) {\n\t        var val,\n\t            step = this.options.step,\n\t            div = parseFloat(step / 2),\n\t            left,\n\t            prev_val,\n\t            next_val;\n\t        if (!!$handle) {\n\t          val = parseFloat($handle.attr('aria-valuenow'));\n\t        } else {\n\t          val = value;\n\t        }\n\t        left = val % step;\n\t        prev_val = val - left;\n\t        next_val = prev_val + step;\n\t        if (left === 0) {\n\t          return val;\n\t        }\n\t        val = val >= prev_val + div ? next_val : prev_val;\n\t        return val;\n\t      }\n\t\n\t      /**\n\t       * Adds event listeners to the slider elements.\n\t       * @function\n\t       * @private\n\t       */\n\t\n\t    }, {\n\t      key: '_events',\n\t      value: function _events() {\n\t        this._eventsForHandle(this.$handle);\n\t        if (this.handles[1]) {\n\t          this._eventsForHandle(this.$handle2);\n\t        }\n\t      }\n\t\n\t      /**\n\t       * Adds event listeners a particular handle\n\t       * @function\n\t       * @private\n\t       * @param {jQuery} $handle - the current handle to apply listeners to.\n\t       */\n\t\n\t    }, {\n\t      key: '_eventsForHandle',\n\t      value: function _eventsForHandle($handle) {\n\t        var _this = this,\n\t            curHandle,\n\t            timer;\n\t\n\t        this.inputs.off('change.zf.slider').on('change.zf.slider', function (e) {\n\t          var idx = _this.inputs.index($(this));\n\t          _this._handleEvent(e, _this.handles.eq(idx), $(this).val());\n\t        });\n\t\n\t        if (this.options.clickSelect) {\n\t          this.$element.off('click.zf.slider').on('click.zf.slider', function (e) {\n\t            if (_this.$element.data('dragging')) {\n\t              return false;\n\t            }\n\t\n\t            if (!$(e.target).is('[data-slider-handle]')) {\n\t              if (_this.options.doubleSided) {\n\t                _this._handleEvent(e);\n\t              } else {\n\t                _this._handleEvent(e, _this.$handle);\n\t              }\n\t            }\n\t          });\n\t        }\n\t\n\t        if (this.options.draggable) {\n\t          this.handles.addTouch();\n\t\n\t          var $body = $('body');\n\t          $handle.off('mousedown.zf.slider').on('mousedown.zf.slider', function (e) {\n\t            $handle.addClass('is-dragging');\n\t            _this.$fill.addClass('is-dragging'); //\n\t            _this.$element.data('dragging', true);\n\t\n\t            curHandle = $(e.currentTarget);\n\t\n\t            $body.on('mousemove.zf.slider', function (e) {\n\t              e.preventDefault();\n\t              _this._handleEvent(e, curHandle);\n\t            }).on('mouseup.zf.slider', function (e) {\n\t              _this._handleEvent(e, curHandle);\n\t\n\t              $handle.removeClass('is-dragging');\n\t              _this.$fill.removeClass('is-dragging');\n\t              _this.$element.data('dragging', false);\n\t\n\t              $body.off('mousemove.zf.slider mouseup.zf.slider');\n\t            });\n\t          })\n\t          // prevent events triggered by touch\n\t          .on('selectstart.zf.slider touchmove.zf.slider', function (e) {\n\t            e.preventDefault();\n\t          });\n\t        }\n\t\n\t        $handle.off('keydown.zf.slider').on('keydown.zf.slider', function (e) {\n\t          var _$handle = $(this),\n\t              idx = _this.options.doubleSided ? _this.handles.index(_$handle) : 0,\n\t              oldValue = parseFloat(_this.inputs.eq(idx).val()),\n\t              newValue;\n\t\n\t          // handle keyboard event with keyboard util\n\t          Foundation.Keyboard.handleKey(e, 'Slider', {\n\t            decrease: function () {\n\t              newValue = oldValue - _this.options.step;\n\t            },\n\t            increase: function () {\n\t              newValue = oldValue + _this.options.step;\n\t            },\n\t            decrease_fast: function () {\n\t              newValue = oldValue - _this.options.step * 10;\n\t            },\n\t            increase_fast: function () {\n\t              newValue = oldValue + _this.options.step * 10;\n\t            },\n\t            handled: function () {\n\t              // only set handle pos when event was handled specially\n\t              e.preventDefault();\n\t              _this._setHandlePos(_$handle, newValue, true);\n\t            }\n\t          });\n\t          /*if (newValue) { // if pressed key has special function, update value\n\t            e.preventDefault();\n\t            _this._setHandlePos(_$handle, newValue);\n\t          }*/\n\t        });\n\t      }\n\t\n\t      /**\n\t       * Destroys the slider plugin.\n\t       */\n\t\n\t    }, {\n\t      key: 'destroy',\n\t      value: function destroy() {\n\t        this.handles.off('.zf.slider');\n\t        this.inputs.off('.zf.slider');\n\t        this.$element.off('.zf.slider');\n\t\n\t        clearTimeout(this.timeout);\n\t\n\t        Foundation.unregisterPlugin(this);\n\t      }\n\t    }]);\n\t\n\t    return Slider;\n\t  }();\n\t\n\t  Slider.defaults = {\n\t    /**\n\t     * Minimum value for the slider scale.\n\t     * @option\n\t     * @example 0\n\t     */\n\t    start: 0,\n\t    /**\n\t     * Maximum value for the slider scale.\n\t     * @option\n\t     * @example 100\n\t     */\n\t    end: 100,\n\t    /**\n\t     * Minimum value change per change event.\n\t     * @option\n\t     * @example 1\n\t     */\n\t    step: 1,\n\t    /**\n\t     * Value at which the handle/input *(left handle/first input)* should be set to on initialization.\n\t     * @option\n\t     * @example 0\n\t     */\n\t    initialStart: 0,\n\t    /**\n\t     * Value at which the right handle/second input should be set to on initialization.\n\t     * @option\n\t     * @example 100\n\t     */\n\t    initialEnd: 100,\n\t    /**\n\t     * Allows the input to be located outside the container and visible. Set to by the JS\n\t     * @option\n\t     * @example false\n\t     */\n\t    binding: false,\n\t    /**\n\t     * Allows the user to click/tap on the slider bar to select a value.\n\t     * @option\n\t     * @example true\n\t     */\n\t    clickSelect: true,\n\t    /**\n\t     * Set to true and use the `vertical` class to change alignment to vertical.\n\t     * @option\n\t     * @example false\n\t     */\n\t    vertical: false,\n\t    /**\n\t     * Allows the user to drag the slider handle(s) to select a value.\n\t     * @option\n\t     * @example true\n\t     */\n\t    draggable: true,\n\t    /**\n\t     * Disables the slider and prevents event listeners from being applied. Double checked by JS with `disabledClass`.\n\t     * @option\n\t     * @example false\n\t     */\n\t    disabled: false,\n\t    /**\n\t     * Allows the use of two handles. Double checked by the JS. Changes some logic handling.\n\t     * @option\n\t     * @example false\n\t     */\n\t    doubleSided: false,\n\t    /**\n\t     * Potential future feature.\n\t     */\n\t    // steps: 100,\n\t    /**\n\t     * Number of decimal places the plugin should go to for floating point precision.\n\t     * @option\n\t     * @example 2\n\t     */\n\t    decimal: 2,\n\t    /**\n\t     * Time delay for dragged elements.\n\t     */\n\t    // dragDelay: 0,\n\t    /**\n\t     * Time, in ms, to animate the movement of a slider handle if user clicks/taps on the bar. Needs to be manually set if updating the transition time in the Sass settings.\n\t     * @option\n\t     * @example 200\n\t     */\n\t    moveTime: 200, //update this if changing the transition time in the sass\n\t    /**\n\t     * Class applied to disabled sliders.\n\t     * @option\n\t     * @example 'disabled'\n\t     */\n\t    disabledClass: 'disabled',\n\t    /**\n\t     * Will invert the default layout for a vertical<span data-tooltip title=\"who would do this???\"> </span>slider.\n\t     * @option\n\t     * @example false\n\t     */\n\t    invertVertical: false,\n\t    /**\n\t     * Milliseconds before the `changed.zf-slider` event is triggered after value change.\n\t     * @option\n\t     * @example 500\n\t     */\n\t    changedDelay: 500,\n\t    /**\n\t    * Basevalue for non-linear sliders\n\t    * @option\n\t    * @example 5\n\t    */\n\t    nonLinearBase: 5,\n\t    /**\n\t    * Basevalue for non-linear sliders, possible values are: 'linear', 'pow' & 'log'. Pow and Log use the nonLinearBase setting.\n\t    * @option\n\t    * @example 'linear'\n\t    */\n\t    positionValueFunction: 'linear'\n\t  };\n\t\n\t  function percent(frac, num) {\n\t    return frac / num;\n\t  }\n\t  function absPosition($handle, dir, clickPos, param) {\n\t    return Math.abs($handle.position()[dir] + $handle[param]() / 2 - clickPos);\n\t  }\n\t  function baseLog(base, value) {\n\t    return Math.log(value) / Math.log(base);\n\t  }\n\t\n\t  // Window exports\n\t  Foundation.plugin(Slider, 'Slider');\n\t}(jQuery);\n\t'use strict';\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\t!function ($) {\n\t\n\t  /**\n\t   * Sticky module.\n\t   * @module foundation.sticky\n\t   * @requires foundation.util.triggers\n\t   * @requires foundation.util.mediaQuery\n\t   */\n\t\n\t  var Sticky = function () {\n\t    /**\n\t     * Creates a new instance of a sticky thing.\n\t     * @class\n\t     * @param {jQuery} element - jQuery object to make sticky.\n\t     * @param {Object} options - options object passed when creating the element programmatically.\n\t     */\n\t    function Sticky(element, options) {\n\t      _classCallCheck(this, Sticky);\n\t\n\t      this.$element = element;\n\t      this.options = $.extend({}, Sticky.defaults, this.$element.data(), options);\n\t\n\t      this._init();\n\t\n\t      Foundation.registerPlugin(this, 'Sticky');\n\t    }\n\t\n\t    /**\n\t     * Initializes the sticky element by adding classes, getting/setting dimensions, breakpoints and attributes\n\t     * @function\n\t     * @private\n\t     */\n\t\n\t\n\t    _createClass(Sticky, [{\n\t      key: '_init',\n\t      value: function _init() {\n\t        var $parent = this.$element.parent('[data-sticky-container]'),\n\t            id = this.$element[0].id || Foundation.GetYoDigits(6, 'sticky'),\n\t            _this = this;\n\t\n\t        if (!$parent.length) {\n\t          this.wasWrapped = true;\n\t        }\n\t        this.$container = $parent.length ? $parent : $(this.options.container).wrapInner(this.$element);\n\t        this.$container.addClass(this.options.containerClass);\n\t\n\t        this.$element.addClass(this.options.stickyClass).attr({ 'data-resize': id });\n\t\n\t        this.scrollCount = this.options.checkEvery;\n\t        this.isStuck = false;\n\t        $(window).one('load.zf.sticky', function () {\n\t          //We calculate the container height to have correct values for anchor points offset calculation.\n\t          _this.containerHeight = _this.$element.css(\"display\") == \"none\" ? 0 : _this.$element[0].getBoundingClientRect().height;\n\t          _this.$container.css('height', _this.containerHeight);\n\t          _this.elemHeight = _this.containerHeight;\n\t          if (_this.options.anchor !== '') {\n\t            _this.$anchor = $('#' + _this.options.anchor);\n\t          } else {\n\t            _this._parsePoints();\n\t          }\n\t\n\t          _this._setSizes(function () {\n\t            var scroll = window.pageYOffset;\n\t            _this._calc(false, scroll);\n\t            //Unstick the element will ensure that proper classes are set.\n\t            if (!_this.isStuck) {\n\t              _this._removeSticky(scroll >= _this.topPoint ? false : true);\n\t            }\n\t          });\n\t          _this._events(id.split('-').reverse().join('-'));\n\t        });\n\t      }\n\t\n\t      /**\n\t       * If using multiple elements as anchors, calculates the top and bottom pixel values the sticky thing should stick and unstick on.\n\t       * @function\n\t       * @private\n\t       */\n\t\n\t    }, {\n\t      key: '_parsePoints',\n\t      value: function _parsePoints() {\n\t        var top = this.options.topAnchor == \"\" ? 1 : this.options.topAnchor,\n\t            btm = this.options.btmAnchor == \"\" ? document.documentElement.scrollHeight : this.options.btmAnchor,\n\t            pts = [top, btm],\n\t            breaks = {};\n\t        for (var i = 0, len = pts.length; i < len && pts[i]; i++) {\n\t          var pt;\n\t          if (typeof pts[i] === 'number') {\n\t            pt = pts[i];\n\t          } else {\n\t            var place = pts[i].split(':'),\n\t                anchor = $('#' + place[0]);\n\t\n\t            pt = anchor.offset().top;\n\t            if (place[1] && place[1].toLowerCase() === 'bottom') {\n\t              pt += anchor[0].getBoundingClientRect().height;\n\t            }\n\t          }\n\t          breaks[i] = pt;\n\t        }\n\t\n\t        this.points = breaks;\n\t        return;\n\t      }\n\t\n\t      /**\n\t       * Adds event handlers for the scrolling element.\n\t       * @private\n\t       * @param {String} id - psuedo-random id for unique scroll event listener.\n\t       */\n\t\n\t    }, {\n\t      key: '_events',\n\t      value: function _events(id) {\n\t        var _this = this,\n\t            scrollListener = this.scrollListener = 'scroll.zf.' + id;\n\t        if (this.isOn) {\n\t          return;\n\t        }\n\t        if (this.canStick) {\n\t          this.isOn = true;\n\t          $(window).off(scrollListener).on(scrollListener, function (e) {\n\t            if (_this.scrollCount === 0) {\n\t              _this.scrollCount = _this.options.checkEvery;\n\t              _this._setSizes(function () {\n\t                _this._calc(false, window.pageYOffset);\n\t              });\n\t            } else {\n\t              _this.scrollCount--;\n\t              _this._calc(false, window.pageYOffset);\n\t            }\n\t          });\n\t        }\n\t\n\t        this.$element.off('resizeme.zf.trigger').on('resizeme.zf.trigger', function (e, el) {\n\t          _this._setSizes(function () {\n\t            _this._calc(false);\n\t            if (_this.canStick) {\n\t              if (!_this.isOn) {\n\t                _this._events(id);\n\t              }\n\t            } else if (_this.isOn) {\n\t              _this._pauseListeners(scrollListener);\n\t            }\n\t          });\n\t        });\n\t      }\n\t\n\t      /**\n\t       * Removes event handlers for scroll and change events on anchor.\n\t       * @fires Sticky#pause\n\t       * @param {String} scrollListener - unique, namespaced scroll listener attached to `window`\n\t       */\n\t\n\t    }, {\n\t      key: '_pauseListeners',\n\t      value: function _pauseListeners(scrollListener) {\n\t        this.isOn = false;\n\t        $(window).off(scrollListener);\n\t\n\t        /**\n\t         * Fires when the plugin is paused due to resize event shrinking the view.\n\t         * @event Sticky#pause\n\t         * @private\n\t         */\n\t        this.$element.trigger('pause.zf.sticky');\n\t      }\n\t\n\t      /**\n\t       * Called on every `scroll` event and on `_init`\n\t       * fires functions based on booleans and cached values\n\t       * @param {Boolean} checkSizes - true if plugin should recalculate sizes and breakpoints.\n\t       * @param {Number} scroll - current scroll position passed from scroll event cb function. If not passed, defaults to `window.pageYOffset`.\n\t       */\n\t\n\t    }, {\n\t      key: '_calc',\n\t      value: function _calc(checkSizes, scroll) {\n\t        if (checkSizes) {\n\t          this._setSizes();\n\t        }\n\t\n\t        if (!this.canStick) {\n\t          if (this.isStuck) {\n\t            this._removeSticky(true);\n\t          }\n\t          return false;\n\t        }\n\t\n\t        if (!scroll) {\n\t          scroll = window.pageYOffset;\n\t        }\n\t\n\t        if (scroll >= this.topPoint) {\n\t          if (scroll <= this.bottomPoint) {\n\t            if (!this.isStuck) {\n\t              this._setSticky();\n\t            }\n\t          } else {\n\t            if (this.isStuck) {\n\t              this._removeSticky(false);\n\t            }\n\t          }\n\t        } else {\n\t          if (this.isStuck) {\n\t            this._removeSticky(true);\n\t          }\n\t        }\n\t      }\n\t\n\t      /**\n\t       * Causes the $element to become stuck.\n\t       * Adds `position: fixed;`, and helper classes.\n\t       * @fires Sticky#stuckto\n\t       * @function\n\t       * @private\n\t       */\n\t\n\t    }, {\n\t      key: '_setSticky',\n\t      value: function _setSticky() {\n\t        var _this = this,\n\t            stickTo = this.options.stickTo,\n\t            mrgn = stickTo === 'top' ? 'marginTop' : 'marginBottom',\n\t            notStuckTo = stickTo === 'top' ? 'bottom' : 'top',\n\t            css = {};\n\t\n\t        css[mrgn] = this.options[mrgn] + 'em';\n\t        css[stickTo] = 0;\n\t        css[notStuckTo] = 'auto';\n\t        this.isStuck = true;\n\t        this.$element.removeClass('is-anchored is-at-' + notStuckTo).addClass('is-stuck is-at-' + stickTo).css(css)\n\t        /**\n\t         * Fires when the $element has become `position: fixed;`\n\t         * Namespaced to `top` or `bottom`, e.g. `sticky.zf.stuckto:top`\n\t         * @event Sticky#stuckto\n\t         */\n\t        .trigger('sticky.zf.stuckto:' + stickTo);\n\t        this.$element.on(\"transitionend webkitTransitionEnd oTransitionEnd otransitionend MSTransitionEnd\", function () {\n\t          _this._setSizes();\n\t        });\n\t      }\n\t\n\t      /**\n\t       * Causes the $element to become unstuck.\n\t       * Removes `position: fixed;`, and helper classes.\n\t       * Adds other helper classes.\n\t       * @param {Boolean} isTop - tells the function if the $element should anchor to the top or bottom of its $anchor element.\n\t       * @fires Sticky#unstuckfrom\n\t       * @private\n\t       */\n\t\n\t    }, {\n\t      key: '_removeSticky',\n\t      value: function _removeSticky(isTop) {\n\t        var stickTo = this.options.stickTo,\n\t            stickToTop = stickTo === 'top',\n\t            css = {},\n\t            anchorPt = (this.points ? this.points[1] - this.points[0] : this.anchorHeight) - this.elemHeight,\n\t            mrgn = stickToTop ? 'marginTop' : 'marginBottom',\n\t            notStuckTo = stickToTop ? 'bottom' : 'top',\n\t            topOrBottom = isTop ? 'top' : 'bottom';\n\t\n\t        css[mrgn] = 0;\n\t\n\t        css['bottom'] = 'auto';\n\t        if (isTop) {\n\t          css['top'] = 0;\n\t        } else {\n\t          css['top'] = anchorPt;\n\t        }\n\t\n\t        this.isStuck = false;\n\t        this.$element.removeClass('is-stuck is-at-' + stickTo).addClass('is-anchored is-at-' + topOrBottom).css(css)\n\t        /**\n\t         * Fires when the $element has become anchored.\n\t         * Namespaced to `top` or `bottom`, e.g. `sticky.zf.unstuckfrom:bottom`\n\t         * @event Sticky#unstuckfrom\n\t         */\n\t        .trigger('sticky.zf.unstuckfrom:' + topOrBottom);\n\t      }\n\t\n\t      /**\n\t       * Sets the $element and $container sizes for plugin.\n\t       * Calls `_setBreakPoints`.\n\t       * @param {Function} cb - optional callback function to fire on completion of `_setBreakPoints`.\n\t       * @private\n\t       */\n\t\n\t    }, {\n\t      key: '_setSizes',\n\t      value: function _setSizes(cb) {\n\t        this.canStick = Foundation.MediaQuery.is(this.options.stickyOn);\n\t        if (!this.canStick) {\n\t          if (cb && typeof cb === 'function') {\n\t            cb();\n\t          }\n\t        }\n\t        var _this = this,\n\t            newElemWidth = this.$container[0].getBoundingClientRect().width,\n\t            comp = window.getComputedStyle(this.$container[0]),\n\t            pdngl = parseInt(comp['padding-left'], 10),\n\t            pdngr = parseInt(comp['padding-right'], 10);\n\t\n\t        if (this.$anchor && this.$anchor.length) {\n\t          this.anchorHeight = this.$anchor[0].getBoundingClientRect().height;\n\t        } else {\n\t          this._parsePoints();\n\t        }\n\t\n\t        this.$element.css({\n\t          'max-width': newElemWidth - pdngl - pdngr + 'px'\n\t        });\n\t\n\t        var newContainerHeight = this.$element[0].getBoundingClientRect().height || this.containerHeight;\n\t        if (this.$element.css(\"display\") == \"none\") {\n\t          newContainerHeight = 0;\n\t        }\n\t        this.containerHeight = newContainerHeight;\n\t        this.$container.css({\n\t          height: newContainerHeight\n\t        });\n\t        this.elemHeight = newContainerHeight;\n\t\n\t        if (!this.isStuck) {\n\t          if (this.$element.hasClass('is-at-bottom')) {\n\t            var anchorPt = (this.points ? this.points[1] - this.$container.offset().top : this.anchorHeight) - this.elemHeight;\n\t            this.$element.css('top', anchorPt);\n\t          }\n\t        }\n\t\n\t        this._setBreakPoints(newContainerHeight, function () {\n\t          if (cb && typeof cb === 'function') {\n\t            cb();\n\t          }\n\t        });\n\t      }\n\t\n\t      /**\n\t       * Sets the upper and lower breakpoints for the element to become sticky/unsticky.\n\t       * @param {Number} elemHeight - px value for sticky.$element height, calculated by `_setSizes`.\n\t       * @param {Function} cb - optional callback function to be called on completion.\n\t       * @private\n\t       */\n\t\n\t    }, {\n\t      key: '_setBreakPoints',\n\t      value: function _setBreakPoints(elemHeight, cb) {\n\t        if (!this.canStick) {\n\t          if (cb && typeof cb === 'function') {\n\t            cb();\n\t          } else {\n\t            return false;\n\t          }\n\t        }\n\t        var mTop = emCalc(this.options.marginTop),\n\t            mBtm = emCalc(this.options.marginBottom),\n\t            topPoint = this.points ? this.points[0] : this.$anchor.offset().top,\n\t            bottomPoint = this.points ? this.points[1] : topPoint + this.anchorHeight,\n\t\n\t        // topPoint = this.$anchor.offset().top || this.points[0],\n\t        // bottomPoint = topPoint + this.anchorHeight || this.points[1],\n\t        winHeight = window.innerHeight;\n\t\n\t        if (this.options.stickTo === 'top') {\n\t          topPoint -= mTop;\n\t          bottomPoint -= elemHeight + mTop;\n\t        } else if (this.options.stickTo === 'bottom') {\n\t          topPoint -= winHeight - (elemHeight + mBtm);\n\t          bottomPoint -= winHeight - mBtm;\n\t        } else {\n\t          //this would be the stickTo: both option... tricky\n\t        }\n\t\n\t        this.topPoint = topPoint;\n\t        this.bottomPoint = bottomPoint;\n\t\n\t        if (cb && typeof cb === 'function') {\n\t          cb();\n\t        }\n\t      }\n\t\n\t      /**\n\t       * Destroys the current sticky element.\n\t       * Resets the element to the top position first.\n\t       * Removes event listeners, JS-added css properties and classes, and unwraps the $element if the JS added the $container.\n\t       * @function\n\t       */\n\t\n\t    }, {\n\t      key: 'destroy',\n\t      value: function destroy() {\n\t        this._removeSticky(true);\n\t\n\t        this.$element.removeClass(this.options.stickyClass + ' is-anchored is-at-top').css({\n\t          height: '',\n\t          top: '',\n\t          bottom: '',\n\t          'max-width': ''\n\t        }).off('resizeme.zf.trigger');\n\t        if (this.$anchor && this.$anchor.length) {\n\t          this.$anchor.off('change.zf.sticky');\n\t        }\n\t        $(window).off(this.scrollListener);\n\t\n\t        if (this.wasWrapped) {\n\t          this.$element.unwrap();\n\t        } else {\n\t          this.$container.removeClass(this.options.containerClass).css({\n\t            height: ''\n\t          });\n\t        }\n\t        Foundation.unregisterPlugin(this);\n\t      }\n\t    }]);\n\t\n\t    return Sticky;\n\t  }();\n\t\n\t  Sticky.defaults = {\n\t    /**\n\t     * Customizable container template. Add your own classes for styling and sizing.\n\t     * @option\n\t     * @example '&lt;div data-sticky-container class=\"small-6 columns\"&gt;&lt;/div&gt;'\n\t     */\n\t    container: '<div data-sticky-container></div>',\n\t    /**\n\t     * Location in the view the element sticks to.\n\t     * @option\n\t     * @example 'top'\n\t     */\n\t    stickTo: 'top',\n\t    /**\n\t     * If anchored to a single element, the id of that element.\n\t     * @option\n\t     * @example 'exampleId'\n\t     */\n\t    anchor: '',\n\t    /**\n\t     * If using more than one element as anchor points, the id of the top anchor.\n\t     * @option\n\t     * @example 'exampleId:top'\n\t     */\n\t    topAnchor: '',\n\t    /**\n\t     * If using more than one element as anchor points, the id of the bottom anchor.\n\t     * @option\n\t     * @example 'exampleId:bottom'\n\t     */\n\t    btmAnchor: '',\n\t    /**\n\t     * Margin, in `em`'s to apply to the top of the element when it becomes sticky.\n\t     * @option\n\t     * @example 1\n\t     */\n\t    marginTop: 1,\n\t    /**\n\t     * Margin, in `em`'s to apply to the bottom of the element when it becomes sticky.\n\t     * @option\n\t     * @example 1\n\t     */\n\t    marginBottom: 1,\n\t    /**\n\t     * Breakpoint string that is the minimum screen size an element should become sticky.\n\t     * @option\n\t     * @example 'medium'\n\t     */\n\t    stickyOn: 'medium',\n\t    /**\n\t     * Class applied to sticky element, and removed on destruction. Foundation defaults to `sticky`.\n\t     * @option\n\t     * @example 'sticky'\n\t     */\n\t    stickyClass: 'sticky',\n\t    /**\n\t     * Class applied to sticky container. Foundation defaults to `sticky-container`.\n\t     * @option\n\t     * @example 'sticky-container'\n\t     */\n\t    containerClass: 'sticky-container',\n\t    /**\n\t     * Number of scroll events between the plugin's recalculating sticky points. Setting it to `0` will cause it to recalc every scroll event, setting it to `-1` will prevent recalc on scroll.\n\t     * @option\n\t     * @example 50\n\t     */\n\t    checkEvery: -1\n\t  };\n\t\n\t  /**\n\t   * Helper function to calculate em values\n\t   * @param Number {em} - number of em's to calculate into pixels\n\t   */\n\t  function emCalc(em) {\n\t    return parseInt(window.getComputedStyle(document.body, null).fontSize, 10) * em;\n\t  }\n\t\n\t  // Window exports\n\t  Foundation.plugin(Sticky, 'Sticky');\n\t}(jQuery);\n\t'use strict';\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\t!function ($) {\n\t\n\t  /**\n\t   * Tabs module.\n\t   * @module foundation.tabs\n\t   * @requires foundation.util.keyboard\n\t   * @requires foundation.util.timerAndImageLoader if tabs contain images\n\t   */\n\t\n\t  var Tabs = function () {\n\t    /**\n\t     * Creates a new instance of tabs.\n\t     * @class\n\t     * @fires Tabs#init\n\t     * @param {jQuery} element - jQuery object to make into tabs.\n\t     * @param {Object} options - Overrides to the default plugin settings.\n\t     */\n\t    function Tabs(element, options) {\n\t      _classCallCheck(this, Tabs);\n\t\n\t      this.$element = element;\n\t      this.options = $.extend({}, Tabs.defaults, this.$element.data(), options);\n\t\n\t      this._init();\n\t      Foundation.registerPlugin(this, 'Tabs');\n\t      Foundation.Keyboard.register('Tabs', {\n\t        'ENTER': 'open',\n\t        'SPACE': 'open',\n\t        'ARROW_RIGHT': 'next',\n\t        'ARROW_UP': 'previous',\n\t        'ARROW_DOWN': 'next',\n\t        'ARROW_LEFT': 'previous'\n\t        // 'TAB': 'next',\n\t        // 'SHIFT_TAB': 'previous'\n\t      });\n\t    }\n\t\n\t    /**\n\t     * Initializes the tabs by showing and focusing (if autoFocus=true) the preset active tab.\n\t     * @private\n\t     */\n\t\n\t\n\t    _createClass(Tabs, [{\n\t      key: '_init',\n\t      value: function _init() {\n\t        var _this = this;\n\t\n\t        this.$element.attr({ 'role': 'tablist' });\n\t        this.$tabTitles = this.$element.find('.' + this.options.linkClass);\n\t        this.$tabContent = $('[data-tabs-content=\"' + this.$element[0].id + '\"]');\n\t\n\t        this.$tabTitles.each(function () {\n\t          var $elem = $(this),\n\t              $link = $elem.find('a'),\n\t              isActive = $elem.hasClass('' + _this.options.linkActiveClass),\n\t              hash = $link[0].hash.slice(1),\n\t              linkId = $link[0].id ? $link[0].id : hash + '-label',\n\t              $tabContent = $('#' + hash);\n\t\n\t          $elem.attr({ 'role': 'presentation' });\n\t\n\t          $link.attr({\n\t            'role': 'tab',\n\t            'aria-controls': hash,\n\t            'aria-selected': isActive,\n\t            'id': linkId\n\t          });\n\t\n\t          $tabContent.attr({\n\t            'role': 'tabpanel',\n\t            'aria-hidden': !isActive,\n\t            'aria-labelledby': linkId\n\t          });\n\t\n\t          if (isActive && _this.options.autoFocus) {\n\t            $(window).load(function () {\n\t              $('html, body').animate({ scrollTop: $elem.offset().top }, _this.options.deepLinkSmudgeDelay, function () {\n\t                $link.focus();\n\t              });\n\t            });\n\t          }\n\t\n\t          //use browser to open a tab, if it exists in this tabset\n\t          if (_this.options.deepLink) {\n\t            var anchor = window.location.hash;\n\t            //need a hash and a relevant anchor in this tabset\n\t            if (anchor.length) {\n\t              var $link = $elem.find('[href=\"' + anchor + '\"]');\n\t              if ($link.length) {\n\t                _this.selectTab($(anchor));\n\t\n\t                //roll up a little to show the titles\n\t                if (_this.options.deepLinkSmudge) {\n\t                  $(window).load(function () {\n\t                    var offset = $elem.offset();\n\t                    $('html, body').animate({ scrollTop: offset.top }, _this.options.deepLinkSmudgeDelay);\n\t                  });\n\t                }\n\t\n\t                /**\n\t                  * Fires when the zplugin has deeplinked at pageload\n\t                  * @event Tabs#deeplink\n\t                  */\n\t                $elem.trigger('deeplink.zf.tabs', [$link, $(anchor)]);\n\t              }\n\t            }\n\t          }\n\t        });\n\t\n\t        if (this.options.matchHeight) {\n\t          var $images = this.$tabContent.find('img');\n\t\n\t          if ($images.length) {\n\t            Foundation.onImagesLoaded($images, this._setHeight.bind(this));\n\t          } else {\n\t            this._setHeight();\n\t          }\n\t        }\n\t\n\t        this._events();\n\t      }\n\t\n\t      /**\n\t       * Adds event handlers for items within the tabs.\n\t       * @private\n\t       */\n\t\n\t    }, {\n\t      key: '_events',\n\t      value: function _events() {\n\t        this._addKeyHandler();\n\t        this._addClickHandler();\n\t        this._setHeightMqHandler = null;\n\t\n\t        if (this.options.matchHeight) {\n\t          this._setHeightMqHandler = this._setHeight.bind(this);\n\t\n\t          $(window).on('changed.zf.mediaquery', this._setHeightMqHandler);\n\t        }\n\t      }\n\t\n\t      /**\n\t       * Adds click handlers for items within the tabs.\n\t       * @private\n\t       */\n\t\n\t    }, {\n\t      key: '_addClickHandler',\n\t      value: function _addClickHandler() {\n\t        var _this = this;\n\t\n\t        this.$element.off('click.zf.tabs').on('click.zf.tabs', '.' + this.options.linkClass, function (e) {\n\t          e.preventDefault();\n\t          e.stopPropagation();\n\t          _this._handleTabChange($(this));\n\t        });\n\t      }\n\t\n\t      /**\n\t       * Adds keyboard event handlers for items within the tabs.\n\t       * @private\n\t       */\n\t\n\t    }, {\n\t      key: '_addKeyHandler',\n\t      value: function _addKeyHandler() {\n\t        var _this = this;\n\t\n\t        this.$tabTitles.off('keydown.zf.tabs').on('keydown.zf.tabs', function (e) {\n\t          if (e.which === 9) return;\n\t\n\t          var $element = $(this),\n\t              $elements = $element.parent('ul').children('li'),\n\t              $prevElement,\n\t              $nextElement;\n\t\n\t          $elements.each(function (i) {\n\t            if ($(this).is($element)) {\n\t              if (_this.options.wrapOnKeys) {\n\t                $prevElement = i === 0 ? $elements.last() : $elements.eq(i - 1);\n\t                $nextElement = i === $elements.length - 1 ? $elements.first() : $elements.eq(i + 1);\n\t              } else {\n\t                $prevElement = $elements.eq(Math.max(0, i - 1));\n\t                $nextElement = $elements.eq(Math.min(i + 1, $elements.length - 1));\n\t              }\n\t              return;\n\t            }\n\t          });\n\t\n\t          // handle keyboard event with keyboard util\n\t          Foundation.Keyboard.handleKey(e, 'Tabs', {\n\t            open: function () {\n\t              $element.find('[role=\"tab\"]').focus();\n\t              _this._handleTabChange($element);\n\t            },\n\t            previous: function () {\n\t              $prevElement.find('[role=\"tab\"]').focus();\n\t              _this._handleTabChange($prevElement);\n\t            },\n\t            next: function () {\n\t              $nextElement.find('[role=\"tab\"]').focus();\n\t              _this._handleTabChange($nextElement);\n\t            },\n\t            handled: function () {\n\t              e.stopPropagation();\n\t              e.preventDefault();\n\t            }\n\t          });\n\t        });\n\t      }\n\t\n\t      /**\n\t       * Opens the tab `$targetContent` defined by `$target`. Collapses active tab.\n\t       * @param {jQuery} $target - Tab to open.\n\t       * @fires Tabs#change\n\t       * @function\n\t       */\n\t\n\t    }, {\n\t      key: '_handleTabChange',\n\t      value: function _handleTabChange($target) {\n\t\n\t        /**\n\t         * Check for active class on target. Collapse if exists.\n\t         */\n\t        if ($target.hasClass('' + this.options.linkActiveClass)) {\n\t          if (this.options.activeCollapse) {\n\t            this._collapseTab($target);\n\t\n\t            /**\n\t             * Fires when the zplugin has successfully collapsed tabs.\n\t             * @event Tabs#collapse\n\t             */\n\t            this.$element.trigger('collapse.zf.tabs', [$target]);\n\t          }\n\t          return;\n\t        }\n\t\n\t        var $oldTab = this.$element.find('.' + this.options.linkClass + '.' + this.options.linkActiveClass),\n\t            $tabLink = $target.find('[role=\"tab\"]'),\n\t            hash = $tabLink[0].hash,\n\t            $targetContent = this.$tabContent.find(hash);\n\t\n\t        //close old tab\n\t        this._collapseTab($oldTab);\n\t\n\t        //open new tab\n\t        this._openTab($target);\n\t\n\t        //either replace or update browser history\n\t        if (this.options.deepLink) {\n\t          var anchor = $target.find('a').attr('href');\n\t\n\t          if (this.options.updateHistory) {\n\t            history.pushState({}, '', anchor);\n\t          } else {\n\t            history.replaceState({}, '', anchor);\n\t          }\n\t        }\n\t\n\t        /**\n\t         * Fires when the plugin has successfully changed tabs.\n\t         * @event Tabs#change\n\t         */\n\t        this.$element.trigger('change.zf.tabs', [$target, $targetContent]);\n\t\n\t        //fire to children a mutation event\n\t        $targetContent.find(\"[data-mutate]\").trigger(\"mutateme.zf.trigger\");\n\t      }\n\t\n\t      /**\n\t       * Opens the tab `$targetContent` defined by `$target`.\n\t       * @param {jQuery} $target - Tab to Open.\n\t       * @function\n\t       */\n\t\n\t    }, {\n\t      key: '_openTab',\n\t      value: function _openTab($target) {\n\t        var $tabLink = $target.find('[role=\"tab\"]'),\n\t            hash = $tabLink[0].hash,\n\t            $targetContent = this.$tabContent.find(hash);\n\t\n\t        $target.addClass('' + this.options.linkActiveClass);\n\t\n\t        $tabLink.attr({ 'aria-selected': 'true' });\n\t\n\t        $targetContent.addClass('' + this.options.panelActiveClass).attr({ 'aria-hidden': 'false' });\n\t      }\n\t\n\t      /**\n\t       * Collapses `$targetContent` defined by `$target`.\n\t       * @param {jQuery} $target - Tab to Open.\n\t       * @function\n\t       */\n\t\n\t    }, {\n\t      key: '_collapseTab',\n\t      value: function _collapseTab($target) {\n\t        var $target_anchor = $target.removeClass('' + this.options.linkActiveClass).find('[role=\"tab\"]').attr({ 'aria-selected': 'false' });\n\t\n\t        $('#' + $target_anchor.attr('aria-controls')).removeClass('' + this.options.panelActiveClass).attr({ 'aria-hidden': 'true' });\n\t      }\n\t\n\t      /**\n\t       * Public method for selecting a content pane to display.\n\t       * @param {jQuery | String} elem - jQuery object or string of the id of the pane to display.\n\t       * @function\n\t       */\n\t\n\t    }, {\n\t      key: 'selectTab',\n\t      value: function selectTab(elem) {\n\t        var idStr;\n\t\n\t        if (typeof elem === 'object') {\n\t          idStr = elem[0].id;\n\t        } else {\n\t          idStr = elem;\n\t        }\n\t\n\t        if (idStr.indexOf('#') < 0) {\n\t          idStr = '#' + idStr;\n\t        }\n\t\n\t        var $target = this.$tabTitles.find('[href=\"' + idStr + '\"]').parent('.' + this.options.linkClass);\n\t\n\t        this._handleTabChange($target);\n\t      }\n\t    }, {\n\t      key: '_setHeight',\n\t\n\t      /**\n\t       * Sets the height of each panel to the height of the tallest panel.\n\t       * If enabled in options, gets called on media query change.\n\t       * If loading content via external source, can be called directly or with _reflow.\n\t       * @function\n\t       * @private\n\t       */\n\t      value: function _setHeight() {\n\t        var max = 0;\n\t        this.$tabContent.find('.' + this.options.panelClass).css('height', '').each(function () {\n\t          var panel = $(this),\n\t              isActive = panel.hasClass('' + this.options.panelActiveClass);\n\t\n\t          if (!isActive) {\n\t            panel.css({ 'visibility': 'hidden', 'display': 'block' });\n\t          }\n\t\n\t          var temp = this.getBoundingClientRect().height;\n\t\n\t          if (!isActive) {\n\t            panel.css({\n\t              'visibility': '',\n\t              'display': ''\n\t            });\n\t          }\n\t\n\t          max = temp > max ? temp : max;\n\t        }).css('height', max + 'px');\n\t      }\n\t\n\t      /**\n\t       * Destroys an instance of an tabs.\n\t       * @fires Tabs#destroyed\n\t       */\n\t\n\t    }, {\n\t      key: 'destroy',\n\t      value: function destroy() {\n\t        this.$element.find('.' + this.options.linkClass).off('.zf.tabs').hide().end().find('.' + this.options.panelClass).hide();\n\t\n\t        if (this.options.matchHeight) {\n\t          if (this._setHeightMqHandler != null) {\n\t            $(window).off('changed.zf.mediaquery', this._setHeightMqHandler);\n\t          }\n\t        }\n\t\n\t        Foundation.unregisterPlugin(this);\n\t      }\n\t    }]);\n\t\n\t    return Tabs;\n\t  }();\n\t\n\t  Tabs.defaults = {\n\t    /**\n\t     * Allows the window to scroll to content of pane specified by hash anchor\n\t     * @option\n\t     * @example false\n\t     */\n\t    deepLink: false,\n\t\n\t    /**\n\t     * Adjust the deep link scroll to make sure the top of the tab panel is visible\n\t     * @option\n\t     * @example false\n\t     */\n\t    deepLinkSmudge: false,\n\t\n\t    /**\n\t     * Animation time (ms) for the deep link adjustment\n\t     * @option\n\t     * @example 300\n\t     */\n\t    deepLinkSmudgeDelay: 300,\n\t\n\t    /**\n\t     * Update the browser history with the open tab\n\t     * @option\n\t     * @example false\n\t     */\n\t    updateHistory: false,\n\t\n\t    /**\n\t     * Allows the window to scroll to content of active pane on load if set to true.\n\t     * Not recommended if more than one tab panel per page.\n\t     * @option\n\t     * @example false\n\t     */\n\t    autoFocus: false,\n\t\n\t    /**\n\t     * Allows keyboard input to 'wrap' around the tab links.\n\t     * @option\n\t     * @example true\n\t     */\n\t    wrapOnKeys: true,\n\t\n\t    /**\n\t     * Allows the tab content panes to match heights if set to true.\n\t     * @option\n\t     * @example false\n\t     */\n\t    matchHeight: false,\n\t\n\t    /**\n\t     * Allows active tabs to collapse when clicked.\n\t     * @option\n\t     * @example false\n\t     */\n\t    activeCollapse: false,\n\t\n\t    /**\n\t     * Class applied to `li`'s in tab link list.\n\t     * @option\n\t     * @example 'tabs-title'\n\t     */\n\t    linkClass: 'tabs-title',\n\t\n\t    /**\n\t     * Class applied to the active `li` in tab link list.\n\t     * @option\n\t     * @example 'is-active'\n\t     */\n\t    linkActiveClass: 'is-active',\n\t\n\t    /**\n\t     * Class applied to the content containers.\n\t     * @option\n\t     * @example 'tabs-panel'\n\t     */\n\t    panelClass: 'tabs-panel',\n\t\n\t    /**\n\t     * Class applied to the active content container.\n\t     * @option\n\t     * @example 'is-active'\n\t     */\n\t    panelActiveClass: 'is-active'\n\t  };\n\t\n\t  // Window exports\n\t  Foundation.plugin(Tabs, 'Tabs');\n\t}(jQuery);\n\t'use strict';\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\t!function ($) {\n\t\n\t  /**\n\t   * Toggler module.\n\t   * @module foundation.toggler\n\t   * @requires foundation.util.motion\n\t   * @requires foundation.util.triggers\n\t   */\n\t\n\t  var Toggler = function () {\n\t    /**\n\t     * Creates a new instance of Toggler.\n\t     * @class\n\t     * @fires Toggler#init\n\t     * @param {Object} element - jQuery object to add the trigger to.\n\t     * @param {Object} options - Overrides to the default plugin settings.\n\t     */\n\t    function Toggler(element, options) {\n\t      _classCallCheck(this, Toggler);\n\t\n\t      this.$element = element;\n\t      this.options = $.extend({}, Toggler.defaults, element.data(), options);\n\t      this.className = '';\n\t\n\t      this._init();\n\t      this._events();\n\t\n\t      Foundation.registerPlugin(this, 'Toggler');\n\t    }\n\t\n\t    /**\n\t     * Initializes the Toggler plugin by parsing the toggle class from data-toggler, or animation classes from data-animate.\n\t     * @function\n\t     * @private\n\t     */\n\t\n\t\n\t    _createClass(Toggler, [{\n\t      key: '_init',\n\t      value: function _init() {\n\t        var input;\n\t        // Parse animation classes if they were set\n\t        if (this.options.animate) {\n\t          input = this.options.animate.split(' ');\n\t\n\t          this.animationIn = input[0];\n\t          this.animationOut = input[1] || null;\n\t        }\n\t        // Otherwise, parse toggle class\n\t        else {\n\t            input = this.$element.data('toggler');\n\t            // Allow for a . at the beginning of the string\n\t            this.className = input[0] === '.' ? input.slice(1) : input;\n\t          }\n\t\n\t        // Add ARIA attributes to triggers\n\t        var id = this.$element[0].id;\n\t        $('[data-open=\"' + id + '\"], [data-close=\"' + id + '\"], [data-toggle=\"' + id + '\"]').attr('aria-controls', id);\n\t        // If the target is hidden, add aria-hidden\n\t        this.$element.attr('aria-expanded', this.$element.is(':hidden') ? false : true);\n\t      }\n\t\n\t      /**\n\t       * Initializes events for the toggle trigger.\n\t       * @function\n\t       * @private\n\t       */\n\t\n\t    }, {\n\t      key: '_events',\n\t      value: function _events() {\n\t        this.$element.off('toggle.zf.trigger').on('toggle.zf.trigger', this.toggle.bind(this));\n\t      }\n\t\n\t      /**\n\t       * Toggles the target class on the target element. An event is fired from the original trigger depending on if the resultant state was \"on\" or \"off\".\n\t       * @function\n\t       * @fires Toggler#on\n\t       * @fires Toggler#off\n\t       */\n\t\n\t    }, {\n\t      key: 'toggle',\n\t      value: function toggle() {\n\t        this[this.options.animate ? '_toggleAnimate' : '_toggleClass']();\n\t      }\n\t    }, {\n\t      key: '_toggleClass',\n\t      value: function _toggleClass() {\n\t        this.$element.toggleClass(this.className);\n\t\n\t        var isOn = this.$element.hasClass(this.className);\n\t        if (isOn) {\n\t          /**\n\t           * Fires if the target element has the class after a toggle.\n\t           * @event Toggler#on\n\t           */\n\t          this.$element.trigger('on.zf.toggler');\n\t        } else {\n\t          /**\n\t           * Fires if the target element does not have the class after a toggle.\n\t           * @event Toggler#off\n\t           */\n\t          this.$element.trigger('off.zf.toggler');\n\t        }\n\t\n\t        this._updateARIA(isOn);\n\t        this.$element.find('[data-mutate]').trigger('mutateme.zf.trigger');\n\t      }\n\t    }, {\n\t      key: '_toggleAnimate',\n\t      value: function _toggleAnimate() {\n\t        var _this = this;\n\t\n\t        if (this.$element.is(':hidden')) {\n\t          Foundation.Motion.animateIn(this.$element, this.animationIn, function () {\n\t            _this._updateARIA(true);\n\t            this.trigger('on.zf.toggler');\n\t            this.find('[data-mutate]').trigger('mutateme.zf.trigger');\n\t          });\n\t        } else {\n\t          Foundation.Motion.animateOut(this.$element, this.animationOut, function () {\n\t            _this._updateARIA(false);\n\t            this.trigger('off.zf.toggler');\n\t            this.find('[data-mutate]').trigger('mutateme.zf.trigger');\n\t          });\n\t        }\n\t      }\n\t    }, {\n\t      key: '_updateARIA',\n\t      value: function _updateARIA(isOn) {\n\t        this.$element.attr('aria-expanded', isOn ? true : false);\n\t      }\n\t\n\t      /**\n\t       * Destroys the instance of Toggler on the element.\n\t       * @function\n\t       */\n\t\n\t    }, {\n\t      key: 'destroy',\n\t      value: function destroy() {\n\t        this.$element.off('.zf.toggler');\n\t        Foundation.unregisterPlugin(this);\n\t      }\n\t    }]);\n\t\n\t    return Toggler;\n\t  }();\n\t\n\t  Toggler.defaults = {\n\t    /**\n\t     * Tells the plugin if the element should animated when toggled.\n\t     * @option\n\t     * @example false\n\t     */\n\t    animate: false\n\t  };\n\t\n\t  // Window exports\n\t  Foundation.plugin(Toggler, 'Toggler');\n\t}(jQuery);\n\t'use strict';\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\t!function ($) {\n\t\n\t  /**\n\t   * Tooltip module.\n\t   * @module foundation.tooltip\n\t   * @requires foundation.util.box\n\t   * @requires foundation.util.mediaQuery\n\t   * @requires foundation.util.triggers\n\t   */\n\t\n\t  var Tooltip = function () {\n\t    /**\n\t     * Creates a new instance of a Tooltip.\n\t     * @class\n\t     * @fires Tooltip#init\n\t     * @param {jQuery} element - jQuery object to attach a tooltip to.\n\t     * @param {Object} options - object to extend the default configuration.\n\t     */\n\t    function Tooltip(element, options) {\n\t      _classCallCheck(this, Tooltip);\n\t\n\t      this.$element = element;\n\t      this.options = $.extend({}, Tooltip.defaults, this.$element.data(), options);\n\t\n\t      this.isActive = false;\n\t      this.isClick = false;\n\t      this._init();\n\t\n\t      Foundation.registerPlugin(this, 'Tooltip');\n\t    }\n\t\n\t    /**\n\t     * Initializes the tooltip by setting the creating the tip element, adding it's text, setting private variables and setting attributes on the anchor.\n\t     * @private\n\t     */\n\t\n\t\n\t    _createClass(Tooltip, [{\n\t      key: '_init',\n\t      value: function _init() {\n\t        var elemId = this.$element.attr('aria-describedby') || Foundation.GetYoDigits(6, 'tooltip');\n\t\n\t        this.options.positionClass = this.options.positionClass || this._getPositionClass(this.$element);\n\t        this.options.tipText = this.options.tipText || this.$element.attr('title');\n\t        this.template = this.options.template ? $(this.options.template) : this._buildTemplate(elemId);\n\t\n\t        if (this.options.allowHtml) {\n\t          this.template.appendTo(document.body).html(this.options.tipText).hide();\n\t        } else {\n\t          this.template.appendTo(document.body).text(this.options.tipText).hide();\n\t        }\n\t\n\t        this.$element.attr({\n\t          'title': '',\n\t          'aria-describedby': elemId,\n\t          'data-yeti-box': elemId,\n\t          'data-toggle': elemId,\n\t          'data-resize': elemId\n\t        }).addClass(this.options.triggerClass);\n\t\n\t        //helper variables to track movement on collisions\n\t        this.usedPositions = [];\n\t        this.counter = 4;\n\t        this.classChanged = false;\n\t\n\t        this._events();\n\t      }\n\t\n\t      /**\n\t       * Grabs the current positioning class, if present, and returns the value or an empty string.\n\t       * @private\n\t       */\n\t\n\t    }, {\n\t      key: '_getPositionClass',\n\t      value: function _getPositionClass(element) {\n\t        if (!element) {\n\t          return '';\n\t        }\n\t        // var position = element.attr('class').match(/top|left|right/g);\n\t        var position = element[0].className.match(/\\b(top|left|right)\\b/g);\n\t        position = position ? position[0] : '';\n\t        return position;\n\t      }\n\t    }, {\n\t      key: '_buildTemplate',\n\t\n\t      /**\n\t       * builds the tooltip element, adds attributes, and returns the template.\n\t       * @private\n\t       */\n\t      value: function _buildTemplate(id) {\n\t        var templateClasses = (this.options.tooltipClass + ' ' + this.options.positionClass + ' ' + this.options.templateClasses).trim();\n\t        var $template = $('<div></div>').addClass(templateClasses).attr({\n\t          'role': 'tooltip',\n\t          'aria-hidden': true,\n\t          'data-is-active': false,\n\t          'data-is-focus': false,\n\t          'id': id\n\t        });\n\t        return $template;\n\t      }\n\t\n\t      /**\n\t       * Function that gets called if a collision event is detected.\n\t       * @param {String} position - positioning class to try\n\t       * @private\n\t       */\n\t\n\t    }, {\n\t      key: '_reposition',\n\t      value: function _reposition(position) {\n\t        this.usedPositions.push(position ? position : 'bottom');\n\t\n\t        //default, try switching to opposite side\n\t        if (!position && this.usedPositions.indexOf('top') < 0) {\n\t          this.template.addClass('top');\n\t        } else if (position === 'top' && this.usedPositions.indexOf('bottom') < 0) {\n\t          this.template.removeClass(position);\n\t        } else if (position === 'left' && this.usedPositions.indexOf('right') < 0) {\n\t          this.template.removeClass(position).addClass('right');\n\t        } else if (position === 'right' && this.usedPositions.indexOf('left') < 0) {\n\t          this.template.removeClass(position).addClass('left');\n\t        }\n\t\n\t        //if default change didn't work, try bottom or left first\n\t        else if (!position && this.usedPositions.indexOf('top') > -1 && this.usedPositions.indexOf('left') < 0) {\n\t            this.template.addClass('left');\n\t          } else if (position === 'top' && this.usedPositions.indexOf('bottom') > -1 && this.usedPositions.indexOf('left') < 0) {\n\t            this.template.removeClass(position).addClass('left');\n\t          } else if (position === 'left' && this.usedPositions.indexOf('right') > -1 && this.usedPositions.indexOf('bottom') < 0) {\n\t            this.template.removeClass(position);\n\t          } else if (position === 'right' && this.usedPositions.indexOf('left') > -1 && this.usedPositions.indexOf('bottom') < 0) {\n\t            this.template.removeClass(position);\n\t          }\n\t          //if nothing cleared, set to bottom\n\t          else {\n\t              this.template.removeClass(position);\n\t            }\n\t        this.classChanged = true;\n\t        this.counter--;\n\t      }\n\t\n\t      /**\n\t       * sets the position class of an element and recursively calls itself until there are no more possible positions to attempt, or the tooltip element is no longer colliding.\n\t       * if the tooltip is larger than the screen width, default to full width - any user selected margin\n\t       * @private\n\t       */\n\t\n\t    }, {\n\t      key: '_setPosition',\n\t      value: function _setPosition() {\n\t        var position = this._getPositionClass(this.template),\n\t            $tipDims = Foundation.Box.GetDimensions(this.template),\n\t            $anchorDims = Foundation.Box.GetDimensions(this.$element),\n\t            direction = position === 'left' ? 'left' : position === 'right' ? 'left' : 'top',\n\t            param = direction === 'top' ? 'height' : 'width',\n\t            offset = param === 'height' ? this.options.vOffset : this.options.hOffset,\n\t            _this = this;\n\t\n\t        if ($tipDims.width >= $tipDims.windowDims.width || !this.counter && !Foundation.Box.ImNotTouchingYou(this.template)) {\n\t          this.template.offset(Foundation.Box.GetOffsets(this.template, this.$element, 'center bottom', this.options.vOffset, this.options.hOffset, true)).css({\n\t            // this.$element.offset(Foundation.GetOffsets(this.template, this.$element, 'center bottom', this.options.vOffset, this.options.hOffset, true)).css({\n\t            'width': $anchorDims.windowDims.width - this.options.hOffset * 2,\n\t            'height': 'auto'\n\t          });\n\t          return false;\n\t        }\n\t\n\t        this.template.offset(Foundation.Box.GetOffsets(this.template, this.$element, 'center ' + (position || 'bottom'), this.options.vOffset, this.options.hOffset));\n\t\n\t        while (!Foundation.Box.ImNotTouchingYou(this.template) && this.counter) {\n\t          this._reposition(position);\n\t          this._setPosition();\n\t        }\n\t      }\n\t\n\t      /**\n\t       * reveals the tooltip, and fires an event to close any other open tooltips on the page\n\t       * @fires Tooltip#closeme\n\t       * @fires Tooltip#show\n\t       * @function\n\t       */\n\t\n\t    }, {\n\t      key: 'show',\n\t      value: function show() {\n\t        if (this.options.showOn !== 'all' && !Foundation.MediaQuery.is(this.options.showOn)) {\n\t          // console.error('The screen is too small to display this tooltip');\n\t          return false;\n\t        }\n\t\n\t        var _this = this;\n\t        this.template.css('visibility', 'hidden').show();\n\t        this._setPosition();\n\t\n\t        /**\n\t         * Fires to close all other open tooltips on the page\n\t         * @event Closeme#tooltip\n\t         */\n\t        this.$element.trigger('closeme.zf.tooltip', this.template.attr('id'));\n\t\n\t        this.template.attr({\n\t          'data-is-active': true,\n\t          'aria-hidden': false\n\t        });\n\t        _this.isActive = true;\n\t        // console.log(this.template);\n\t        this.template.stop().hide().css('visibility', '').fadeIn(this.options.fadeInDuration, function () {\n\t          //maybe do stuff?\n\t        });\n\t        /**\n\t         * Fires when the tooltip is shown\n\t         * @event Tooltip#show\n\t         */\n\t        this.$element.trigger('show.zf.tooltip');\n\t      }\n\t\n\t      /**\n\t       * Hides the current tooltip, and resets the positioning class if it was changed due to collision\n\t       * @fires Tooltip#hide\n\t       * @function\n\t       */\n\t\n\t    }, {\n\t      key: 'hide',\n\t      value: function hide() {\n\t        // console.log('hiding', this.$element.data('yeti-box'));\n\t        var _this = this;\n\t        this.template.stop().attr({\n\t          'aria-hidden': true,\n\t          'data-is-active': false\n\t        }).fadeOut(this.options.fadeOutDuration, function () {\n\t          _this.isActive = false;\n\t          _this.isClick = false;\n\t          if (_this.classChanged) {\n\t            _this.template.removeClass(_this._getPositionClass(_this.template)).addClass(_this.options.positionClass);\n\t\n\t            _this.usedPositions = [];\n\t            _this.counter = 4;\n\t            _this.classChanged = false;\n\t          }\n\t        });\n\t        /**\n\t         * fires when the tooltip is hidden\n\t         * @event Tooltip#hide\n\t         */\n\t        this.$element.trigger('hide.zf.tooltip');\n\t      }\n\t\n\t      /**\n\t       * adds event listeners for the tooltip and its anchor\n\t       * TODO combine some of the listeners like focus and mouseenter, etc.\n\t       * @private\n\t       */\n\t\n\t    }, {\n\t      key: '_events',\n\t      value: function _events() {\n\t        var _this = this;\n\t        var $template = this.template;\n\t        var isFocus = false;\n\t\n\t        if (!this.options.disableHover) {\n\t\n\t          this.$element.on('mouseenter.zf.tooltip', function (e) {\n\t            if (!_this.isActive) {\n\t              _this.timeout = setTimeout(function () {\n\t                _this.show();\n\t              }, _this.options.hoverDelay);\n\t            }\n\t          }).on('mouseleave.zf.tooltip', function (e) {\n\t            clearTimeout(_this.timeout);\n\t            if (!isFocus || _this.isClick && !_this.options.clickOpen) {\n\t              _this.hide();\n\t            }\n\t          });\n\t        }\n\t\n\t        if (this.options.clickOpen) {\n\t          this.$element.on('mousedown.zf.tooltip', function (e) {\n\t            e.stopImmediatePropagation();\n\t            if (_this.isClick) {\n\t              //_this.hide();\n\t              // _this.isClick = false;\n\t            } else {\n\t              _this.isClick = true;\n\t              if ((_this.options.disableHover || !_this.$element.attr('tabindex')) && !_this.isActive) {\n\t                _this.show();\n\t              }\n\t            }\n\t          });\n\t        } else {\n\t          this.$element.on('mousedown.zf.tooltip', function (e) {\n\t            e.stopImmediatePropagation();\n\t            _this.isClick = true;\n\t          });\n\t        }\n\t\n\t        if (!this.options.disableForTouch) {\n\t          this.$element.on('tap.zf.tooltip touchend.zf.tooltip', function (e) {\n\t            _this.isActive ? _this.hide() : _this.show();\n\t          });\n\t        }\n\t\n\t        this.$element.on({\n\t          // 'toggle.zf.trigger': this.toggle.bind(this),\n\t          // 'close.zf.trigger': this.hide.bind(this)\n\t          'close.zf.trigger': this.hide.bind(this)\n\t        });\n\t\n\t        this.$element.on('focus.zf.tooltip', function (e) {\n\t          isFocus = true;\n\t          if (_this.isClick) {\n\t            // If we're not showing open on clicks, we need to pretend a click-launched focus isn't\n\t            // a real focus, otherwise on hover and come back we get bad behavior\n\t            if (!_this.options.clickOpen) {\n\t              isFocus = false;\n\t            }\n\t            return false;\n\t          } else {\n\t            _this.show();\n\t          }\n\t        }).on('focusout.zf.tooltip', function (e) {\n\t          isFocus = false;\n\t          _this.isClick = false;\n\t          _this.hide();\n\t        }).on('resizeme.zf.trigger', function () {\n\t          if (_this.isActive) {\n\t            _this._setPosition();\n\t          }\n\t        });\n\t      }\n\t\n\t      /**\n\t       * adds a toggle method, in addition to the static show() & hide() functions\n\t       * @function\n\t       */\n\t\n\t    }, {\n\t      key: 'toggle',\n\t      value: function toggle() {\n\t        if (this.isActive) {\n\t          this.hide();\n\t        } else {\n\t          this.show();\n\t        }\n\t      }\n\t\n\t      /**\n\t       * Destroys an instance of tooltip, removes template element from the view.\n\t       * @function\n\t       */\n\t\n\t    }, {\n\t      key: 'destroy',\n\t      value: function destroy() {\n\t        this.$element.attr('title', this.template.text()).off('.zf.trigger .zf.tooltip').removeClass('has-tip top right left').removeAttr('aria-describedby aria-haspopup data-disable-hover data-resize data-toggle data-tooltip data-yeti-box');\n\t\n\t        this.template.remove();\n\t\n\t        Foundation.unregisterPlugin(this);\n\t      }\n\t    }]);\n\t\n\t    return Tooltip;\n\t  }();\n\t\n\t  Tooltip.defaults = {\n\t    disableForTouch: false,\n\t    /**\n\t     * Time, in ms, before a tooltip should open on hover.\n\t     * @option\n\t     * @example 200\n\t     */\n\t    hoverDelay: 200,\n\t    /**\n\t     * Time, in ms, a tooltip should take to fade into view.\n\t     * @option\n\t     * @example 150\n\t     */\n\t    fadeInDuration: 150,\n\t    /**\n\t     * Time, in ms, a tooltip should take to fade out of view.\n\t     * @option\n\t     * @example 150\n\t     */\n\t    fadeOutDuration: 150,\n\t    /**\n\t     * Disables hover events from opening the tooltip if set to true\n\t     * @option\n\t     * @example false\n\t     */\n\t    disableHover: false,\n\t    /**\n\t     * Optional addtional classes to apply to the tooltip template on init.\n\t     * @option\n\t     * @example 'my-cool-tip-class'\n\t     */\n\t    templateClasses: '',\n\t    /**\n\t     * Non-optional class added to tooltip templates. Foundation default is 'tooltip'.\n\t     * @option\n\t     * @example 'tooltip'\n\t     */\n\t    tooltipClass: 'tooltip',\n\t    /**\n\t     * Class applied to the tooltip anchor element.\n\t     * @option\n\t     * @example 'has-tip'\n\t     */\n\t    triggerClass: 'has-tip',\n\t    /**\n\t     * Minimum breakpoint size at which to open the tooltip.\n\t     * @option\n\t     * @example 'small'\n\t     */\n\t    showOn: 'small',\n\t    /**\n\t     * Custom template to be used to generate markup for tooltip.\n\t     * @option\n\t     * @example '&lt;div class=\"tooltip\"&gt;&lt;/div&gt;'\n\t     */\n\t    template: '',\n\t    /**\n\t     * Text displayed in the tooltip template on open.\n\t     * @option\n\t     * @example 'Some cool space fact here.'\n\t     */\n\t    tipText: '',\n\t    touchCloseText: 'Tap to close.',\n\t    /**\n\t     * Allows the tooltip to remain open if triggered with a click or touch event.\n\t     * @option\n\t     * @example true\n\t     */\n\t    clickOpen: true,\n\t    /**\n\t     * Additional positioning classes, set by the JS\n\t     * @option\n\t     * @example 'top'\n\t     */\n\t    positionClass: '',\n\t    /**\n\t     * Distance, in pixels, the template should push away from the anchor on the Y axis.\n\t     * @option\n\t     * @example 10\n\t     */\n\t    vOffset: 10,\n\t    /**\n\t     * Distance, in pixels, the template should push away from the anchor on the X axis, if aligned to a side.\n\t     * @option\n\t     * @example 12\n\t     */\n\t    hOffset: 12,\n\t    /**\n\t    * Allow HTML in tooltip. Warning: If you are loading user-generated content into tooltips,\n\t    * allowing HTML may open yourself up to XSS attacks.\n\t    * @option\n\t    * @example false\n\t    */\n\t    allowHtml: false\n\t  };\n\t\n\t  /**\n\t   * TODO utilize resize event trigger\n\t   */\n\t\n\t  // Window exports\n\t  Foundation.plugin(Tooltip, 'Tooltip');\n\t}(jQuery);\n\t'use strict';\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\t!function ($) {\n\t\n\t  /**\n\t   * ResponsiveAccordionTabs module.\n\t   * @module foundation.responsiveAccordionTabs\n\t   * @requires foundation.util.keyboard\n\t   * @requires foundation.util.timerAndImageLoader\n\t   * @requires foundation.util.motion\n\t   * @requires foundation.accordion\n\t   * @requires foundation.tabs\n\t   */\n\t\n\t  var ResponsiveAccordionTabs = function () {\n\t    /**\n\t     * Creates a new instance of a responsive accordion tabs.\n\t     * @class\n\t     * @fires ResponsiveAccordionTabs#init\n\t     * @param {jQuery} element - jQuery object to make into a dropdown menu.\n\t     * @param {Object} options - Overrides to the default plugin settings.\n\t     */\n\t    function ResponsiveAccordionTabs(element, options) {\n\t      _classCallCheck(this, ResponsiveAccordionTabs);\n\t\n\t      this.$element = $(element);\n\t      this.options = $.extend({}, this.$element.data(), options);\n\t      this.rules = this.$element.data('responsive-accordion-tabs');\n\t      this.currentMq = null;\n\t      this.currentPlugin = null;\n\t      if (!this.$element.attr('id')) {\n\t        this.$element.attr('id', Foundation.GetYoDigits(6, 'responsiveaccordiontabs'));\n\t      };\n\t\n\t      this._init();\n\t      this._events();\n\t\n\t      Foundation.registerPlugin(this, 'ResponsiveAccordionTabs');\n\t    }\n\t\n\t    /**\n\t     * Initializes the Menu by parsing the classes from the 'data-responsive-accordion-tabs' attribute on the element.\n\t     * @function\n\t     * @private\n\t     */\n\t\n\t\n\t    _createClass(ResponsiveAccordionTabs, [{\n\t      key: '_init',\n\t      value: function _init() {\n\t        // The first time an Interchange plugin is initialized, this.rules is converted from a string of \"classes\" to an object of rules\n\t        if (typeof this.rules === 'string') {\n\t          var rulesTree = {};\n\t\n\t          // Parse rules from \"classes\" pulled from data attribute\n\t          var rules = this.rules.split(' ');\n\t\n\t          // Iterate through every rule found\n\t          for (var i = 0; i < rules.length; i++) {\n\t            var rule = rules[i].split('-');\n\t            var ruleSize = rule.length > 1 ? rule[0] : 'small';\n\t            var rulePlugin = rule.length > 1 ? rule[1] : rule[0];\n\t\n\t            if (MenuPlugins[rulePlugin] !== null) {\n\t              rulesTree[ruleSize] = MenuPlugins[rulePlugin];\n\t            }\n\t          }\n\t\n\t          this.rules = rulesTree;\n\t        }\n\t\n\t        this._getAllOptions();\n\t\n\t        if (!$.isEmptyObject(this.rules)) {\n\t          this._checkMediaQueries();\n\t        }\n\t      }\n\t    }, {\n\t      key: '_getAllOptions',\n\t      value: function _getAllOptions() {\n\t        //get all defaults and options\n\t        var _this = this;\n\t        _this.allOptions = {};\n\t        for (var key in MenuPlugins) {\n\t          if (MenuPlugins.hasOwnProperty(key)) {\n\t            var obj = MenuPlugins[key];\n\t            try {\n\t              var dummyPlugin = $('<ul></ul>');\n\t              var tmpPlugin = new obj.plugin(dummyPlugin, _this.options);\n\t              for (var keyKey in tmpPlugin.options) {\n\t                if (tmpPlugin.options.hasOwnProperty(keyKey) && keyKey !== 'zfPlugin') {\n\t                  var objObj = tmpPlugin.options[keyKey];\n\t                  _this.allOptions[keyKey] = objObj;\n\t                }\n\t              }\n\t              tmpPlugin.destroy();\n\t            } catch (e) {}\n\t          }\n\t        }\n\t      }\n\t\n\t      /**\n\t       * Initializes events for the Menu.\n\t       * @function\n\t       * @private\n\t       */\n\t\n\t    }, {\n\t      key: '_events',\n\t      value: function _events() {\n\t        var _this = this;\n\t\n\t        $(window).on('changed.zf.mediaquery', function () {\n\t          _this._checkMediaQueries();\n\t        });\n\t      }\n\t\n\t      /**\n\t       * Checks the current screen width against available media queries. If the media query has changed, and the plugin needed has changed, the plugins will swap out.\n\t       * @function\n\t       * @private\n\t       */\n\t\n\t    }, {\n\t      key: '_checkMediaQueries',\n\t      value: function _checkMediaQueries() {\n\t        var matchedMq,\n\t            _this = this;\n\t        // Iterate through each rule and find the last matching rule\n\t        $.each(this.rules, function (key) {\n\t          if (Foundation.MediaQuery.atLeast(key)) {\n\t            matchedMq = key;\n\t          }\n\t        });\n\t\n\t        // No match? No dice\n\t        if (!matchedMq) return;\n\t\n\t        // Plugin already initialized? We good\n\t        if (this.currentPlugin instanceof this.rules[matchedMq].plugin) return;\n\t\n\t        // Remove existing plugin-specific CSS classes\n\t        $.each(MenuPlugins, function (key, value) {\n\t          _this.$element.removeClass(value.cssClass);\n\t        });\n\t\n\t        // Add the CSS class for the new plugin\n\t        this.$element.addClass(this.rules[matchedMq].cssClass);\n\t\n\t        // Create an instance of the new plugin\n\t        if (this.currentPlugin) {\n\t          //don't know why but on nested elements data zfPlugin get's lost\n\t          if (!this.currentPlugin.$element.data('zfPlugin') && this.storezfData) this.currentPlugin.$element.data('zfPlugin', this.storezfData);\n\t          this.currentPlugin.destroy();\n\t        }\n\t        this._handleMarkup(this.rules[matchedMq].cssClass);\n\t        this.currentPlugin = new this.rules[matchedMq].plugin(this.$element, {});\n\t        this.storezfData = this.currentPlugin.$element.data('zfPlugin');\n\t      }\n\t    }, {\n\t      key: '_handleMarkup',\n\t      value: function _handleMarkup(toSet) {\n\t        var _this = this,\n\t            fromString = 'accordion';\n\t        var $panels = $('[data-tabs-content=' + this.$element.attr('id') + ']');\n\t        if ($panels.length) fromString = 'tabs';\n\t        if (fromString === toSet) {\n\t          return;\n\t        };\n\t\n\t        var tabsTitle = _this.allOptions.linkClass ? _this.allOptions.linkClass : 'tabs-title';\n\t        var tabsPanel = _this.allOptions.panelClass ? _this.allOptions.panelClass : 'tabs-panel';\n\t\n\t        this.$element.removeAttr('role');\n\t        var $liHeads = this.$element.children('.' + tabsTitle + ',[data-accordion-item]').removeClass(tabsTitle).removeClass('accordion-item').removeAttr('data-accordion-item');\n\t        var $liHeadsA = $liHeads.children('a').removeClass('accordion-title');\n\t\n\t        if (fromString === 'tabs') {\n\t          $panels = $panels.children('.' + tabsPanel).removeClass(tabsPanel).removeAttr('role').removeAttr('aria-hidden').removeAttr('aria-labelledby');\n\t          $panels.children('a').removeAttr('role').removeAttr('aria-controls').removeAttr('aria-selected');\n\t        } else {\n\t          $panels = $liHeads.children('[data-tab-content]').removeClass('accordion-content');\n\t        };\n\t\n\t        $panels.css({ display: '', visibility: '' });\n\t        $liHeads.css({ display: '', visibility: '' });\n\t        if (toSet === 'accordion') {\n\t          $panels.each(function (key, value) {\n\t            $(value).appendTo($liHeads.get(key)).addClass('accordion-content').attr('data-tab-content', '').removeClass('is-active').css({ height: '' });\n\t            $('[data-tabs-content=' + _this.$element.attr('id') + ']').after('<div id=\"tabs-placeholder-' + _this.$element.attr('id') + '\"></div>').remove();\n\t            $liHeads.addClass('accordion-item').attr('data-accordion-item', '');\n\t            $liHeadsA.addClass('accordion-title');\n\t          });\n\t        } else if (toSet === 'tabs') {\n\t          var $tabsContent = $('[data-tabs-content=' + _this.$element.attr('id') + ']');\n\t          var $placeholder = $('#tabs-placeholder-' + _this.$element.attr('id'));\n\t          if ($placeholder.length) {\n\t            $tabsContent = $('<div class=\"tabs-content\"></div>').insertAfter($placeholder).attr('data-tabs-content', _this.$element.attr('id'));\n\t            $placeholder.remove();\n\t          } else {\n\t            $tabsContent = $('<div class=\"tabs-content\"></div>').insertAfter(_this.$element).attr('data-tabs-content', _this.$element.attr('id'));\n\t          };\n\t          $panels.each(function (key, value) {\n\t            var tempValue = $(value).appendTo($tabsContent).addClass(tabsPanel);\n\t            var hash = $liHeadsA.get(key).hash.slice(1);\n\t            var id = $(value).attr('id') || Foundation.GetYoDigits(6, 'accordion');\n\t            if (hash !== id) {\n\t              if (hash !== '') {\n\t                $(value).attr('id', hash);\n\t              } else {\n\t                hash = id;\n\t                $(value).attr('id', hash);\n\t                $($liHeadsA.get(key)).attr('href', $($liHeadsA.get(key)).attr('href').replace('#', '') + '#' + hash);\n\t              };\n\t            };\n\t            var isActive = $($liHeads.get(key)).hasClass('is-active');\n\t            if (isActive) {\n\t              tempValue.addClass('is-active');\n\t            };\n\t          });\n\t          $liHeads.addClass(tabsTitle);\n\t        };\n\t      }\n\t\n\t      /**\n\t       * Destroys the instance of the current plugin on this element, as well as the window resize handler that switches the plugins out.\n\t       * @function\n\t       */\n\t\n\t    }, {\n\t      key: 'destroy',\n\t      value: function destroy() {\n\t        if (this.currentPlugin) this.currentPlugin.destroy();\n\t        $(window).off('.zf.ResponsiveAccordionTabs');\n\t        Foundation.unregisterPlugin(this);\n\t      }\n\t    }]);\n\t\n\t    return ResponsiveAccordionTabs;\n\t  }();\n\t\n\t  ResponsiveAccordionTabs.defaults = {};\n\t\n\t  // The plugin matches the plugin classes with these plugin instances.\n\t  var MenuPlugins = {\n\t    tabs: {\n\t      cssClass: 'tabs',\n\t      plugin: Foundation._plugins.tabs || null\n\t    },\n\t    accordion: {\n\t      cssClass: 'accordion',\n\t      plugin: Foundation._plugins.accordion || null\n\t    }\n\t  };\n\t\n\t  // Window exports\n\t  Foundation.plugin(ResponsiveAccordionTabs, 'ResponsiveAccordionTabs');\n\t}(jQuery);\n\t/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)))\n\n/***/ },\n\n/***/ 95:\n/***/ function(module, exports) {\n\n\t// removed by extract-text-webpack-plugin\n\n/***/ },\n\n/***/ 97:\n/***/ function(module, exports) {\n\n\t// removed by extract-text-webpack-plugin\n\n/***/ }\n\n});\n\n\n// WEBPACK FOOTER //\n// main.min.js","/* Common JS functionality, loaded for every page */\n\nrequire('../styles/app.scss')\nrequire('jquery-ui/themes/base/datepicker.css')\n\nimport $ from 'jquery'\nimport 'foundation-sites/dist/js/foundation'\n\n$(document).ready(() => {\n\n    // Radio links\n    $(\"[data-radio-link]\").click(e => {\n        const slug = e.currentTarget.dataset.radioLink\n        window.location.href = playsPath + \"?radio=\" + slug\n        e.preventDefault()\n    })\n\n    // Kickstart Foundation JS\n    $(document).foundation()\n})\n\n/* global window document playsPath */\n\n\n\n// WEBPACK FOOTER //\n// ./ui/scripts/main.jsx","!function ($) {\n\n  \"use strict\";\n\n  var FOUNDATION_VERSION = '6.3.0';\n\n  // Global Foundation object\n  // This is attached to the window, or used as a module for AMD/Browserify\n  var Foundation = {\n    version: FOUNDATION_VERSION,\n\n    /**\n     * Stores initialized plugins.\n     */\n    _plugins: {},\n\n    /**\n     * Stores generated unique ids for plugin instances\n     */\n    _uuids: [],\n\n    /**\n     * Returns a boolean for RTL support\n     */\n    rtl: function () {\n      return $('html').attr('dir') === 'rtl';\n    },\n    /**\n     * Defines a Foundation plugin, adding it to the `Foundation` namespace and the list of plugins to initialize when reflowing.\n     * @param {Object} plugin - The constructor of the plugin.\n     */\n    plugin: function (plugin, name) {\n      // Object key to use when adding to global Foundation object\n      // Examples: Foundation.Reveal, Foundation.OffCanvas\n      var className = name || functionName(plugin);\n      // Object key to use when storing the plugin, also used to create the identifying data attribute for the plugin\n      // Examples: data-reveal, data-off-canvas\n      var attrName = hyphenate(className);\n\n      // Add to the Foundation object and the plugins list (for reflowing)\n      this._plugins[attrName] = this[className] = plugin;\n    },\n    /**\n     * @function\n     * Populates the _uuids array with pointers to each individual plugin instance.\n     * Adds the `zfPlugin` data-attribute to programmatically created plugins to allow use of $(selector).foundation(method) calls.\n     * Also fires the initialization event for each plugin, consolidating repetitive code.\n     * @param {Object} plugin - an instance of a plugin, usually `this` in context.\n     * @param {String} name - the name of the plugin, passed as a camelCased string.\n     * @fires Plugin#init\n     */\n    registerPlugin: function (plugin, name) {\n      var pluginName = name ? hyphenate(name) : functionName(plugin.constructor).toLowerCase();\n      plugin.uuid = this.GetYoDigits(6, pluginName);\n\n      if (!plugin.$element.attr('data-' + pluginName)) {\n        plugin.$element.attr('data-' + pluginName, plugin.uuid);\n      }\n      if (!plugin.$element.data('zfPlugin')) {\n        plugin.$element.data('zfPlugin', plugin);\n      }\n      /**\n       * Fires when the plugin has initialized.\n       * @event Plugin#init\n       */\n      plugin.$element.trigger('init.zf.' + pluginName);\n\n      this._uuids.push(plugin.uuid);\n\n      return;\n    },\n    /**\n     * @function\n     * Removes the plugins uuid from the _uuids array.\n     * Removes the zfPlugin data attribute, as well as the data-plugin-name attribute.\n     * Also fires the destroyed event for the plugin, consolidating repetitive code.\n     * @param {Object} plugin - an instance of a plugin, usually `this` in context.\n     * @fires Plugin#destroyed\n     */\n    unregisterPlugin: function (plugin) {\n      var pluginName = hyphenate(functionName(plugin.$element.data('zfPlugin').constructor));\n\n      this._uuids.splice(this._uuids.indexOf(plugin.uuid), 1);\n      plugin.$element.removeAttr('data-' + pluginName).removeData('zfPlugin')\n      /**\n       * Fires when the plugin has been destroyed.\n       * @event Plugin#destroyed\n       */\n      .trigger('destroyed.zf.' + pluginName);\n      for (var prop in plugin) {\n        plugin[prop] = null; //clean up script to prep for garbage collection.\n      }\n      return;\n    },\n\n    /**\n     * @function\n     * Causes one or more active plugins to re-initialize, resetting event listeners, recalculating positions, etc.\n     * @param {String} plugins - optional string of an individual plugin key, attained by calling `$(element).data('pluginName')`, or string of a plugin class i.e. `'dropdown'`\n     * @default If no argument is passed, reflow all currently active plugins.\n     */\n    reInit: function (plugins) {\n      var isJQ = plugins instanceof $;\n      try {\n        if (isJQ) {\n          plugins.each(function () {\n            $(this).data('zfPlugin')._init();\n          });\n        } else {\n          var type = typeof plugins,\n              _this = this,\n              fns = {\n            'object': function (plgs) {\n              plgs.forEach(function (p) {\n                p = hyphenate(p);\n                $('[data-' + p + ']').foundation('_init');\n              });\n            },\n            'string': function () {\n              plugins = hyphenate(plugins);\n              $('[data-' + plugins + ']').foundation('_init');\n            },\n            'undefined': function () {\n              this['object'](Object.keys(_this._plugins));\n            }\n          };\n          fns[type](plugins);\n        }\n      } catch (err) {\n        console.error(err);\n      } finally {\n        return plugins;\n      }\n    },\n\n    /**\n     * returns a random base-36 uid with namespacing\n     * @function\n     * @param {Number} length - number of random base-36 digits desired. Increase for more random strings.\n     * @param {String} namespace - name of plugin to be incorporated in uid, optional.\n     * @default {String} '' - if no plugin name is provided, nothing is appended to the uid.\n     * @returns {String} - unique id\n     */\n    GetYoDigits: function (length, namespace) {\n      length = length || 6;\n      return Math.round(Math.pow(36, length + 1) - Math.random() * Math.pow(36, length)).toString(36).slice(1) + (namespace ? '-' + namespace : '');\n    },\n    /**\n     * Initialize plugins on any elements within `elem` (and `elem` itself) that aren't already initialized.\n     * @param {Object} elem - jQuery object containing the element to check inside. Also checks the element itself, unless it's the `document` object.\n     * @param {String|Array} plugins - A list of plugins to initialize. Leave this out to initialize everything.\n     */\n    reflow: function (elem, plugins) {\n\n      // If plugins is undefined, just grab everything\n      if (typeof plugins === 'undefined') {\n        plugins = Object.keys(this._plugins);\n      }\n      // If plugins is a string, convert it to an array with one item\n      else if (typeof plugins === 'string') {\n          plugins = [plugins];\n        }\n\n      var _this = this;\n\n      // Iterate through each plugin\n      $.each(plugins, function (i, name) {\n        // Get the current plugin\n        var plugin = _this._plugins[name];\n\n        // Localize the search to all elements inside elem, as well as elem itself, unless elem === document\n        var $elem = $(elem).find('[data-' + name + ']').addBack('[data-' + name + ']');\n\n        // For each plugin found, initialize it\n        $elem.each(function () {\n          var $el = $(this),\n              opts = {};\n          // Don't double-dip on plugins\n          if ($el.data('zfPlugin')) {\n            console.warn(\"Tried to initialize \" + name + \" on an element that already has a Foundation plugin.\");\n            return;\n          }\n\n          if ($el.attr('data-options')) {\n            var thing = $el.attr('data-options').split(';').forEach(function (e, i) {\n              var opt = e.split(':').map(function (el) {\n                return el.trim();\n              });\n              if (opt[0]) opts[opt[0]] = parseValue(opt[1]);\n            });\n          }\n          try {\n            $el.data('zfPlugin', new plugin($(this), opts));\n          } catch (er) {\n            console.error(er);\n          } finally {\n            return;\n          }\n        });\n      });\n    },\n    getFnName: functionName,\n    transitionend: function ($elem) {\n      var transitions = {\n        'transition': 'transitionend',\n        'WebkitTransition': 'webkitTransitionEnd',\n        'MozTransition': 'transitionend',\n        'OTransition': 'otransitionend'\n      };\n      var elem = document.createElement('div'),\n          end;\n\n      for (var t in transitions) {\n        if (typeof elem.style[t] !== 'undefined') {\n          end = transitions[t];\n        }\n      }\n      if (end) {\n        return end;\n      } else {\n        end = setTimeout(function () {\n          $elem.triggerHandler('transitionend', [$elem]);\n        }, 1);\n        return 'transitionend';\n      }\n    }\n  };\n\n  Foundation.util = {\n    /**\n     * Function for applying a debounce effect to a function call.\n     * @function\n     * @param {Function} func - Function to be called at end of timeout.\n     * @param {Number} delay - Time in ms to delay the call of `func`.\n     * @returns function\n     */\n    throttle: function (func, delay) {\n      var timer = null;\n\n      return function () {\n        var context = this,\n            args = arguments;\n\n        if (timer === null) {\n          timer = setTimeout(function () {\n            func.apply(context, args);\n            timer = null;\n          }, delay);\n        }\n      };\n    }\n  };\n\n  // TODO: consider not making this a jQuery function\n  // TODO: need way to reflow vs. re-initialize\n  /**\n   * The Foundation jQuery method.\n   * @param {String|Array} method - An action to perform on the current jQuery object.\n   */\n  var foundation = function (method) {\n    var type = typeof method,\n        $meta = $('meta.foundation-mq'),\n        $noJS = $('.no-js');\n\n    if (!$meta.length) {\n      $('<meta class=\"foundation-mq\">').appendTo(document.head);\n    }\n    if ($noJS.length) {\n      $noJS.removeClass('no-js');\n    }\n\n    if (type === 'undefined') {\n      //needs to initialize the Foundation object, or an individual plugin.\n      Foundation.MediaQuery._init();\n      Foundation.reflow(this);\n    } else if (type === 'string') {\n      //an individual method to invoke on a plugin or group of plugins\n      var args = Array.prototype.slice.call(arguments, 1); //collect all the arguments, if necessary\n      var plugClass = this.data('zfPlugin'); //determine the class of plugin\n\n      if (plugClass !== undefined && plugClass[method] !== undefined) {\n        //make sure both the class and method exist\n        if (this.length === 1) {\n          //if there's only one, call it directly.\n          plugClass[method].apply(plugClass, args);\n        } else {\n          this.each(function (i, el) {\n            //otherwise loop through the jQuery collection and invoke the method on each\n            plugClass[method].apply($(el).data('zfPlugin'), args);\n          });\n        }\n      } else {\n        //error for no class or no method\n        throw new ReferenceError(\"We're sorry, '\" + method + \"' is not an available method for \" + (plugClass ? functionName(plugClass) : 'this element') + '.');\n      }\n    } else {\n      //error for invalid argument type\n      throw new TypeError('We\\'re sorry, ' + type + ' is not a valid parameter. You must use a string representing the method you wish to invoke.');\n    }\n    return this;\n  };\n\n  window.Foundation = Foundation;\n  $.fn.foundation = foundation;\n\n  // Polyfill for requestAnimationFrame\n  (function () {\n    if (!Date.now || !window.Date.now) window.Date.now = Date.now = function () {\n      return new Date().getTime();\n    };\n\n    var vendors = ['webkit', 'moz'];\n    for (var i = 0; i < vendors.length && !window.requestAnimationFrame; ++i) {\n      var vp = vendors[i];\n      window.requestAnimationFrame = window[vp + 'RequestAnimationFrame'];\n      window.cancelAnimationFrame = window[vp + 'CancelAnimationFrame'] || window[vp + 'CancelRequestAnimationFrame'];\n    }\n    if (/iP(ad|hone|od).*OS 6/.test(window.navigator.userAgent) || !window.requestAnimationFrame || !window.cancelAnimationFrame) {\n      var lastTime = 0;\n      window.requestAnimationFrame = function (callback) {\n        var now = Date.now();\n        var nextTime = Math.max(lastTime + 16, now);\n        return setTimeout(function () {\n          callback(lastTime = nextTime);\n        }, nextTime - now);\n      };\n      window.cancelAnimationFrame = clearTimeout;\n    }\n    /**\n     * Polyfill for performance.now, required by rAF\n     */\n    if (!window.performance || !window.performance.now) {\n      window.performance = {\n        start: Date.now(),\n        now: function () {\n          return Date.now() - this.start;\n        }\n      };\n    }\n  })();\n  if (!Function.prototype.bind) {\n    Function.prototype.bind = function (oThis) {\n      if (typeof this !== 'function') {\n        // closest thing possible to the ECMAScript 5\n        // internal IsCallable function\n        throw new TypeError('Function.prototype.bind - what is trying to be bound is not callable');\n      }\n\n      var aArgs = Array.prototype.slice.call(arguments, 1),\n          fToBind = this,\n          fNOP = function () {},\n          fBound = function () {\n        return fToBind.apply(this instanceof fNOP ? this : oThis, aArgs.concat(Array.prototype.slice.call(arguments)));\n      };\n\n      if (this.prototype) {\n        // native functions don't have a prototype\n        fNOP.prototype = this.prototype;\n      }\n      fBound.prototype = new fNOP();\n\n      return fBound;\n    };\n  }\n  // Polyfill to get the name of a function in IE9\n  function functionName(fn) {\n    if (Function.prototype.name === undefined) {\n      var funcNameRegex = /function\\s([^(]{1,})\\(/;\n      var results = funcNameRegex.exec(fn.toString());\n      return results && results.length > 1 ? results[1].trim() : \"\";\n    } else if (fn.prototype === undefined) {\n      return fn.constructor.name;\n    } else {\n      return fn.prototype.constructor.name;\n    }\n  }\n  function parseValue(str) {\n    if ('true' === str) return true;else if ('false' === str) return false;else if (!isNaN(str * 1)) return parseFloat(str);\n    return str;\n  }\n  // Convert PascalCase to kebab-case\n  // Thank you: http://stackoverflow.com/a/8955580\n  function hyphenate(str) {\n    return str.replace(/([a-z])([A-Z])/g, '$1-$2').toLowerCase();\n  }\n}(jQuery);\n'use strict';\n\n!function ($) {\n\n  Foundation.Box = {\n    ImNotTouchingYou: ImNotTouchingYou,\n    GetDimensions: GetDimensions,\n    GetOffsets: GetOffsets\n  };\n\n  /**\n   * Compares the dimensions of an element to a container and determines collision events with container.\n   * @function\n   * @param {jQuery} element - jQuery object to test for collisions.\n   * @param {jQuery} parent - jQuery object to use as bounding container.\n   * @param {Boolean} lrOnly - set to true to check left and right values only.\n   * @param {Boolean} tbOnly - set to true to check top and bottom values only.\n   * @default if no parent object passed, detects collisions with `window`.\n   * @returns {Boolean} - true if collision free, false if a collision in any direction.\n   */\n  function ImNotTouchingYou(element, parent, lrOnly, tbOnly) {\n    var eleDims = GetDimensions(element),\n        top,\n        bottom,\n        left,\n        right;\n\n    if (parent) {\n      var parDims = GetDimensions(parent);\n\n      bottom = eleDims.offset.top + eleDims.height <= parDims.height + parDims.offset.top;\n      top = eleDims.offset.top >= parDims.offset.top;\n      left = eleDims.offset.left >= parDims.offset.left;\n      right = eleDims.offset.left + eleDims.width <= parDims.width + parDims.offset.left;\n    } else {\n      bottom = eleDims.offset.top + eleDims.height <= eleDims.windowDims.height + eleDims.windowDims.offset.top;\n      top = eleDims.offset.top >= eleDims.windowDims.offset.top;\n      left = eleDims.offset.left >= eleDims.windowDims.offset.left;\n      right = eleDims.offset.left + eleDims.width <= eleDims.windowDims.width;\n    }\n\n    var allDirs = [bottom, top, left, right];\n\n    if (lrOnly) {\n      return left === right === true;\n    }\n\n    if (tbOnly) {\n      return top === bottom === true;\n    }\n\n    return allDirs.indexOf(false) === -1;\n  };\n\n  /**\n   * Uses native methods to return an object of dimension values.\n   * @function\n   * @param {jQuery || HTML} element - jQuery object or DOM element for which to get the dimensions. Can be any element other that document or window.\n   * @returns {Object} - nested object of integer pixel values\n   * TODO - if element is window, return only those values.\n   */\n  function GetDimensions(elem, test) {\n    elem = elem.length ? elem[0] : elem;\n\n    if (elem === window || elem === document) {\n      throw new Error(\"I'm sorry, Dave. I'm afraid I can't do that.\");\n    }\n\n    var rect = elem.getBoundingClientRect(),\n        parRect = elem.parentNode.getBoundingClientRect(),\n        winRect = document.body.getBoundingClientRect(),\n        winY = window.pageYOffset,\n        winX = window.pageXOffset;\n\n    return {\n      width: rect.width,\n      height: rect.height,\n      offset: {\n        top: rect.top + winY,\n        left: rect.left + winX\n      },\n      parentDims: {\n        width: parRect.width,\n        height: parRect.height,\n        offset: {\n          top: parRect.top + winY,\n          left: parRect.left + winX\n        }\n      },\n      windowDims: {\n        width: winRect.width,\n        height: winRect.height,\n        offset: {\n          top: winY,\n          left: winX\n        }\n      }\n    };\n  }\n\n  /**\n   * Returns an object of top and left integer pixel values for dynamically rendered elements,\n   * such as: Tooltip, Reveal, and Dropdown\n   * @function\n   * @param {jQuery} element - jQuery object for the element being positioned.\n   * @param {jQuery} anchor - jQuery object for the element's anchor point.\n   * @param {String} position - a string relating to the desired position of the element, relative to it's anchor\n   * @param {Number} vOffset - integer pixel value of desired vertical separation between anchor and element.\n   * @param {Number} hOffset - integer pixel value of desired horizontal separation between anchor and element.\n   * @param {Boolean} isOverflow - if a collision event is detected, sets to true to default the element to full width - any desired offset.\n   * TODO alter/rewrite to work with `em` values as well/instead of pixels\n   */\n  function GetOffsets(element, anchor, position, vOffset, hOffset, isOverflow) {\n    var $eleDims = GetDimensions(element),\n        $anchorDims = anchor ? GetDimensions(anchor) : null;\n\n    switch (position) {\n      case 'top':\n        return {\n          left: Foundation.rtl() ? $anchorDims.offset.left - $eleDims.width + $anchorDims.width : $anchorDims.offset.left,\n          top: $anchorDims.offset.top - ($eleDims.height + vOffset)\n        };\n        break;\n      case 'left':\n        return {\n          left: $anchorDims.offset.left - ($eleDims.width + hOffset),\n          top: $anchorDims.offset.top\n        };\n        break;\n      case 'right':\n        return {\n          left: $anchorDims.offset.left + $anchorDims.width + hOffset,\n          top: $anchorDims.offset.top\n        };\n        break;\n      case 'center top':\n        return {\n          left: $anchorDims.offset.left + $anchorDims.width / 2 - $eleDims.width / 2,\n          top: $anchorDims.offset.top - ($eleDims.height + vOffset)\n        };\n        break;\n      case 'center bottom':\n        return {\n          left: isOverflow ? hOffset : $anchorDims.offset.left + $anchorDims.width / 2 - $eleDims.width / 2,\n          top: $anchorDims.offset.top + $anchorDims.height + vOffset\n        };\n        break;\n      case 'center left':\n        return {\n          left: $anchorDims.offset.left - ($eleDims.width + hOffset),\n          top: $anchorDims.offset.top + $anchorDims.height / 2 - $eleDims.height / 2\n        };\n        break;\n      case 'center right':\n        return {\n          left: $anchorDims.offset.left + $anchorDims.width + hOffset + 1,\n          top: $anchorDims.offset.top + $anchorDims.height / 2 - $eleDims.height / 2\n        };\n        break;\n      case 'center':\n        return {\n          left: $eleDims.windowDims.offset.left + $eleDims.windowDims.width / 2 - $eleDims.width / 2,\n          top: $eleDims.windowDims.offset.top + $eleDims.windowDims.height / 2 - $eleDims.height / 2\n        };\n        break;\n      case 'reveal':\n        return {\n          left: ($eleDims.windowDims.width - $eleDims.width) / 2,\n          top: $eleDims.windowDims.offset.top + vOffset\n        };\n      case 'reveal full':\n        return {\n          left: $eleDims.windowDims.offset.left,\n          top: $eleDims.windowDims.offset.top\n        };\n        break;\n      case 'left bottom':\n        return {\n          left: $anchorDims.offset.left,\n          top: $anchorDims.offset.top + $anchorDims.height + vOffset\n        };\n        break;\n      case 'right bottom':\n        return {\n          left: $anchorDims.offset.left + $anchorDims.width + hOffset - $eleDims.width,\n          top: $anchorDims.offset.top + $anchorDims.height + vOffset\n        };\n        break;\n      default:\n        return {\n          left: Foundation.rtl() ? $anchorDims.offset.left - $eleDims.width + $anchorDims.width : $anchorDims.offset.left + hOffset,\n          top: $anchorDims.offset.top + $anchorDims.height + vOffset\n        };\n    }\n  }\n}(jQuery);\n/*******************************************\n *                                         *\n * This util was created by Marius Olbertz *\n * Please thank Marius on GitHub /owlbertz *\n * or the web http://www.mariusolbertz.de/ *\n *                                         *\n ******************************************/\n\n'use strict';\n\n!function ($) {\n\n  var keyCodes = {\n    9: 'TAB',\n    13: 'ENTER',\n    27: 'ESCAPE',\n    32: 'SPACE',\n    37: 'ARROW_LEFT',\n    38: 'ARROW_UP',\n    39: 'ARROW_RIGHT',\n    40: 'ARROW_DOWN'\n  };\n\n  var commands = {};\n\n  var Keyboard = {\n    keys: getKeyCodes(keyCodes),\n\n    /**\n     * Parses the (keyboard) event and returns a String that represents its key\n     * Can be used like Foundation.parseKey(event) === Foundation.keys.SPACE\n     * @param {Event} event - the event generated by the event handler\n     * @return String key - String that represents the key pressed\n     */\n    parseKey: function (event) {\n      var key = keyCodes[event.which || event.keyCode] || String.fromCharCode(event.which).toUpperCase();\n\n      // Remove un-printable characters, e.g. for `fromCharCode` calls for CTRL only events\n      key = key.replace(/\\W+/, '');\n\n      if (event.shiftKey) key = 'SHIFT_' + key;\n      if (event.ctrlKey) key = 'CTRL_' + key;\n      if (event.altKey) key = 'ALT_' + key;\n\n      // Remove trailing underscore, in case only modifiers were used (e.g. only `CTRL_ALT`)\n      key = key.replace(/_$/, '');\n\n      return key;\n    },\n\n\n    /**\n     * Handles the given (keyboard) event\n     * @param {Event} event - the event generated by the event handler\n     * @param {String} component - Foundation component's name, e.g. Slider or Reveal\n     * @param {Objects} functions - collection of functions that are to be executed\n     */\n    handleKey: function (event, component, functions) {\n      var commandList = commands[component],\n          keyCode = this.parseKey(event),\n          cmds,\n          command,\n          fn;\n\n      if (!commandList) return console.warn('Component not defined!');\n\n      if (typeof commandList.ltr === 'undefined') {\n        // this component does not differentiate between ltr and rtl\n        cmds = commandList; // use plain list\n      } else {\n        // merge ltr and rtl: if document is rtl, rtl overwrites ltr and vice versa\n        if (Foundation.rtl()) cmds = $.extend({}, commandList.ltr, commandList.rtl);else cmds = $.extend({}, commandList.rtl, commandList.ltr);\n      }\n      command = cmds[keyCode];\n\n      fn = functions[command];\n      if (fn && typeof fn === 'function') {\n        // execute function  if exists\n        var returnValue = fn.apply();\n        if (functions.handled || typeof functions.handled === 'function') {\n          // execute function when event was handled\n          functions.handled(returnValue);\n        }\n      } else {\n        if (functions.unhandled || typeof functions.unhandled === 'function') {\n          // execute function when event was not handled\n          functions.unhandled();\n        }\n      }\n    },\n\n\n    /**\n     * Finds all focusable elements within the given `$element`\n     * @param {jQuery} $element - jQuery object to search within\n     * @return {jQuery} $focusable - all focusable elements within `$element`\n     */\n    findFocusable: function ($element) {\n      if (!$element) {\n        return false;\n      }\n      return $element.find('a[href], area[href], input:not([disabled]), select:not([disabled]), textarea:not([disabled]), button:not([disabled]), iframe, object, embed, *[tabindex], *[contenteditable]').filter(function () {\n        if (!$(this).is(':visible') || $(this).attr('tabindex') < 0) {\n          return false;\n        } //only have visible elements and those that have a tabindex greater or equal 0\n        return true;\n      });\n    },\n\n\n    /**\n     * Returns the component name name\n     * @param {Object} component - Foundation component, e.g. Slider or Reveal\n     * @return String componentName\n     */\n\n    register: function (componentName, cmds) {\n      commands[componentName] = cmds;\n    },\n\n\n    /**\n     * Traps the focus in the given element.\n     * @param  {jQuery} $element  jQuery object to trap the foucs into.\n     */\n    trapFocus: function ($element) {\n      var $focusable = Foundation.Keyboard.findFocusable($element),\n          $firstFocusable = $focusable.eq(0),\n          $lastFocusable = $focusable.eq(-1);\n\n      $element.on('keydown.zf.trapfocus', function (event) {\n        if (event.target === $lastFocusable[0] && Foundation.Keyboard.parseKey(event) === 'TAB') {\n          event.preventDefault();\n          $firstFocusable.focus();\n        } else if (event.target === $firstFocusable[0] && Foundation.Keyboard.parseKey(event) === 'SHIFT_TAB') {\n          event.preventDefault();\n          $lastFocusable.focus();\n        }\n      });\n    },\n\n    /**\n     * Releases the trapped focus from the given element.\n     * @param  {jQuery} $element  jQuery object to release the focus for.\n     */\n    releaseFocus: function ($element) {\n      $element.off('keydown.zf.trapfocus');\n    }\n  };\n\n  /*\n   * Constants for easier comparing.\n   * Can be used like Foundation.parseKey(event) === Foundation.keys.SPACE\n   */\n  function getKeyCodes(kcs) {\n    var k = {};\n    for (var kc in kcs) {\n      k[kcs[kc]] = kcs[kc];\n    }return k;\n  }\n\n  Foundation.Keyboard = Keyboard;\n}(jQuery);\n'use strict';\n\n!function ($) {\n\n  // Default set of media queries\n  var defaultQueries = {\n    'default': 'only screen',\n    landscape: 'only screen and (orientation: landscape)',\n    portrait: 'only screen and (orientation: portrait)',\n    retina: 'only screen and (-webkit-min-device-pixel-ratio: 2),' + 'only screen and (min--moz-device-pixel-ratio: 2),' + 'only screen and (-o-min-device-pixel-ratio: 2/1),' + 'only screen and (min-device-pixel-ratio: 2),' + 'only screen and (min-resolution: 192dpi),' + 'only screen and (min-resolution: 2dppx)'\n  };\n\n  var MediaQuery = {\n    queries: [],\n\n    current: '',\n\n    /**\n     * Initializes the media query helper, by extracting the breakpoint list from the CSS and activating the breakpoint watcher.\n     * @function\n     * @private\n     */\n    _init: function () {\n      var self = this;\n      var extractedStyles = $('.foundation-mq').css('font-family');\n      var namedQueries;\n\n      namedQueries = parseStyleToObject(extractedStyles);\n\n      for (var key in namedQueries) {\n        if (namedQueries.hasOwnProperty(key)) {\n          self.queries.push({\n            name: key,\n            value: 'only screen and (min-width: ' + namedQueries[key] + ')'\n          });\n        }\n      }\n\n      this.current = this._getCurrentSize();\n\n      this._watcher();\n    },\n\n\n    /**\n     * Checks if the screen is at least as wide as a breakpoint.\n     * @function\n     * @param {String} size - Name of the breakpoint to check.\n     * @returns {Boolean} `true` if the breakpoint matches, `false` if it's smaller.\n     */\n    atLeast: function (size) {\n      var query = this.get(size);\n\n      if (query) {\n        return window.matchMedia(query).matches;\n      }\n\n      return false;\n    },\n\n\n    /**\n     * Checks if the screen matches to a breakpoint.\n     * @function\n     * @param {String} size - Name of the breakpoint to check, either 'small only' or 'small'. Omitting 'only' falls back to using atLeast() method.\n     * @returns {Boolean} `true` if the breakpoint matches, `false` if it does not.\n     */\n    is: function (size) {\n      size = size.trim().split(' ');\n      if (size.length > 1 && size[1] === 'only') {\n        if (size[0] === this._getCurrentSize()) return true;\n      } else {\n        return this.atLeast(size[0]);\n      }\n      return false;\n    },\n\n\n    /**\n     * Gets the media query of a breakpoint.\n     * @function\n     * @param {String} size - Name of the breakpoint to get.\n     * @returns {String|null} - The media query of the breakpoint, or `null` if the breakpoint doesn't exist.\n     */\n    get: function (size) {\n      for (var i in this.queries) {\n        if (this.queries.hasOwnProperty(i)) {\n          var query = this.queries[i];\n          if (size === query.name) return query.value;\n        }\n      }\n\n      return null;\n    },\n\n\n    /**\n     * Gets the current breakpoint name by testing every breakpoint and returning the last one to match (the biggest one).\n     * @function\n     * @private\n     * @returns {String} Name of the current breakpoint.\n     */\n    _getCurrentSize: function () {\n      var matched;\n\n      for (var i = 0; i < this.queries.length; i++) {\n        var query = this.queries[i];\n\n        if (window.matchMedia(query.value).matches) {\n          matched = query;\n        }\n      }\n\n      if (typeof matched === 'object') {\n        return matched.name;\n      } else {\n        return matched;\n      }\n    },\n\n\n    /**\n     * Activates the breakpoint watcher, which fires an event on the window whenever the breakpoint changes.\n     * @function\n     * @private\n     */\n    _watcher: function () {\n      var _this = this;\n\n      $(window).on('resize.zf.mediaquery', function () {\n        var newSize = _this._getCurrentSize(),\n            currentSize = _this.current;\n\n        if (newSize !== currentSize) {\n          // Change the current media query\n          _this.current = newSize;\n\n          // Broadcast the media query change on the window\n          $(window).trigger('changed.zf.mediaquery', [newSize, currentSize]);\n        }\n      });\n    }\n  };\n\n  Foundation.MediaQuery = MediaQuery;\n\n  // matchMedia() polyfill - Test a CSS media type/query in JS.\n  // Authors & copyright (c) 2012: Scott Jehl, Paul Irish, Nicholas Zakas, David Knight. Dual MIT/BSD license\n  window.matchMedia || (window.matchMedia = function () {\n    'use strict';\n\n    // For browsers that support matchMedium api such as IE 9 and webkit\n\n    var styleMedia = window.styleMedia || window.media;\n\n    // For those that don't support matchMedium\n    if (!styleMedia) {\n      var style = document.createElement('style'),\n          script = document.getElementsByTagName('script')[0],\n          info = null;\n\n      style.type = 'text/css';\n      style.id = 'matchmediajs-test';\n\n      script && script.parentNode && script.parentNode.insertBefore(style, script);\n\n      // 'style.currentStyle' is used by IE <= 8 and 'window.getComputedStyle' for all other browsers\n      info = 'getComputedStyle' in window && window.getComputedStyle(style, null) || style.currentStyle;\n\n      styleMedia = {\n        matchMedium: function (media) {\n          var text = '@media ' + media + '{ #matchmediajs-test { width: 1px; } }';\n\n          // 'style.styleSheet' is used by IE <= 8 and 'style.textContent' for all other browsers\n          if (style.styleSheet) {\n            style.styleSheet.cssText = text;\n          } else {\n            style.textContent = text;\n          }\n\n          // Test if media query is true or false\n          return info.width === '1px';\n        }\n      };\n    }\n\n    return function (media) {\n      return {\n        matches: styleMedia.matchMedium(media || 'all'),\n        media: media || 'all'\n      };\n    };\n  }());\n\n  // Thank you: https://github.com/sindresorhus/query-string\n  function parseStyleToObject(str) {\n    var styleObject = {};\n\n    if (typeof str !== 'string') {\n      return styleObject;\n    }\n\n    str = str.trim().slice(1, -1); // browsers re-quote string style values\n\n    if (!str) {\n      return styleObject;\n    }\n\n    styleObject = str.split('&').reduce(function (ret, param) {\n      var parts = param.replace(/\\+/g, ' ').split('=');\n      var key = parts[0];\n      var val = parts[1];\n      key = decodeURIComponent(key);\n\n      // missing `=` should be `null`:\n      // http://w3.org/TR/2012/WD-url-20120524/#collect-url-parameters\n      val = val === undefined ? null : decodeURIComponent(val);\n\n      if (!ret.hasOwnProperty(key)) {\n        ret[key] = val;\n      } else if (Array.isArray(ret[key])) {\n        ret[key].push(val);\n      } else {\n        ret[key] = [ret[key], val];\n      }\n      return ret;\n    }, {});\n\n    return styleObject;\n  }\n\n  Foundation.MediaQuery = MediaQuery;\n}(jQuery);\n'use strict';\n\n!function ($) {\n\n  /**\n   * Motion module.\n   * @module foundation.motion\n   */\n\n  var initClasses = ['mui-enter', 'mui-leave'];\n  var activeClasses = ['mui-enter-active', 'mui-leave-active'];\n\n  var Motion = {\n    animateIn: function (element, animation, cb) {\n      animate(true, element, animation, cb);\n    },\n\n    animateOut: function (element, animation, cb) {\n      animate(false, element, animation, cb);\n    }\n  };\n\n  function Move(duration, elem, fn) {\n    var anim,\n        prog,\n        start = null;\n    // console.log('called');\n\n    if (duration === 0) {\n      fn.apply(elem);\n      elem.trigger('finished.zf.animate', [elem]).triggerHandler('finished.zf.animate', [elem]);\n      return;\n    }\n\n    function move(ts) {\n      if (!start) start = ts;\n      // console.log(start, ts);\n      prog = ts - start;\n      fn.apply(elem);\n\n      if (prog < duration) {\n        anim = window.requestAnimationFrame(move, elem);\n      } else {\n        window.cancelAnimationFrame(anim);\n        elem.trigger('finished.zf.animate', [elem]).triggerHandler('finished.zf.animate', [elem]);\n      }\n    }\n    anim = window.requestAnimationFrame(move);\n  }\n\n  /**\n   * Animates an element in or out using a CSS transition class.\n   * @function\n   * @private\n   * @param {Boolean} isIn - Defines if the animation is in or out.\n   * @param {Object} element - jQuery or HTML object to animate.\n   * @param {String} animation - CSS class to use.\n   * @param {Function} cb - Callback to run when animation is finished.\n   */\n  function animate(isIn, element, animation, cb) {\n    element = $(element).eq(0);\n\n    if (!element.length) return;\n\n    var initClass = isIn ? initClasses[0] : initClasses[1];\n    var activeClass = isIn ? activeClasses[0] : activeClasses[1];\n\n    // Set up the animation\n    reset();\n\n    element.addClass(animation).css('transition', 'none');\n\n    requestAnimationFrame(function () {\n      element.addClass(initClass);\n      if (isIn) element.show();\n    });\n\n    // Start the animation\n    requestAnimationFrame(function () {\n      element[0].offsetWidth;\n      element.css('transition', '').addClass(activeClass);\n    });\n\n    // Clean up the animation when it finishes\n    element.one(Foundation.transitionend(element), finish);\n\n    // Hides the element (for out animations), resets the element, and runs a callback\n    function finish() {\n      if (!isIn) element.hide();\n      reset();\n      if (cb) cb.apply(element);\n    }\n\n    // Resets transitions and removes motion-specific classes\n    function reset() {\n      element[0].style.transitionDuration = 0;\n      element.removeClass(initClass + ' ' + activeClass + ' ' + animation);\n    }\n  }\n\n  Foundation.Move = Move;\n  Foundation.Motion = Motion;\n}(jQuery);\n'use strict';\n\n!function ($) {\n\n  var Nest = {\n    Feather: function (menu) {\n      var type = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'zf';\n\n      menu.attr('role', 'menubar');\n\n      var items = menu.find('li').attr({ 'role': 'menuitem' }),\n          subMenuClass = 'is-' + type + '-submenu',\n          subItemClass = subMenuClass + '-item',\n          hasSubClass = 'is-' + type + '-submenu-parent';\n\n      items.each(function () {\n        var $item = $(this),\n            $sub = $item.children('ul');\n\n        if ($sub.length) {\n          $item.addClass(hasSubClass).attr({\n            'aria-haspopup': true,\n            'aria-label': $item.children('a:first').text()\n          });\n          // Note:  Drilldowns behave differently in how they hide, and so need\n          // additional attributes.  We should look if this possibly over-generalized\n          // utility (Nest) is appropriate when we rework menus in 6.4\n          if (type === 'drilldown') {\n            $item.attr({ 'aria-expanded': false });\n          }\n\n          $sub.addClass('submenu ' + subMenuClass).attr({\n            'data-submenu': '',\n            'role': 'menu'\n          });\n          if (type === 'drilldown') {\n            $sub.attr({ 'aria-hidden': true });\n          }\n        }\n\n        if ($item.parent('[data-submenu]').length) {\n          $item.addClass('is-submenu-item ' + subItemClass);\n        }\n      });\n\n      return;\n    },\n    Burn: function (menu, type) {\n      var //items = menu.find('li'),\n      subMenuClass = 'is-' + type + '-submenu',\n          subItemClass = subMenuClass + '-item',\n          hasSubClass = 'is-' + type + '-submenu-parent';\n\n      menu.find('>li, .menu, .menu > li').removeClass(subMenuClass + ' ' + subItemClass + ' ' + hasSubClass + ' is-submenu-item submenu is-active').removeAttr('data-submenu').css('display', '');\n\n      // console.log(      menu.find('.' + subMenuClass + ', .' + subItemClass + ', .has-submenu, .is-submenu-item, .submenu, [data-submenu]')\n      //           .removeClass(subMenuClass + ' ' + subItemClass + ' has-submenu is-submenu-item submenu')\n      //           .removeAttr('data-submenu'));\n      // items.each(function(){\n      //   var $item = $(this),\n      //       $sub = $item.children('ul');\n      //   if($item.parent('[data-submenu]').length){\n      //     $item.removeClass('is-submenu-item ' + subItemClass);\n      //   }\n      //   if($sub.length){\n      //     $item.removeClass('has-submenu');\n      //     $sub.removeClass('submenu ' + subMenuClass).removeAttr('data-submenu');\n      //   }\n      // });\n    }\n  };\n\n  Foundation.Nest = Nest;\n}(jQuery);\n'use strict';\n\n!function ($) {\n\n  function Timer(elem, options, cb) {\n    var _this = this,\n        duration = options.duration,\n        //options is an object for easily adding features later.\n    nameSpace = Object.keys(elem.data())[0] || 'timer',\n        remain = -1,\n        start,\n        timer;\n\n    this.isPaused = false;\n\n    this.restart = function () {\n      remain = -1;\n      clearTimeout(timer);\n      this.start();\n    };\n\n    this.start = function () {\n      this.isPaused = false;\n      // if(!elem.data('paused')){ return false; }//maybe implement this sanity check if used for other things.\n      clearTimeout(timer);\n      remain = remain <= 0 ? duration : remain;\n      elem.data('paused', false);\n      start = Date.now();\n      timer = setTimeout(function () {\n        if (options.infinite) {\n          _this.restart(); //rerun the timer.\n        }\n        if (cb && typeof cb === 'function') {\n          cb();\n        }\n      }, remain);\n      elem.trigger('timerstart.zf.' + nameSpace);\n    };\n\n    this.pause = function () {\n      this.isPaused = true;\n      //if(elem.data('paused')){ return false; }//maybe implement this sanity check if used for other things.\n      clearTimeout(timer);\n      elem.data('paused', true);\n      var end = Date.now();\n      remain = remain - (end - start);\n      elem.trigger('timerpaused.zf.' + nameSpace);\n    };\n  }\n\n  /**\n   * Runs a callback function when images are fully loaded.\n   * @param {Object} images - Image(s) to check if loaded.\n   * @param {Func} callback - Function to execute when image is fully loaded.\n   */\n  function onImagesLoaded(images, callback) {\n    var self = this,\n        unloaded = images.length;\n\n    if (unloaded === 0) {\n      callback();\n    }\n\n    images.each(function () {\n      // Check if image is loaded\n      if (this.complete || this.readyState === 4 || this.readyState === 'complete') {\n        singleImageLoaded();\n      }\n      // Force load the image\n      else {\n          // fix for IE. See https://css-tricks.com/snippets/jquery/fixing-load-in-ie-for-cached-images/\n          var src = $(this).attr('src');\n          $(this).attr('src', src + '?' + new Date().getTime());\n          $(this).one('load', function () {\n            singleImageLoaded();\n          });\n        }\n    });\n\n    function singleImageLoaded() {\n      unloaded--;\n      if (unloaded === 0) {\n        callback();\n      }\n    }\n  }\n\n  Foundation.Timer = Timer;\n  Foundation.onImagesLoaded = onImagesLoaded;\n}(jQuery);\n//**************************************************\n//**Work inspired by multiple jquery swipe plugins**\n//**Done by Yohai Ararat ***************************\n//**************************************************\n(function ($) {\n\n\t$.spotSwipe = {\n\t\tversion: '1.0.0',\n\t\tenabled: 'ontouchstart' in document.documentElement,\n\t\tpreventDefault: false,\n\t\tmoveThreshold: 75,\n\t\ttimeThreshold: 200\n\t};\n\n\tvar startPosX,\n\t    startPosY,\n\t    startTime,\n\t    elapsedTime,\n\t    isMoving = false;\n\n\tfunction onTouchEnd() {\n\t\t//  alert(this);\n\t\tthis.removeEventListener('touchmove', onTouchMove);\n\t\tthis.removeEventListener('touchend', onTouchEnd);\n\t\tisMoving = false;\n\t}\n\n\tfunction onTouchMove(e) {\n\t\tif ($.spotSwipe.preventDefault) {\n\t\t\te.preventDefault();\n\t\t}\n\t\tif (isMoving) {\n\t\t\tvar x = e.touches[0].pageX;\n\t\t\tvar y = e.touches[0].pageY;\n\t\t\tvar dx = startPosX - x;\n\t\t\tvar dy = startPosY - y;\n\t\t\tvar dir;\n\t\t\telapsedTime = new Date().getTime() - startTime;\n\t\t\tif (Math.abs(dx) >= $.spotSwipe.moveThreshold && elapsedTime <= $.spotSwipe.timeThreshold) {\n\t\t\t\tdir = dx > 0 ? 'left' : 'right';\n\t\t\t}\n\t\t\t// else if(Math.abs(dy) >= $.spotSwipe.moveThreshold && elapsedTime <= $.spotSwipe.timeThreshold) {\n\t\t\t//   dir = dy > 0 ? 'down' : 'up';\n\t\t\t// }\n\t\t\tif (dir) {\n\t\t\t\te.preventDefault();\n\t\t\t\tonTouchEnd.call(this);\n\t\t\t\t$(this).trigger('swipe', dir).trigger('swipe' + dir);\n\t\t\t}\n\t\t}\n\t}\n\n\tfunction onTouchStart(e) {\n\t\tif (e.touches.length == 1) {\n\t\t\tstartPosX = e.touches[0].pageX;\n\t\t\tstartPosY = e.touches[0].pageY;\n\t\t\tisMoving = true;\n\t\t\tstartTime = new Date().getTime();\n\t\t\tthis.addEventListener('touchmove', onTouchMove, false);\n\t\t\tthis.addEventListener('touchend', onTouchEnd, false);\n\t\t}\n\t}\n\n\tfunction init() {\n\t\tthis.addEventListener && this.addEventListener('touchstart', onTouchStart, false);\n\t}\n\n\tfunction teardown() {\n\t\tthis.removeEventListener('touchstart', onTouchStart);\n\t}\n\n\t$.event.special.swipe = { setup: init };\n\n\t$.each(['left', 'up', 'down', 'right'], function () {\n\t\t$.event.special['swipe' + this] = { setup: function () {\n\t\t\t\t$(this).on('swipe', $.noop);\n\t\t\t} };\n\t});\n})(jQuery);\n/****************************************************\n * Method for adding psuedo drag events to elements *\n ***************************************************/\n!function ($) {\n\t$.fn.addTouch = function () {\n\t\tthis.each(function (i, el) {\n\t\t\t$(el).bind('touchstart touchmove touchend touchcancel', function () {\n\t\t\t\t//we pass the original event object because the jQuery event\n\t\t\t\t//object is normalized to w3c specs and does not provide the TouchList\n\t\t\t\thandleTouch(event);\n\t\t\t});\n\t\t});\n\n\t\tvar handleTouch = function (event) {\n\t\t\tvar touches = event.changedTouches,\n\t\t\t    first = touches[0],\n\t\t\t    eventTypes = {\n\t\t\t\ttouchstart: 'mousedown',\n\t\t\t\ttouchmove: 'mousemove',\n\t\t\t\ttouchend: 'mouseup'\n\t\t\t},\n\t\t\t    type = eventTypes[event.type],\n\t\t\t    simulatedEvent;\n\n\t\t\tif ('MouseEvent' in window && typeof window.MouseEvent === 'function') {\n\t\t\t\tsimulatedEvent = new window.MouseEvent(type, {\n\t\t\t\t\t'bubbles': true,\n\t\t\t\t\t'cancelable': true,\n\t\t\t\t\t'screenX': first.screenX,\n\t\t\t\t\t'screenY': first.screenY,\n\t\t\t\t\t'clientX': first.clientX,\n\t\t\t\t\t'clientY': first.clientY\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\tsimulatedEvent = document.createEvent('MouseEvent');\n\t\t\t\tsimulatedEvent.initMouseEvent(type, true, true, window, 1, first.screenX, first.screenY, first.clientX, first.clientY, false, false, false, false, 0 /*left*/, null);\n\t\t\t}\n\t\t\tfirst.target.dispatchEvent(simulatedEvent);\n\t\t};\n\t};\n}(jQuery);\n\n//**********************************\n//**From the jQuery Mobile Library**\n//**need to recreate functionality**\n//**and try to improve if possible**\n//**********************************\n\n/* Removing the jQuery function ****\n************************************\n\n(function( $, window, undefined ) {\n\n\tvar $document = $( document ),\n\t\t// supportTouch = $.mobile.support.touch,\n\t\ttouchStartEvent = 'touchstart'//supportTouch ? \"touchstart\" : \"mousedown\",\n\t\ttouchStopEvent = 'touchend'//supportTouch ? \"touchend\" : \"mouseup\",\n\t\ttouchMoveEvent = 'touchmove'//supportTouch ? \"touchmove\" : \"mousemove\";\n\n\t// setup new event shortcuts\n\t$.each( ( \"touchstart touchmove touchend \" +\n\t\t\"swipe swipeleft swiperight\" ).split( \" \" ), function( i, name ) {\n\n\t\t$.fn[ name ] = function( fn ) {\n\t\t\treturn fn ? this.bind( name, fn ) : this.trigger( name );\n\t\t};\n\n\t\t// jQuery < 1.8\n\t\tif ( $.attrFn ) {\n\t\t\t$.attrFn[ name ] = true;\n\t\t}\n\t});\n\n\tfunction triggerCustomEvent( obj, eventType, event, bubble ) {\n\t\tvar originalType = event.type;\n\t\tevent.type = eventType;\n\t\tif ( bubble ) {\n\t\t\t$.event.trigger( event, undefined, obj );\n\t\t} else {\n\t\t\t$.event.dispatch.call( obj, event );\n\t\t}\n\t\tevent.type = originalType;\n\t}\n\n\t// also handles taphold\n\n\t// Also handles swipeleft, swiperight\n\t$.event.special.swipe = {\n\n\t\t// More than this horizontal displacement, and we will suppress scrolling.\n\t\tscrollSupressionThreshold: 30,\n\n\t\t// More time than this, and it isn't a swipe.\n\t\tdurationThreshold: 1000,\n\n\t\t// Swipe horizontal displacement must be more than this.\n\t\thorizontalDistanceThreshold: window.devicePixelRatio >= 2 ? 15 : 30,\n\n\t\t// Swipe vertical displacement must be less than this.\n\t\tverticalDistanceThreshold: window.devicePixelRatio >= 2 ? 15 : 30,\n\n\t\tgetLocation: function ( event ) {\n\t\t\tvar winPageX = window.pageXOffset,\n\t\t\t\twinPageY = window.pageYOffset,\n\t\t\t\tx = event.clientX,\n\t\t\t\ty = event.clientY;\n\n\t\t\tif ( event.pageY === 0 && Math.floor( y ) > Math.floor( event.pageY ) ||\n\t\t\t\tevent.pageX === 0 && Math.floor( x ) > Math.floor( event.pageX ) ) {\n\n\t\t\t\t// iOS4 clientX/clientY have the value that should have been\n\t\t\t\t// in pageX/pageY. While pageX/page/ have the value 0\n\t\t\t\tx = x - winPageX;\n\t\t\t\ty = y - winPageY;\n\t\t\t} else if ( y < ( event.pageY - winPageY) || x < ( event.pageX - winPageX ) ) {\n\n\t\t\t\t// Some Android browsers have totally bogus values for clientX/Y\n\t\t\t\t// when scrolling/zooming a page. Detectable since clientX/clientY\n\t\t\t\t// should never be smaller than pageX/pageY minus page scroll\n\t\t\t\tx = event.pageX - winPageX;\n\t\t\t\ty = event.pageY - winPageY;\n\t\t\t}\n\n\t\t\treturn {\n\t\t\t\tx: x,\n\t\t\t\ty: y\n\t\t\t};\n\t\t},\n\n\t\tstart: function( event ) {\n\t\t\tvar data = event.originalEvent.touches ?\n\t\t\t\t\tevent.originalEvent.touches[ 0 ] : event,\n\t\t\t\tlocation = $.event.special.swipe.getLocation( data );\n\t\t\treturn {\n\t\t\t\t\t\ttime: ( new Date() ).getTime(),\n\t\t\t\t\t\tcoords: [ location.x, location.y ],\n\t\t\t\t\t\torigin: $( event.target )\n\t\t\t\t\t};\n\t\t},\n\n\t\tstop: function( event ) {\n\t\t\tvar data = event.originalEvent.touches ?\n\t\t\t\t\tevent.originalEvent.touches[ 0 ] : event,\n\t\t\t\tlocation = $.event.special.swipe.getLocation( data );\n\t\t\treturn {\n\t\t\t\t\t\ttime: ( new Date() ).getTime(),\n\t\t\t\t\t\tcoords: [ location.x, location.y ]\n\t\t\t\t\t};\n\t\t},\n\n\t\thandleSwipe: function( start, stop, thisObject, origTarget ) {\n\t\t\tif ( stop.time - start.time < $.event.special.swipe.durationThreshold &&\n\t\t\t\tMath.abs( start.coords[ 0 ] - stop.coords[ 0 ] ) > $.event.special.swipe.horizontalDistanceThreshold &&\n\t\t\t\tMath.abs( start.coords[ 1 ] - stop.coords[ 1 ] ) < $.event.special.swipe.verticalDistanceThreshold ) {\n\t\t\t\tvar direction = start.coords[0] > stop.coords[ 0 ] ? \"swipeleft\" : \"swiperight\";\n\n\t\t\t\ttriggerCustomEvent( thisObject, \"swipe\", $.Event( \"swipe\", { target: origTarget, swipestart: start, swipestop: stop }), true );\n\t\t\t\ttriggerCustomEvent( thisObject, direction,$.Event( direction, { target: origTarget, swipestart: start, swipestop: stop } ), true );\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\treturn false;\n\n\t\t},\n\n\t\t// This serves as a flag to ensure that at most one swipe event event is\n\t\t// in work at any given time\n\t\teventInProgress: false,\n\n\t\tsetup: function() {\n\t\t\tvar events,\n\t\t\t\tthisObject = this,\n\t\t\t\t$this = $( thisObject ),\n\t\t\t\tcontext = {};\n\n\t\t\t// Retrieve the events data for this element and add the swipe context\n\t\t\tevents = $.data( this, \"mobile-events\" );\n\t\t\tif ( !events ) {\n\t\t\t\tevents = { length: 0 };\n\t\t\t\t$.data( this, \"mobile-events\", events );\n\t\t\t}\n\t\t\tevents.length++;\n\t\t\tevents.swipe = context;\n\n\t\t\tcontext.start = function( event ) {\n\n\t\t\t\t// Bail if we're already working on a swipe event\n\t\t\t\tif ( $.event.special.swipe.eventInProgress ) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\t$.event.special.swipe.eventInProgress = true;\n\n\t\t\t\tvar stop,\n\t\t\t\t\tstart = $.event.special.swipe.start( event ),\n\t\t\t\t\torigTarget = event.target,\n\t\t\t\t\temitted = false;\n\n\t\t\t\tcontext.move = function( event ) {\n\t\t\t\t\tif ( !start || event.isDefaultPrevented() ) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tstop = $.event.special.swipe.stop( event );\n\t\t\t\t\tif ( !emitted ) {\n\t\t\t\t\t\temitted = $.event.special.swipe.handleSwipe( start, stop, thisObject, origTarget );\n\t\t\t\t\t\tif ( emitted ) {\n\n\t\t\t\t\t\t\t// Reset the context to make way for the next swipe event\n\t\t\t\t\t\t\t$.event.special.swipe.eventInProgress = false;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t// prevent scrolling\n\t\t\t\t\tif ( Math.abs( start.coords[ 0 ] - stop.coords[ 0 ] ) > $.event.special.swipe.scrollSupressionThreshold ) {\n\t\t\t\t\t\tevent.preventDefault();\n\t\t\t\t\t}\n\t\t\t\t};\n\n\t\t\t\tcontext.stop = function() {\n\t\t\t\t\t\temitted = true;\n\n\t\t\t\t\t\t// Reset the context to make way for the next swipe event\n\t\t\t\t\t\t$.event.special.swipe.eventInProgress = false;\n\t\t\t\t\t\t$document.off( touchMoveEvent, context.move );\n\t\t\t\t\t\tcontext.move = null;\n\t\t\t\t};\n\n\t\t\t\t$document.on( touchMoveEvent, context.move )\n\t\t\t\t\t.one( touchStopEvent, context.stop );\n\t\t\t};\n\t\t\t$this.on( touchStartEvent, context.start );\n\t\t},\n\n\t\tteardown: function() {\n\t\t\tvar events, context;\n\n\t\t\tevents = $.data( this, \"mobile-events\" );\n\t\t\tif ( events ) {\n\t\t\t\tcontext = events.swipe;\n\t\t\t\tdelete events.swipe;\n\t\t\t\tevents.length--;\n\t\t\t\tif ( events.length === 0 ) {\n\t\t\t\t\t$.removeData( this, \"mobile-events\" );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif ( context ) {\n\t\t\t\tif ( context.start ) {\n\t\t\t\t\t$( this ).off( touchStartEvent, context.start );\n\t\t\t\t}\n\t\t\t\tif ( context.move ) {\n\t\t\t\t\t$document.off( touchMoveEvent, context.move );\n\t\t\t\t}\n\t\t\t\tif ( context.stop ) {\n\t\t\t\t\t$document.off( touchStopEvent, context.stop );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t};\n\t$.each({\n\t\tswipeleft: \"swipe.left\",\n\t\tswiperight: \"swipe.right\"\n\t}, function( event, sourceEvent ) {\n\n\t\t$.event.special[ event ] = {\n\t\t\tsetup: function() {\n\t\t\t\t$( this ).bind( sourceEvent, $.noop );\n\t\t\t},\n\t\t\tteardown: function() {\n\t\t\t\t$( this ).unbind( sourceEvent );\n\t\t\t}\n\t\t};\n\t});\n})( jQuery, this );\n*/\n'use strict';\n\n!function ($) {\n\n  var MutationObserver = function () {\n    var prefixes = ['WebKit', 'Moz', 'O', 'Ms', ''];\n    for (var i = 0; i < prefixes.length; i++) {\n      if (prefixes[i] + 'MutationObserver' in window) {\n        return window[prefixes[i] + 'MutationObserver'];\n      }\n    }\n    return false;\n  }();\n\n  var triggers = function (el, type) {\n    el.data(type).split(' ').forEach(function (id) {\n      $('#' + id)[type === 'close' ? 'trigger' : 'triggerHandler'](type + '.zf.trigger', [el]);\n    });\n  };\n  // Elements with [data-open] will reveal a plugin that supports it when clicked.\n  $(document).on('click.zf.trigger', '[data-open]', function () {\n    triggers($(this), 'open');\n  });\n\n  // Elements with [data-close] will close a plugin that supports it when clicked.\n  // If used without a value on [data-close], the event will bubble, allowing it to close a parent component.\n  $(document).on('click.zf.trigger', '[data-close]', function () {\n    var id = $(this).data('close');\n    if (id) {\n      triggers($(this), 'close');\n    } else {\n      $(this).trigger('close.zf.trigger');\n    }\n  });\n\n  // Elements with [data-toggle] will toggle a plugin that supports it when clicked.\n  $(document).on('click.zf.trigger', '[data-toggle]', function () {\n    var id = $(this).data('toggle');\n    if (id) {\n      triggers($(this), 'toggle');\n    } else {\n      $(this).trigger('toggle.zf.trigger');\n    }\n  });\n\n  // Elements with [data-closable] will respond to close.zf.trigger events.\n  $(document).on('close.zf.trigger', '[data-closable]', function (e) {\n    e.stopPropagation();\n    var animation = $(this).data('closable');\n\n    if (animation !== '') {\n      Foundation.Motion.animateOut($(this), animation, function () {\n        $(this).trigger('closed.zf');\n      });\n    } else {\n      $(this).fadeOut().trigger('closed.zf');\n    }\n  });\n\n  $(document).on('focus.zf.trigger blur.zf.trigger', '[data-toggle-focus]', function () {\n    var id = $(this).data('toggle-focus');\n    $('#' + id).triggerHandler('toggle.zf.trigger', [$(this)]);\n  });\n\n  /**\n  * Fires once after all other scripts have loaded\n  * @function\n  * @private\n  */\n  $(window).on('load', function () {\n    checkListeners();\n  });\n\n  function checkListeners() {\n    eventsListener();\n    resizeListener();\n    scrollListener();\n    mutateListener();\n    closemeListener();\n  }\n\n  //******** only fires this function once on load, if there's something to watch ********\n  function closemeListener(pluginName) {\n    var yetiBoxes = $('[data-yeti-box]'),\n        plugNames = ['dropdown', 'tooltip', 'reveal'];\n\n    if (pluginName) {\n      if (typeof pluginName === 'string') {\n        plugNames.push(pluginName);\n      } else if (typeof pluginName === 'object' && typeof pluginName[0] === 'string') {\n        plugNames.concat(pluginName);\n      } else {\n        console.error('Plugin names must be strings');\n      }\n    }\n    if (yetiBoxes.length) {\n      var listeners = plugNames.map(function (name) {\n        return 'closeme.zf.' + name;\n      }).join(' ');\n\n      $(window).off(listeners).on(listeners, function (e, pluginId) {\n        var plugin = e.namespace.split('.')[0];\n        var plugins = $('[data-' + plugin + ']').not('[data-yeti-box=\"' + pluginId + '\"]');\n\n        plugins.each(function () {\n          var _this = $(this);\n\n          _this.triggerHandler('close.zf.trigger', [_this]);\n        });\n      });\n    }\n  }\n\n  function resizeListener(debounce) {\n    var timer = void 0,\n        $nodes = $('[data-resize]');\n    if ($nodes.length) {\n      $(window).off('resize.zf.trigger').on('resize.zf.trigger', function (e) {\n        if (timer) {\n          clearTimeout(timer);\n        }\n\n        timer = setTimeout(function () {\n\n          if (!MutationObserver) {\n            //fallback for IE 9\n            $nodes.each(function () {\n              $(this).triggerHandler('resizeme.zf.trigger');\n            });\n          }\n          //trigger all listening elements and signal a resize event\n          $nodes.attr('data-events', \"resize\");\n        }, debounce || 10); //default time to emit resize event\n      });\n    }\n  }\n\n  function scrollListener(debounce) {\n    var timer = void 0,\n        $nodes = $('[data-scroll]');\n    if ($nodes.length) {\n      $(window).off('scroll.zf.trigger').on('scroll.zf.trigger', function (e) {\n        if (timer) {\n          clearTimeout(timer);\n        }\n\n        timer = setTimeout(function () {\n\n          if (!MutationObserver) {\n            //fallback for IE 9\n            $nodes.each(function () {\n              $(this).triggerHandler('scrollme.zf.trigger');\n            });\n          }\n          //trigger all listening elements and signal a scroll event\n          $nodes.attr('data-events', \"scroll\");\n        }, debounce || 10); //default time to emit scroll event\n      });\n    }\n  }\n\n  function mutateListener(debounce) {\n    var $nodes = $('[data-mutate]');\n    if ($nodes.length && MutationObserver) {\n      //trigger all listening elements and signal a mutate event\n      //no IE 9 or 10\n      $nodes.each(function () {\n        $(this).triggerHandler('mutateme.zf.trigger');\n      });\n    }\n  }\n\n  function eventsListener() {\n    if (!MutationObserver) {\n      return false;\n    }\n    var nodes = document.querySelectorAll('[data-resize], [data-scroll], [data-mutate]');\n\n    //element callback\n    var listeningElementsMutation = function (mutationRecordsList) {\n      var $target = $(mutationRecordsList[0].target);\n\n      //trigger the event handler for the element depending on type\n      switch (mutationRecordsList[0].type) {\n\n        case \"attributes\":\n          if ($target.attr(\"data-events\") === \"scroll\" && mutationRecordsList[0].attributeName === \"data-events\") {\n            $target.triggerHandler('scrollme.zf.trigger', [$target, window.pageYOffset]);\n          }\n          if ($target.attr(\"data-events\") === \"resize\" && mutationRecordsList[0].attributeName === \"data-events\") {\n            $target.triggerHandler('resizeme.zf.trigger', [$target]);\n          }\n          if (mutationRecordsList[0].attributeName === \"style\") {\n            $target.closest(\"[data-mutate]\").attr(\"data-events\", \"mutate\");\n            $target.closest(\"[data-mutate]\").triggerHandler('mutateme.zf.trigger', [$target.closest(\"[data-mutate]\")]);\n          }\n          break;\n\n        case \"childList\":\n          $target.closest(\"[data-mutate]\").attr(\"data-events\", \"mutate\");\n          $target.closest(\"[data-mutate]\").triggerHandler('mutateme.zf.trigger', [$target.closest(\"[data-mutate]\")]);\n          break;\n\n        default:\n          return false;\n        //nothing\n      }\n    };\n\n    if (nodes.length) {\n      //for each element that needs to listen for resizing, scrolling, or mutation add a single observer\n      for (var i = 0; i <= nodes.length - 1; i++) {\n        var elementObserver = new MutationObserver(listeningElementsMutation);\n        elementObserver.observe(nodes[i], { attributes: true, childList: true, characterData: false, subtree: true, attributeFilter: [\"data-events\", \"style\"] });\n      }\n    }\n  }\n\n  // ------------------------------------\n\n  // [PH]\n  // Foundation.CheckWatchers = checkWatchers;\n  Foundation.IHearYou = checkListeners;\n  // Foundation.ISeeYou = scrollListener;\n  // Foundation.IFeelYou = closemeListener;\n}(jQuery);\n\n// function domMutationObserver(debounce) {\n//   // !!! This is coming soon and needs more work; not active  !!! //\n//   var timer,\n//   nodes = document.querySelectorAll('[data-mutate]');\n//   //\n//   if (nodes.length) {\n//     // var MutationObserver = (function () {\n//     //   var prefixes = ['WebKit', 'Moz', 'O', 'Ms', ''];\n//     //   for (var i=0; i < prefixes.length; i++) {\n//     //     if (prefixes[i] + 'MutationObserver' in window) {\n//     //       return window[prefixes[i] + 'MutationObserver'];\n//     //     }\n//     //   }\n//     //   return false;\n//     // }());\n//\n//\n//     //for the body, we need to listen for all changes effecting the style and class attributes\n//     var bodyObserver = new MutationObserver(bodyMutation);\n//     bodyObserver.observe(document.body, { attributes: true, childList: true, characterData: false, subtree:true, attributeFilter:[\"style\", \"class\"]});\n//\n//\n//     //body callback\n//     function bodyMutation(mutate) {\n//       //trigger all listening elements and signal a mutation event\n//       if (timer) { clearTimeout(timer); }\n//\n//       timer = setTimeout(function() {\n//         bodyObserver.disconnect();\n//         $('[data-mutate]').attr('data-events',\"mutate\");\n//       }, debounce || 150);\n//     }\n//   }\n// }\n'use strict';\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n!function ($) {\n\n  /**\n   * Abide module.\n   * @module foundation.abide\n   */\n\n  var Abide = function () {\n    /**\n     * Creates a new instance of Abide.\n     * @class\n     * @fires Abide#init\n     * @param {Object} element - jQuery object to add the trigger to.\n     * @param {Object} options - Overrides to the default plugin settings.\n     */\n    function Abide(element) {\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n      _classCallCheck(this, Abide);\n\n      this.$element = element;\n      this.options = $.extend({}, Abide.defaults, this.$element.data(), options);\n\n      this._init();\n\n      Foundation.registerPlugin(this, 'Abide');\n    }\n\n    /**\n     * Initializes the Abide plugin and calls functions to get Abide functioning on load.\n     * @private\n     */\n\n\n    _createClass(Abide, [{\n      key: '_init',\n      value: function _init() {\n        this.$inputs = this.$element.find('input, textarea, select');\n\n        this._events();\n      }\n\n      /**\n       * Initializes events for Abide.\n       * @private\n       */\n\n    }, {\n      key: '_events',\n      value: function _events() {\n        var _this2 = this;\n\n        this.$element.off('.abide').on('reset.zf.abide', function () {\n          _this2.resetForm();\n        }).on('submit.zf.abide', function () {\n          return _this2.validateForm();\n        });\n\n        if (this.options.validateOn === 'fieldChange') {\n          this.$inputs.off('change.zf.abide').on('change.zf.abide', function (e) {\n            _this2.validateInput($(e.target));\n          });\n        }\n\n        if (this.options.liveValidate) {\n          this.$inputs.off('input.zf.abide').on('input.zf.abide', function (e) {\n            _this2.validateInput($(e.target));\n          });\n        }\n\n        if (this.options.validateOnBlur) {\n          this.$inputs.off('blur.zf.abide').on('blur.zf.abide', function (e) {\n            _this2.validateInput($(e.target));\n          });\n        }\n      }\n\n      /**\n       * Calls necessary functions to update Abide upon DOM change\n       * @private\n       */\n\n    }, {\n      key: '_reflow',\n      value: function _reflow() {\n        this._init();\n      }\n\n      /**\n       * Checks whether or not a form element has the required attribute and if it's checked or not\n       * @param {Object} element - jQuery object to check for required attribute\n       * @returns {Boolean} Boolean value depends on whether or not attribute is checked or empty\n       */\n\n    }, {\n      key: 'requiredCheck',\n      value: function requiredCheck($el) {\n        if (!$el.attr('required')) return true;\n\n        var isGood = true;\n\n        switch ($el[0].type) {\n          case 'checkbox':\n            isGood = $el[0].checked;\n            break;\n\n          case 'select':\n          case 'select-one':\n          case 'select-multiple':\n            var opt = $el.find('option:selected');\n            if (!opt.length || !opt.val()) isGood = false;\n            break;\n\n          default:\n            if (!$el.val() || !$el.val().length) isGood = false;\n        }\n\n        return isGood;\n      }\n\n      /**\n       * Based on $el, get the first element with selector in this order:\n       * 1. The element's direct sibling('s).\n       * 3. The element's parent's children.\n       *\n       * This allows for multiple form errors per input, though if none are found, no form errors will be shown.\n       *\n       * @param {Object} $el - jQuery object to use as reference to find the form error selector.\n       * @returns {Object} jQuery object with the selector.\n       */\n\n    }, {\n      key: 'findFormError',\n      value: function findFormError($el) {\n        var $error = $el.siblings(this.options.formErrorSelector);\n\n        if (!$error.length) {\n          $error = $el.parent().find(this.options.formErrorSelector);\n        }\n\n        return $error;\n      }\n\n      /**\n       * Get the first element in this order:\n       * 2. The <label> with the attribute `[for=\"someInputId\"]`\n       * 3. The `.closest()` <label>\n       *\n       * @param {Object} $el - jQuery object to check for required attribute\n       * @returns {Boolean} Boolean value depends on whether or not attribute is checked or empty\n       */\n\n    }, {\n      key: 'findLabel',\n      value: function findLabel($el) {\n        var id = $el[0].id;\n        var $label = this.$element.find('label[for=\"' + id + '\"]');\n\n        if (!$label.length) {\n          return $el.closest('label');\n        }\n\n        return $label;\n      }\n\n      /**\n       * Get the set of labels associated with a set of radio els in this order\n       * 2. The <label> with the attribute `[for=\"someInputId\"]`\n       * 3. The `.closest()` <label>\n       *\n       * @param {Object} $el - jQuery object to check for required attribute\n       * @returns {Boolean} Boolean value depends on whether or not attribute is checked or empty\n       */\n\n    }, {\n      key: 'findRadioLabels',\n      value: function findRadioLabels($els) {\n        var _this3 = this;\n\n        var labels = $els.map(function (i, el) {\n          var id = el.id;\n          var $label = _this3.$element.find('label[for=\"' + id + '\"]');\n\n          if (!$label.length) {\n            $label = $(el).closest('label');\n          }\n          return $label[0];\n        });\n\n        return $(labels);\n      }\n\n      /**\n       * Adds the CSS error class as specified by the Abide settings to the label, input, and the form\n       * @param {Object} $el - jQuery object to add the class to\n       */\n\n    }, {\n      key: 'addErrorClasses',\n      value: function addErrorClasses($el) {\n        var $label = this.findLabel($el);\n        var $formError = this.findFormError($el);\n\n        if ($label.length) {\n          $label.addClass(this.options.labelErrorClass);\n        }\n\n        if ($formError.length) {\n          $formError.addClass(this.options.formErrorClass);\n        }\n\n        $el.addClass(this.options.inputErrorClass).attr('data-invalid', '');\n      }\n\n      /**\n       * Remove CSS error classes etc from an entire radio button group\n       * @param {String} groupName - A string that specifies the name of a radio button group\n       *\n       */\n\n    }, {\n      key: 'removeRadioErrorClasses',\n      value: function removeRadioErrorClasses(groupName) {\n        var $els = this.$element.find(':radio[name=\"' + groupName + '\"]');\n        var $labels = this.findRadioLabels($els);\n        var $formErrors = this.findFormError($els);\n\n        if ($labels.length) {\n          $labels.removeClass(this.options.labelErrorClass);\n        }\n\n        if ($formErrors.length) {\n          $formErrors.removeClass(this.options.formErrorClass);\n        }\n\n        $els.removeClass(this.options.inputErrorClass).removeAttr('data-invalid');\n      }\n\n      /**\n       * Removes CSS error class as specified by the Abide settings from the label, input, and the form\n       * @param {Object} $el - jQuery object to remove the class from\n       */\n\n    }, {\n      key: 'removeErrorClasses',\n      value: function removeErrorClasses($el) {\n        // radios need to clear all of the els\n        if ($el[0].type == 'radio') {\n          return this.removeRadioErrorClasses($el.attr('name'));\n        }\n\n        var $label = this.findLabel($el);\n        var $formError = this.findFormError($el);\n\n        if ($label.length) {\n          $label.removeClass(this.options.labelErrorClass);\n        }\n\n        if ($formError.length) {\n          $formError.removeClass(this.options.formErrorClass);\n        }\n\n        $el.removeClass(this.options.inputErrorClass).removeAttr('data-invalid');\n      }\n\n      /**\n       * Goes through a form to find inputs and proceeds to validate them in ways specific to their type\n       * @fires Abide#invalid\n       * @fires Abide#valid\n       * @param {Object} element - jQuery object to validate, should be an HTML input\n       * @returns {Boolean} goodToGo - If the input is valid or not.\n       */\n\n    }, {\n      key: 'validateInput',\n      value: function validateInput($el) {\n        var _this4 = this;\n\n        var clearRequire = this.requiredCheck($el),\n            validated = false,\n            customValidator = true,\n            validator = $el.attr('data-validator'),\n            equalTo = true;\n\n        // don't validate ignored inputs or hidden inputs\n        if ($el.is('[data-abide-ignore]') || $el.is('[type=\"hidden\"]')) {\n          return true;\n        }\n\n        switch ($el[0].type) {\n          case 'radio':\n            validated = this.validateRadio($el.attr('name'));\n            break;\n\n          case 'checkbox':\n            validated = clearRequire;\n            break;\n\n          case 'select':\n          case 'select-one':\n          case 'select-multiple':\n            validated = clearRequire;\n            break;\n\n          default:\n            validated = this.validateText($el);\n        }\n\n        if (validator) {\n          customValidator = this.matchValidation($el, validator, $el.attr('required'));\n        }\n\n        if ($el.attr('data-equalto')) {\n          equalTo = this.options.validators.equalTo($el);\n        }\n\n        var goodToGo = [clearRequire, validated, customValidator, equalTo].indexOf(false) === -1;\n        var message = (goodToGo ? 'valid' : 'invalid') + '.zf.abide';\n\n        if (goodToGo) {\n          // Re-validate inputs that depend on this one with equalto\n          var dependentElements = this.$element.find('[data-equalto=\"' + $el.attr('id') + '\"]');\n          if (dependentElements.length) {\n            (function () {\n              var _this = _this4;\n              dependentElements.each(function () {\n                if ($(this).val()) {\n                  _this.validateInput($(this));\n                }\n              });\n            })();\n          }\n        }\n\n        this[goodToGo ? 'removeErrorClasses' : 'addErrorClasses']($el);\n\n        /**\n         * Fires when the input is done checking for validation. Event trigger is either `valid.zf.abide` or `invalid.zf.abide`\n         * Trigger includes the DOM element of the input.\n         * @event Abide#valid\n         * @event Abide#invalid\n         */\n        $el.trigger(message, [$el]);\n\n        return goodToGo;\n      }\n\n      /**\n       * Goes through a form and if there are any invalid inputs, it will display the form error element\n       * @returns {Boolean} noError - true if no errors were detected...\n       * @fires Abide#formvalid\n       * @fires Abide#forminvalid\n       */\n\n    }, {\n      key: 'validateForm',\n      value: function validateForm() {\n        var acc = [];\n        var _this = this;\n\n        this.$inputs.each(function () {\n          acc.push(_this.validateInput($(this)));\n        });\n\n        var noError = acc.indexOf(false) === -1;\n\n        this.$element.find('[data-abide-error]').css('display', noError ? 'none' : 'block');\n\n        /**\n         * Fires when the form is finished validating. Event trigger is either `formvalid.zf.abide` or `forminvalid.zf.abide`.\n         * Trigger includes the element of the form.\n         * @event Abide#formvalid\n         * @event Abide#forminvalid\n         */\n        this.$element.trigger((noError ? 'formvalid' : 'forminvalid') + '.zf.abide', [this.$element]);\n\n        return noError;\n      }\n\n      /**\n       * Determines whether or a not a text input is valid based on the pattern specified in the attribute. If no matching pattern is found, returns true.\n       * @param {Object} $el - jQuery object to validate, should be a text input HTML element\n       * @param {String} pattern - string value of one of the RegEx patterns in Abide.options.patterns\n       * @returns {Boolean} Boolean value depends on whether or not the input value matches the pattern specified\n       */\n\n    }, {\n      key: 'validateText',\n      value: function validateText($el, pattern) {\n        // A pattern can be passed to this function, or it will be infered from the input's \"pattern\" attribute, or it's \"type\" attribute\n        pattern = pattern || $el.attr('pattern') || $el.attr('type');\n        var inputText = $el.val();\n        var valid = false;\n\n        if (inputText.length) {\n          // If the pattern attribute on the element is in Abide's list of patterns, then test that regexp\n          if (this.options.patterns.hasOwnProperty(pattern)) {\n            valid = this.options.patterns[pattern].test(inputText);\n          }\n          // If the pattern name isn't also the type attribute of the field, then test it as a regexp\n          else if (pattern !== $el.attr('type')) {\n              valid = new RegExp(pattern).test(inputText);\n            } else {\n              valid = true;\n            }\n        }\n        // An empty field is valid if it's not required\n        else if (!$el.prop('required')) {\n            valid = true;\n          }\n\n        return valid;\n      }\n\n      /**\n       * Determines whether or a not a radio input is valid based on whether or not it is required and selected. Although the function targets a single `<input>`, it validates by checking the `required` and `checked` properties of all radio buttons in its group.\n       * @param {String} groupName - A string that specifies the name of a radio button group\n       * @returns {Boolean} Boolean value depends on whether or not at least one radio input has been selected (if it's required)\n       */\n\n    }, {\n      key: 'validateRadio',\n      value: function validateRadio(groupName) {\n        // If at least one radio in the group has the `required` attribute, the group is considered required\n        // Per W3C spec, all radio buttons in a group should have `required`, but we're being nice\n        var $group = this.$element.find(':radio[name=\"' + groupName + '\"]');\n        var valid = false,\n            required = false;\n\n        // For the group to be required, at least one radio needs to be required\n        $group.each(function (i, e) {\n          if ($(e).attr('required')) {\n            required = true;\n          }\n        });\n        if (!required) valid = true;\n\n        if (!valid) {\n          // For the group to be valid, at least one radio needs to be checked\n          $group.each(function (i, e) {\n            if ($(e).prop('checked')) {\n              valid = true;\n            }\n          });\n        };\n\n        return valid;\n      }\n\n      /**\n       * Determines if a selected input passes a custom validation function. Multiple validations can be used, if passed to the element with `data-validator=\"foo bar baz\"` in a space separated listed.\n       * @param {Object} $el - jQuery input element.\n       * @param {String} validators - a string of function names matching functions in the Abide.options.validators object.\n       * @param {Boolean} required - self explanatory?\n       * @returns {Boolean} - true if validations passed.\n       */\n\n    }, {\n      key: 'matchValidation',\n      value: function matchValidation($el, validators, required) {\n        var _this5 = this;\n\n        required = required ? true : false;\n\n        var clear = validators.split(' ').map(function (v) {\n          return _this5.options.validators[v]($el, required, $el.parent());\n        });\n        return clear.indexOf(false) === -1;\n      }\n\n      /**\n       * Resets form inputs and styles\n       * @fires Abide#formreset\n       */\n\n    }, {\n      key: 'resetForm',\n      value: function resetForm() {\n        var $form = this.$element,\n            opts = this.options;\n\n        $('.' + opts.labelErrorClass, $form).not('small').removeClass(opts.labelErrorClass);\n        $('.' + opts.inputErrorClass, $form).not('small').removeClass(opts.inputErrorClass);\n        $(opts.formErrorSelector + '.' + opts.formErrorClass).removeClass(opts.formErrorClass);\n        $form.find('[data-abide-error]').css('display', 'none');\n        $(':input', $form).not(':button, :submit, :reset, :hidden, :radio, :checkbox, [data-abide-ignore]').val('').removeAttr('data-invalid');\n        $(':input:radio', $form).not('[data-abide-ignore]').prop('checked', false).removeAttr('data-invalid');\n        $(':input:checkbox', $form).not('[data-abide-ignore]').prop('checked', false).removeAttr('data-invalid');\n        /**\n         * Fires when the form has been reset.\n         * @event Abide#formreset\n         */\n        $form.trigger('formreset.zf.abide', [$form]);\n      }\n\n      /**\n       * Destroys an instance of Abide.\n       * Removes error styles and classes from elements, without resetting their values.\n       */\n\n    }, {\n      key: 'destroy',\n      value: function destroy() {\n        var _this = this;\n        this.$element.off('.abide').find('[data-abide-error]').css('display', 'none');\n\n        this.$inputs.off('.abide').each(function () {\n          _this.removeErrorClasses($(this));\n        });\n\n        Foundation.unregisterPlugin(this);\n      }\n    }]);\n\n    return Abide;\n  }();\n\n  /**\n   * Default settings for plugin\n   */\n\n\n  Abide.defaults = {\n    /**\n     * The default event to validate inputs. Checkboxes and radios validate immediately.\n     * Remove or change this value for manual validation.\n     * @option\n     * @example 'fieldChange'\n     */\n    validateOn: 'fieldChange',\n\n    /**\n     * Class to be applied to input labels on failed validation.\n     * @option\n     * @example 'is-invalid-label'\n     */\n    labelErrorClass: 'is-invalid-label',\n\n    /**\n     * Class to be applied to inputs on failed validation.\n     * @option\n     * @example 'is-invalid-input'\n     */\n    inputErrorClass: 'is-invalid-input',\n\n    /**\n     * Class selector to use to target Form Errors for show/hide.\n     * @option\n     * @example '.form-error'\n     */\n    formErrorSelector: '.form-error',\n\n    /**\n     * Class added to Form Errors on failed validation.\n     * @option\n     * @example 'is-visible'\n     */\n    formErrorClass: 'is-visible',\n\n    /**\n     * Set to true to validate text inputs on any value change.\n     * @option\n     * @example false\n     */\n    liveValidate: false,\n\n    /**\n     * Set to true to validate inputs on blur.\n     * @option\n     * @example false\n     */\n    validateOnBlur: false,\n\n    patterns: {\n      alpha: /^[a-zA-Z]+$/,\n      alpha_numeric: /^[a-zA-Z0-9]+$/,\n      integer: /^[-+]?\\d+$/,\n      number: /^[-+]?\\d*(?:[\\.\\,]\\d+)?$/,\n\n      // amex, visa, diners\n      card: /^(?:4[0-9]{12}(?:[0-9]{3})?|5[1-5][0-9]{14}|6(?:011|5[0-9][0-9])[0-9]{12}|3[47][0-9]{13}|3(?:0[0-5]|[68][0-9])[0-9]{11}|(?:2131|1800|35\\d{3})\\d{11})$/,\n      cvv: /^([0-9]){3,4}$/,\n\n      // http://www.whatwg.org/specs/web-apps/current-work/multipage/states-of-the-type-attribute.html#valid-e-mail-address\n      email: /^[a-zA-Z0-9.!#$%&'*+\\/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)+$/,\n\n      url: /^(https?|ftp|file|ssh):\\/\\/(((([a-zA-Z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(%[\\da-f]{2})|[!\\$&'\\(\\)\\*\\+,;=]|:)*@)?(((\\d|[1-9]\\d|1\\d\\d|2[0-4]\\d|25[0-5])\\.(\\d|[1-9]\\d|1\\d\\d|2[0-4]\\d|25[0-5])\\.(\\d|[1-9]\\d|1\\d\\d|2[0-4]\\d|25[0-5])\\.(\\d|[1-9]\\d|1\\d\\d|2[0-4]\\d|25[0-5]))|((([a-zA-Z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(([a-zA-Z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])([a-zA-Z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])*([a-zA-Z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])))\\.)+(([a-zA-Z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(([a-zA-Z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])([a-zA-Z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])*([a-zA-Z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])))\\.?)(:\\d*)?)(\\/((([a-zA-Z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(%[\\da-f]{2})|[!\\$&'\\(\\)\\*\\+,;=]|:|@)+(\\/(([a-zA-Z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(%[\\da-f]{2})|[!\\$&'\\(\\)\\*\\+,;=]|:|@)*)*)?)?(\\?((([a-zA-Z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(%[\\da-f]{2})|[!\\$&'\\(\\)\\*\\+,;=]|:|@)|[\\uE000-\\uF8FF]|\\/|\\?)*)?(\\#((([a-zA-Z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(%[\\da-f]{2})|[!\\$&'\\(\\)\\*\\+,;=]|:|@)|\\/|\\?)*)?$/,\n      // abc.de\n      domain: /^([a-zA-Z0-9]([a-zA-Z0-9\\-]{0,61}[a-zA-Z0-9])?\\.)+[a-zA-Z]{2,8}$/,\n\n      datetime: /^([0-2][0-9]{3})\\-([0-1][0-9])\\-([0-3][0-9])T([0-5][0-9])\\:([0-5][0-9])\\:([0-5][0-9])(Z|([\\-\\+]([0-1][0-9])\\:00))$/,\n      // YYYY-MM-DD\n      date: /(?:19|20)[0-9]{2}-(?:(?:0[1-9]|1[0-2])-(?:0[1-9]|1[0-9]|2[0-9])|(?:(?!02)(?:0[1-9]|1[0-2])-(?:30))|(?:(?:0[13578]|1[02])-31))$/,\n      // HH:MM:SS\n      time: /^(0[0-9]|1[0-9]|2[0-3])(:[0-5][0-9]){2}$/,\n      dateISO: /^\\d{4}[\\/\\-]\\d{1,2}[\\/\\-]\\d{1,2}$/,\n      // MM/DD/YYYY\n      month_day_year: /^(0[1-9]|1[012])[- \\/.](0[1-9]|[12][0-9]|3[01])[- \\/.]\\d{4}$/,\n      // DD/MM/YYYY\n      day_month_year: /^(0[1-9]|[12][0-9]|3[01])[- \\/.](0[1-9]|1[012])[- \\/.]\\d{4}$/,\n\n      // #FFF or #FFFFFF\n      color: /^#?([a-fA-F0-9]{6}|[a-fA-F0-9]{3})$/\n    },\n\n    /**\n     * Optional validation functions to be used. `equalTo` being the only default included function.\n     * Functions should return only a boolean if the input is valid or not. Functions are given the following arguments:\n     * el : The jQuery element to validate.\n     * required : Boolean value of the required attribute be present or not.\n     * parent : The direct parent of the input.\n     * @option\n     */\n    validators: {\n      equalTo: function (el, required, parent) {\n        return $('#' + el.attr('data-equalto')).val() === el.val();\n      }\n    }\n  };\n\n  // Window exports\n  Foundation.plugin(Abide, 'Abide');\n}(jQuery);\n'use strict';\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n!function ($) {\n\n  /**\n   * Accordion module.\n   * @module foundation.accordion\n   * @requires foundation.util.keyboard\n   * @requires foundation.util.motion\n   */\n\n  var Accordion = function () {\n    /**\n     * Creates a new instance of an accordion.\n     * @class\n     * @fires Accordion#init\n     * @param {jQuery} element - jQuery object to make into an accordion.\n     * @param {Object} options - a plain object with settings to override the default options.\n     */\n    function Accordion(element, options) {\n      _classCallCheck(this, Accordion);\n\n      this.$element = element;\n      this.options = $.extend({}, Accordion.defaults, this.$element.data(), options);\n\n      this._init();\n\n      Foundation.registerPlugin(this, 'Accordion');\n      Foundation.Keyboard.register('Accordion', {\n        'ENTER': 'toggle',\n        'SPACE': 'toggle',\n        'ARROW_DOWN': 'next',\n        'ARROW_UP': 'previous'\n      });\n    }\n\n    /**\n     * Initializes the accordion by animating the preset active pane(s).\n     * @private\n     */\n\n\n    _createClass(Accordion, [{\n      key: '_init',\n      value: function _init() {\n        this.$element.attr('role', 'tablist');\n        this.$tabs = this.$element.children('[data-accordion-item]');\n\n        this.$tabs.each(function (idx, el) {\n          var $el = $(el),\n              $content = $el.children('[data-tab-content]'),\n              id = $content[0].id || Foundation.GetYoDigits(6, 'accordion'),\n              linkId = el.id || id + '-label';\n\n          $el.find('a:first').attr({\n            'aria-controls': id,\n            'role': 'tab',\n            'id': linkId,\n            'aria-expanded': false,\n            'aria-selected': false\n          });\n\n          $content.attr({ 'role': 'tabpanel', 'aria-labelledby': linkId, 'aria-hidden': true, 'id': id });\n        });\n        var $initActive = this.$element.find('.is-active').children('[data-tab-content]');\n        if ($initActive.length) {\n          this.down($initActive, true);\n        }\n        this._events();\n      }\n\n      /**\n       * Adds event handlers for items within the accordion.\n       * @private\n       */\n\n    }, {\n      key: '_events',\n      value: function _events() {\n        var _this = this;\n\n        this.$tabs.each(function () {\n          var $elem = $(this);\n          var $tabContent = $elem.children('[data-tab-content]');\n          if ($tabContent.length) {\n            $elem.children('a').off('click.zf.accordion keydown.zf.accordion').on('click.zf.accordion', function (e) {\n              e.preventDefault();\n              _this.toggle($tabContent);\n            }).on('keydown.zf.accordion', function (e) {\n              Foundation.Keyboard.handleKey(e, 'Accordion', {\n                toggle: function () {\n                  _this.toggle($tabContent);\n                },\n                next: function () {\n                  var $a = $elem.next().find('a').focus();\n                  if (!_this.options.multiExpand) {\n                    $a.trigger('click.zf.accordion');\n                  }\n                },\n                previous: function () {\n                  var $a = $elem.prev().find('a').focus();\n                  if (!_this.options.multiExpand) {\n                    $a.trigger('click.zf.accordion');\n                  }\n                },\n                handled: function () {\n                  e.preventDefault();\n                  e.stopPropagation();\n                }\n              });\n            });\n          }\n        });\n      }\n\n      /**\n       * Toggles the selected content pane's open/close state.\n       * @param {jQuery} $target - jQuery object of the pane to toggle (`.accordion-content`).\n       * @function\n       */\n\n    }, {\n      key: 'toggle',\n      value: function toggle($target) {\n        if ($target.parent().hasClass('is-active')) {\n          this.up($target);\n        } else {\n          this.down($target);\n        }\n      }\n\n      /**\n       * Opens the accordion tab defined by `$target`.\n       * @param {jQuery} $target - Accordion pane to open (`.accordion-content`).\n       * @param {Boolean} firstTime - flag to determine if reflow should happen.\n       * @fires Accordion#down\n       * @function\n       */\n\n    }, {\n      key: 'down',\n      value: function down($target, firstTime) {\n        var _this2 = this;\n\n        $target.attr('aria-hidden', false).parent('[data-tab-content]').addBack().parent().addClass('is-active');\n\n        if (!this.options.multiExpand && !firstTime) {\n          var $currentActive = this.$element.children('.is-active').children('[data-tab-content]');\n          if ($currentActive.length) {\n            this.up($currentActive.not($target));\n          }\n        }\n\n        $target.slideDown(this.options.slideSpeed, function () {\n          /**\n           * Fires when the tab is done opening.\n           * @event Accordion#down\n           */\n          _this2.$element.trigger('down.zf.accordion', [$target]);\n        });\n\n        $('#' + $target.attr('aria-labelledby')).attr({\n          'aria-expanded': true,\n          'aria-selected': true\n        });\n      }\n\n      /**\n       * Closes the tab defined by `$target`.\n       * @param {jQuery} $target - Accordion tab to close (`.accordion-content`).\n       * @fires Accordion#up\n       * @function\n       */\n\n    }, {\n      key: 'up',\n      value: function up($target) {\n        var $aunts = $target.parent().siblings(),\n            _this = this;\n\n        if (!this.options.allowAllClosed && !$aunts.hasClass('is-active') || !$target.parent().hasClass('is-active')) {\n          return;\n        }\n\n        // Foundation.Move(this.options.slideSpeed, $target, function(){\n        $target.slideUp(_this.options.slideSpeed, function () {\n          /**\n           * Fires when the tab is done collapsing up.\n           * @event Accordion#up\n           */\n          _this.$element.trigger('up.zf.accordion', [$target]);\n        });\n        // });\n\n        $target.attr('aria-hidden', true).parent().removeClass('is-active');\n\n        $('#' + $target.attr('aria-labelledby')).attr({\n          'aria-expanded': false,\n          'aria-selected': false\n        });\n      }\n\n      /**\n       * Destroys an instance of an accordion.\n       * @fires Accordion#destroyed\n       * @function\n       */\n\n    }, {\n      key: 'destroy',\n      value: function destroy() {\n        this.$element.find('[data-tab-content]').stop(true).slideUp(0).css('display', '');\n        this.$element.find('a').off('.zf.accordion');\n\n        Foundation.unregisterPlugin(this);\n      }\n    }]);\n\n    return Accordion;\n  }();\n\n  Accordion.defaults = {\n    /**\n     * Amount of time to animate the opening of an accordion pane.\n     * @option\n     * @example 250\n     */\n    slideSpeed: 250,\n    /**\n     * Allow the accordion to have multiple open panes.\n     * @option\n     * @example false\n     */\n    multiExpand: false,\n    /**\n     * Allow the accordion to close all panes.\n     * @option\n     * @example false\n     */\n    allowAllClosed: false\n  };\n\n  // Window exports\n  Foundation.plugin(Accordion, 'Accordion');\n}(jQuery);\n'use strict';\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n!function ($) {\n\n  /**\n   * AccordionMenu module.\n   * @module foundation.accordionMenu\n   * @requires foundation.util.keyboard\n   * @requires foundation.util.motion\n   * @requires foundation.util.nest\n   */\n\n  var AccordionMenu = function () {\n    /**\n     * Creates a new instance of an accordion menu.\n     * @class\n     * @fires AccordionMenu#init\n     * @param {jQuery} element - jQuery object to make into an accordion menu.\n     * @param {Object} options - Overrides to the default plugin settings.\n     */\n    function AccordionMenu(element, options) {\n      _classCallCheck(this, AccordionMenu);\n\n      this.$element = element;\n      this.options = $.extend({}, AccordionMenu.defaults, this.$element.data(), options);\n\n      Foundation.Nest.Feather(this.$element, 'accordion');\n\n      this._init();\n\n      Foundation.registerPlugin(this, 'AccordionMenu');\n      Foundation.Keyboard.register('AccordionMenu', {\n        'ENTER': 'toggle',\n        'SPACE': 'toggle',\n        'ARROW_RIGHT': 'open',\n        'ARROW_UP': 'up',\n        'ARROW_DOWN': 'down',\n        'ARROW_LEFT': 'close',\n        'ESCAPE': 'closeAll'\n      });\n    }\n\n    /**\n     * Initializes the accordion menu by hiding all nested menus.\n     * @private\n     */\n\n\n    _createClass(AccordionMenu, [{\n      key: '_init',\n      value: function _init() {\n        this.$element.find('[data-submenu]').not('.is-active').slideUp(0); //.find('a').css('padding-left', '1rem');\n        this.$element.attr({\n          'role': 'menu',\n          'aria-multiselectable': this.options.multiOpen\n        });\n\n        this.$menuLinks = this.$element.find('.is-accordion-submenu-parent');\n        this.$menuLinks.each(function () {\n          var linkId = this.id || Foundation.GetYoDigits(6, 'acc-menu-link'),\n              $elem = $(this),\n              $sub = $elem.children('[data-submenu]'),\n              subId = $sub[0].id || Foundation.GetYoDigits(6, 'acc-menu'),\n              isActive = $sub.hasClass('is-active');\n          $elem.attr({\n            'aria-controls': subId,\n            'aria-expanded': isActive,\n            'role': 'menuitem',\n            'id': linkId\n          });\n          $sub.attr({\n            'aria-labelledby': linkId,\n            'aria-hidden': !isActive,\n            'role': 'menu',\n            'id': subId\n          });\n        });\n        var initPanes = this.$element.find('.is-active');\n        if (initPanes.length) {\n          var _this = this;\n          initPanes.each(function () {\n            _this.down($(this));\n          });\n        }\n        this._events();\n      }\n\n      /**\n       * Adds event handlers for items within the menu.\n       * @private\n       */\n\n    }, {\n      key: '_events',\n      value: function _events() {\n        var _this = this;\n\n        this.$element.find('li').each(function () {\n          var $submenu = $(this).children('[data-submenu]');\n\n          if ($submenu.length) {\n            $(this).children('a').off('click.zf.accordionMenu').on('click.zf.accordionMenu', function (e) {\n              e.preventDefault();\n\n              _this.toggle($submenu);\n            });\n          }\n        }).on('keydown.zf.accordionmenu', function (e) {\n          var $element = $(this),\n              $elements = $element.parent('ul').children('li'),\n              $prevElement,\n              $nextElement,\n              $target = $element.children('[data-submenu]');\n\n          $elements.each(function (i) {\n            if ($(this).is($element)) {\n              $prevElement = $elements.eq(Math.max(0, i - 1)).find('a').first();\n              $nextElement = $elements.eq(Math.min(i + 1, $elements.length - 1)).find('a').first();\n\n              if ($(this).children('[data-submenu]:visible').length) {\n                // has open sub menu\n                $nextElement = $element.find('li:first-child').find('a').first();\n              }\n              if ($(this).is(':first-child')) {\n                // is first element of sub menu\n                $prevElement = $element.parents('li').first().find('a').first();\n              } else if ($prevElement.parents('li').first().children('[data-submenu]:visible').length) {\n                // if previous element has open sub menu\n                $prevElement = $prevElement.parents('li').find('li:last-child').find('a').first();\n              }\n              if ($(this).is(':last-child')) {\n                // is last element of sub menu\n                $nextElement = $element.parents('li').first().next('li').find('a').first();\n              }\n\n              return;\n            }\n          });\n\n          Foundation.Keyboard.handleKey(e, 'AccordionMenu', {\n            open: function () {\n              if ($target.is(':hidden')) {\n                _this.down($target);\n                $target.find('li').first().find('a').first().focus();\n              }\n            },\n            close: function () {\n              if ($target.length && !$target.is(':hidden')) {\n                // close active sub of this item\n                _this.up($target);\n              } else if ($element.parent('[data-submenu]').length) {\n                // close currently open sub\n                _this.up($element.parent('[data-submenu]'));\n                $element.parents('li').first().find('a').first().focus();\n              }\n            },\n            up: function () {\n              $prevElement.focus();\n              return true;\n            },\n            down: function () {\n              $nextElement.focus();\n              return true;\n            },\n            toggle: function () {\n              if ($element.children('[data-submenu]').length) {\n                _this.toggle($element.children('[data-submenu]'));\n              }\n            },\n            closeAll: function () {\n              _this.hideAll();\n            },\n            handled: function (preventDefault) {\n              if (preventDefault) {\n                e.preventDefault();\n              }\n              e.stopImmediatePropagation();\n            }\n          });\n        }); //.attr('tabindex', 0);\n      }\n\n      /**\n       * Closes all panes of the menu.\n       * @function\n       */\n\n    }, {\n      key: 'hideAll',\n      value: function hideAll() {\n        this.up(this.$element.find('[data-submenu]'));\n      }\n\n      /**\n       * Opens all panes of the menu.\n       * @function\n       */\n\n    }, {\n      key: 'showAll',\n      value: function showAll() {\n        this.down(this.$element.find('[data-submenu]'));\n      }\n\n      /**\n       * Toggles the open/close state of a submenu.\n       * @function\n       * @param {jQuery} $target - the submenu to toggle\n       */\n\n    }, {\n      key: 'toggle',\n      value: function toggle($target) {\n        if (!$target.is(':animated')) {\n          if (!$target.is(':hidden')) {\n            this.up($target);\n          } else {\n            this.down($target);\n          }\n        }\n      }\n\n      /**\n       * Opens the sub-menu defined by `$target`.\n       * @param {jQuery} $target - Sub-menu to open.\n       * @fires AccordionMenu#down\n       */\n\n    }, {\n      key: 'down',\n      value: function down($target) {\n        var _this = this;\n\n        if (!this.options.multiOpen) {\n          this.up(this.$element.find('.is-active').not($target.parentsUntil(this.$element).add($target)));\n        }\n\n        $target.addClass('is-active').attr({ 'aria-hidden': false }).parent('.is-accordion-submenu-parent').attr({ 'aria-expanded': true });\n\n        //Foundation.Move(this.options.slideSpeed, $target, function() {\n        $target.slideDown(_this.options.slideSpeed, function () {\n          /**\n           * Fires when the menu is done opening.\n           * @event AccordionMenu#down\n           */\n          _this.$element.trigger('down.zf.accordionMenu', [$target]);\n        });\n        //});\n      }\n\n      /**\n       * Closes the sub-menu defined by `$target`. All sub-menus inside the target will be closed as well.\n       * @param {jQuery} $target - Sub-menu to close.\n       * @fires AccordionMenu#up\n       */\n\n    }, {\n      key: 'up',\n      value: function up($target) {\n        var _this = this;\n        //Foundation.Move(this.options.slideSpeed, $target, function(){\n        $target.slideUp(_this.options.slideSpeed, function () {\n          /**\n           * Fires when the menu is done collapsing up.\n           * @event AccordionMenu#up\n           */\n          _this.$element.trigger('up.zf.accordionMenu', [$target]);\n        });\n        //});\n\n        var $menus = $target.find('[data-submenu]').slideUp(0).addBack().attr('aria-hidden', true);\n\n        $menus.parent('.is-accordion-submenu-parent').attr('aria-expanded', false);\n      }\n\n      /**\n       * Destroys an instance of accordion menu.\n       * @fires AccordionMenu#destroyed\n       */\n\n    }, {\n      key: 'destroy',\n      value: function destroy() {\n        this.$element.find('[data-submenu]').slideDown(0).css('display', '');\n        this.$element.find('a').off('click.zf.accordionMenu');\n\n        Foundation.Nest.Burn(this.$element, 'accordion');\n        Foundation.unregisterPlugin(this);\n      }\n    }]);\n\n    return AccordionMenu;\n  }();\n\n  AccordionMenu.defaults = {\n    /**\n     * Amount of time to animate the opening of a submenu in ms.\n     * @option\n     * @example 250\n     */\n    slideSpeed: 250,\n    /**\n     * Allow the menu to have multiple open panes.\n     * @option\n     * @example true\n     */\n    multiOpen: true\n  };\n\n  // Window exports\n  Foundation.plugin(AccordionMenu, 'AccordionMenu');\n}(jQuery);\n'use strict';\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n!function ($) {\n\n  /**\n   * Drilldown module.\n   * @module foundation.drilldown\n   * @requires foundation.util.keyboard\n   * @requires foundation.util.motion\n   * @requires foundation.util.nest\n   */\n\n  var Drilldown = function () {\n    /**\n     * Creates a new instance of a drilldown menu.\n     * @class\n     * @param {jQuery} element - jQuery object to make into an accordion menu.\n     * @param {Object} options - Overrides to the default plugin settings.\n     */\n    function Drilldown(element, options) {\n      _classCallCheck(this, Drilldown);\n\n      this.$element = element;\n      this.options = $.extend({}, Drilldown.defaults, this.$element.data(), options);\n\n      Foundation.Nest.Feather(this.$element, 'drilldown');\n\n      this._init();\n\n      Foundation.registerPlugin(this, 'Drilldown');\n      Foundation.Keyboard.register('Drilldown', {\n        'ENTER': 'open',\n        'SPACE': 'open',\n        'ARROW_RIGHT': 'next',\n        'ARROW_UP': 'up',\n        'ARROW_DOWN': 'down',\n        'ARROW_LEFT': 'previous',\n        'ESCAPE': 'close',\n        'TAB': 'down',\n        'SHIFT_TAB': 'up'\n      });\n    }\n\n    /**\n     * Initializes the drilldown by creating jQuery collections of elements\n     * @private\n     */\n\n\n    _createClass(Drilldown, [{\n      key: '_init',\n      value: function _init() {\n        this.$submenuAnchors = this.$element.find('li.is-drilldown-submenu-parent').children('a');\n        this.$submenus = this.$submenuAnchors.parent('li').children('[data-submenu]');\n        this.$menuItems = this.$element.find('li').not('.js-drilldown-back').attr('role', 'menuitem').find('a');\n        this.$element.attr('data-mutate', this.$element.attr('data-drilldown') || Foundation.GetYoDigits(6, 'drilldown'));\n\n        this._prepareMenu();\n        this._registerEvents();\n\n        this._keyboardEvents();\n      }\n\n      /**\n       * prepares drilldown menu by setting attributes to links and elements\n       * sets a min height to prevent content jumping\n       * wraps the element if not already wrapped\n       * @private\n       * @function\n       */\n\n    }, {\n      key: '_prepareMenu',\n      value: function _prepareMenu() {\n        var _this = this;\n        // if(!this.options.holdOpen){\n        //   this._menuLinkEvents();\n        // }\n        this.$submenuAnchors.each(function () {\n          var $link = $(this);\n          var $sub = $link.parent();\n          if (_this.options.parentLink) {\n            $link.clone().prependTo($sub.children('[data-submenu]')).wrap('<li class=\"is-submenu-parent-item is-submenu-item is-drilldown-submenu-item\" role=\"menu-item\"></li>');\n          }\n          $link.data('savedHref', $link.attr('href')).removeAttr('href').attr('tabindex', 0);\n          $link.children('[data-submenu]').attr({\n            'aria-hidden': true,\n            'tabindex': 0,\n            'role': 'menu'\n          });\n          _this._events($link);\n        });\n        this.$submenus.each(function () {\n          var $menu = $(this),\n              $back = $menu.find('.js-drilldown-back');\n          if (!$back.length) {\n            switch (_this.options.backButtonPosition) {\n              case \"bottom\":\n                $menu.append(_this.options.backButton);\n                break;\n              case \"top\":\n                $menu.prepend(_this.options.backButton);\n                break;\n              default:\n                console.error(\"Unsupported backButtonPosition value '\" + _this.options.backButtonPosition + \"'\");\n            }\n          }\n          _this._back($menu);\n        });\n\n        if (!this.options.autoHeight) {\n          this.$submenus.addClass('drilldown-submenu-cover-previous');\n        }\n\n        if (!this.$element.parent().hasClass('is-drilldown')) {\n          this.$wrapper = $(this.options.wrapper).addClass('is-drilldown');\n          if (this.options.animateHeight) this.$wrapper.addClass('animate-height');\n          this.$wrapper = this.$element.wrap(this.$wrapper).parent().css(this._getMaxDims());\n        }\n      }\n    }, {\n      key: '_resize',\n      value: function _resize() {\n        this.$wrapper.css({ 'max-width': 'none', 'min-height': 'none' });\n        // _getMaxDims has side effects (boo) but calling it should update all other necessary heights & widths\n        this.$wrapper.css(this._getMaxDims());\n      }\n\n      /**\n       * Adds event handlers to elements in the menu.\n       * @function\n       * @private\n       * @param {jQuery} $elem - the current menu item to add handlers to.\n       */\n\n    }, {\n      key: '_events',\n      value: function _events($elem) {\n        var _this = this;\n\n        $elem.off('click.zf.drilldown').on('click.zf.drilldown', function (e) {\n          if ($(e.target).parentsUntil('ul', 'li').hasClass('is-drilldown-submenu-parent')) {\n            e.stopImmediatePropagation();\n            e.preventDefault();\n          }\n\n          // if(e.target !== e.currentTarget.firstElementChild){\n          //   return false;\n          // }\n          _this._show($elem.parent('li'));\n\n          if (_this.options.closeOnClick) {\n            var $body = $('body');\n            $body.off('.zf.drilldown').on('click.zf.drilldown', function (e) {\n              if (e.target === _this.$element[0] || $.contains(_this.$element[0], e.target)) {\n                return;\n              }\n              e.preventDefault();\n              _this._hideAll();\n              $body.off('.zf.drilldown');\n            });\n          }\n        });\n        this.$element.on('mutateme.zf.trigger', this._resize.bind(this));\n      }\n\n      /**\n       * Adds event handlers to the menu element.\n       * @function\n       * @private\n       */\n\n    }, {\n      key: '_registerEvents',\n      value: function _registerEvents() {\n        if (this.options.scrollTop) {\n          this._bindHandler = this._scrollTop.bind(this);\n          this.$element.on('open.zf.drilldown hide.zf.drilldown closed.zf.drilldown', this._bindHandler);\n        }\n      }\n\n      /**\n       * Scroll to Top of Element or data-scroll-top-element\n       * @function\n       * @fires Drilldown#scrollme\n       */\n\n    }, {\n      key: '_scrollTop',\n      value: function _scrollTop() {\n        var _this = this;\n        var $scrollTopElement = _this.options.scrollTopElement != '' ? $(_this.options.scrollTopElement) : _this.$element,\n            scrollPos = parseInt($scrollTopElement.offset().top + _this.options.scrollTopOffset);\n        $('html, body').stop(true).animate({ scrollTop: scrollPos }, _this.options.animationDuration, _this.options.animationEasing, function () {\n          /**\n            * Fires after the menu has scrolled\n            * @event Drilldown#scrollme\n            */\n          if (this === $('html')[0]) _this.$element.trigger('scrollme.zf.drilldown');\n        });\n      }\n\n      /**\n       * Adds keydown event listener to `li`'s in the menu.\n       * @private\n       */\n\n    }, {\n      key: '_keyboardEvents',\n      value: function _keyboardEvents() {\n        var _this = this;\n\n        this.$menuItems.add(this.$element.find('.js-drilldown-back > a, .is-submenu-parent-item > a')).on('keydown.zf.drilldown', function (e) {\n          var $element = $(this),\n              $elements = $element.parent('li').parent('ul').children('li').children('a'),\n              $prevElement,\n              $nextElement;\n\n          $elements.each(function (i) {\n            if ($(this).is($element)) {\n              $prevElement = $elements.eq(Math.max(0, i - 1));\n              $nextElement = $elements.eq(Math.min(i + 1, $elements.length - 1));\n              return;\n            }\n          });\n\n          Foundation.Keyboard.handleKey(e, 'Drilldown', {\n            next: function () {\n              if ($element.is(_this.$submenuAnchors)) {\n                _this._show($element.parent('li'));\n                $element.parent('li').one(Foundation.transitionend($element), function () {\n                  $element.parent('li').find('ul li a').filter(_this.$menuItems).first().focus();\n                });\n                return true;\n              }\n            },\n            previous: function () {\n              _this._hide($element.parent('li').parent('ul'));\n              $element.parent('li').parent('ul').one(Foundation.transitionend($element), function () {\n                setTimeout(function () {\n                  $element.parent('li').parent('ul').parent('li').children('a').first().focus();\n                }, 1);\n              });\n              return true;\n            },\n            up: function () {\n              $prevElement.focus();\n              return true;\n            },\n            down: function () {\n              $nextElement.focus();\n              return true;\n            },\n            close: function () {\n              _this._back();\n              //_this.$menuItems.first().focus(); // focus to first element\n            },\n            open: function () {\n              if (!$element.is(_this.$menuItems)) {\n                // not menu item means back button\n                _this._hide($element.parent('li').parent('ul'));\n                $element.parent('li').parent('ul').one(Foundation.transitionend($element), function () {\n                  setTimeout(function () {\n                    $element.parent('li').parent('ul').parent('li').children('a').first().focus();\n                  }, 1);\n                });\n                return true;\n              } else if ($element.is(_this.$submenuAnchors)) {\n                _this._show($element.parent('li'));\n                $element.parent('li').one(Foundation.transitionend($element), function () {\n                  $element.parent('li').find('ul li a').filter(_this.$menuItems).first().focus();\n                });\n                return true;\n              }\n            },\n            handled: function (preventDefault) {\n              if (preventDefault) {\n                e.preventDefault();\n              }\n              e.stopImmediatePropagation();\n            }\n          });\n        }); // end keyboardAccess\n      }\n\n      /**\n       * Closes all open elements, and returns to root menu.\n       * @function\n       * @fires Drilldown#closed\n       */\n\n    }, {\n      key: '_hideAll',\n      value: function _hideAll() {\n        var $elem = this.$element.find('.is-drilldown-submenu.is-active').addClass('is-closing');\n        if (this.options.autoHeight) this.$wrapper.css({ height: $elem.parent().closest('ul').data('calcHeight') });\n        $elem.one(Foundation.transitionend($elem), function (e) {\n          $elem.removeClass('is-active is-closing');\n        });\n        /**\n         * Fires when the menu is fully closed.\n         * @event Drilldown#closed\n         */\n        this.$element.trigger('closed.zf.drilldown');\n      }\n\n      /**\n       * Adds event listener for each `back` button, and closes open menus.\n       * @function\n       * @fires Drilldown#back\n       * @param {jQuery} $elem - the current sub-menu to add `back` event.\n       */\n\n    }, {\n      key: '_back',\n      value: function _back($elem) {\n        var _this = this;\n        $elem.off('click.zf.drilldown');\n        $elem.children('.js-drilldown-back').on('click.zf.drilldown', function (e) {\n          e.stopImmediatePropagation();\n          // console.log('mouseup on back');\n          _this._hide($elem);\n\n          // If there is a parent submenu, call show\n          var parentSubMenu = $elem.parent('li').parent('ul').parent('li');\n          if (parentSubMenu.length) {\n            _this._show(parentSubMenu);\n          }\n        });\n      }\n\n      /**\n       * Adds event listener to menu items w/o submenus to close open menus on click.\n       * @function\n       * @private\n       */\n\n    }, {\n      key: '_menuLinkEvents',\n      value: function _menuLinkEvents() {\n        var _this = this;\n        this.$menuItems.not('.is-drilldown-submenu-parent').off('click.zf.drilldown').on('click.zf.drilldown', function (e) {\n          // e.stopImmediatePropagation();\n          setTimeout(function () {\n            _this._hideAll();\n          }, 0);\n        });\n      }\n\n      /**\n       * Opens a submenu.\n       * @function\n       * @fires Drilldown#open\n       * @param {jQuery} $elem - the current element with a submenu to open, i.e. the `li` tag.\n       */\n\n    }, {\n      key: '_show',\n      value: function _show($elem) {\n        if (this.options.autoHeight) this.$wrapper.css({ height: $elem.children('[data-submenu]').data('calcHeight') });\n        $elem.attr('aria-expanded', true);\n        $elem.children('[data-submenu]').addClass('is-active').attr('aria-hidden', false);\n        /**\n         * Fires when the submenu has opened.\n         * @event Drilldown#open\n         */\n        this.$element.trigger('open.zf.drilldown', [$elem]);\n      }\n    }, {\n      key: '_hide',\n\n\n      /**\n       * Hides a submenu\n       * @function\n       * @fires Drilldown#hide\n       * @param {jQuery} $elem - the current sub-menu to hide, i.e. the `ul` tag.\n       */\n      value: function _hide($elem) {\n        if (this.options.autoHeight) this.$wrapper.css({ height: $elem.parent().closest('ul').data('calcHeight') });\n        var _this = this;\n        $elem.parent('li').attr('aria-expanded', false);\n        $elem.attr('aria-hidden', true).addClass('is-closing');\n        $elem.addClass('is-closing').one(Foundation.transitionend($elem), function () {\n          $elem.removeClass('is-active is-closing');\n          $elem.blur();\n        });\n        /**\n         * Fires when the submenu has closed.\n         * @event Drilldown#hide\n         */\n        $elem.trigger('hide.zf.drilldown', [$elem]);\n      }\n\n      /**\n       * Iterates through the nested menus to calculate the min-height, and max-width for the menu.\n       * Prevents content jumping.\n       * @function\n       * @private\n       */\n\n    }, {\n      key: '_getMaxDims',\n      value: function _getMaxDims() {\n        var maxHeight = 0,\n            result = {},\n            _this = this;\n        this.$submenus.add(this.$element).each(function () {\n          var numOfElems = $(this).children('li').length;\n          var height = Foundation.Box.GetDimensions(this).height;\n          maxHeight = height > maxHeight ? height : maxHeight;\n          if (_this.options.autoHeight) {\n            $(this).data('calcHeight', height);\n            if (!$(this).hasClass('is-drilldown-submenu')) result['height'] = height;\n          }\n        });\n\n        if (!this.options.autoHeight) result['min-height'] = maxHeight + 'px';\n\n        result['max-width'] = this.$element[0].getBoundingClientRect().width + 'px';\n\n        return result;\n      }\n\n      /**\n       * Destroys the Drilldown Menu\n       * @function\n       */\n\n    }, {\n      key: 'destroy',\n      value: function destroy() {\n        if (this.options.scrollTop) this.$element.off('.zf.drilldown', this._bindHandler);\n        this._hideAll();\n        this.$element.off('mutateme.zf.trigger');\n        Foundation.Nest.Burn(this.$element, 'drilldown');\n        this.$element.unwrap().find('.js-drilldown-back, .is-submenu-parent-item').remove().end().find('.is-active, .is-closing, .is-drilldown-submenu').removeClass('is-active is-closing is-drilldown-submenu').end().find('[data-submenu]').removeAttr('aria-hidden tabindex role');\n        this.$submenuAnchors.each(function () {\n          $(this).off('.zf.drilldown');\n        });\n\n        this.$submenus.removeClass('drilldown-submenu-cover-previous');\n\n        this.$element.find('a').each(function () {\n          var $link = $(this);\n          $link.removeAttr('tabindex');\n          if ($link.data('savedHref')) {\n            $link.attr('href', $link.data('savedHref')).removeData('savedHref');\n          } else {\n            return;\n          }\n        });\n        Foundation.unregisterPlugin(this);\n      }\n    }]);\n\n    return Drilldown;\n  }();\n\n  Drilldown.defaults = {\n    /**\n     * Markup used for JS generated back button. Prepended  or appended (see backButtonPosition) to submenu lists and deleted on `destroy` method, 'js-drilldown-back' class required. Remove the backslash (`\\`) if copy and pasting.\n     * @option\n     * @example '<\\li><\\a>Back<\\/a><\\/li>'\n     */\n    backButton: '<li class=\"js-drilldown-back\"><a tabindex=\"0\">Back</a></li>',\n    /**\n     * Position the back button either at the top or bottom of drilldown submenus.\n     * @option\n     * @example bottom\n     */\n    backButtonPosition: 'top',\n    /**\n     * Markup used to wrap drilldown menu. Use a class name for independent styling; the JS applied class: `is-drilldown` is required. Remove the backslash (`\\`) if copy and pasting.\n     * @option\n     * @example '<\\div class=\"is-drilldown\"><\\/div>'\n     */\n    wrapper: '<div></div>',\n    /**\n     * Adds the parent link to the submenu.\n     * @option\n     * @example false\n     */\n    parentLink: false,\n    /**\n     * Allow the menu to return to root list on body click.\n     * @option\n     * @example false\n     */\n    closeOnClick: false,\n    /**\n     * Allow the menu to auto adjust height.\n     * @option\n     * @example false\n     */\n    autoHeight: false,\n    /**\n     * Animate the auto adjust height.\n     * @option\n     * @example false\n     */\n    animateHeight: false,\n    /**\n     * Scroll to the top of the menu after opening a submenu or navigating back using the menu back button\n     * @option\n     * @example false\n     */\n    scrollTop: false,\n    /**\n     * String jquery selector (for example 'body') of element to take offset().top from, if empty string the drilldown menu offset().top is taken\n     * @option\n     * @example ''\n     */\n    scrollTopElement: '',\n    /**\n     * ScrollTop offset\n     * @option\n     * @example 100\n     */\n    scrollTopOffset: 0,\n    /**\n     * Scroll animation duration\n     * @option\n     * @example 500\n     */\n    animationDuration: 500,\n    /**\n     * Scroll animation easing\n     * @option\n     * @example 'swing'\n     */\n    animationEasing: 'swing'\n    // holdOpen: false\n  };\n\n  // Window exports\n  Foundation.plugin(Drilldown, 'Drilldown');\n}(jQuery);\n'use strict';\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n!function ($) {\n\n  /**\n   * Dropdown module.\n   * @module foundation.dropdown\n   * @requires foundation.util.keyboard\n   * @requires foundation.util.box\n   * @requires foundation.util.triggers\n   */\n\n  var Dropdown = function () {\n    /**\n     * Creates a new instance of a dropdown.\n     * @class\n     * @param {jQuery} element - jQuery object to make into a dropdown.\n     *        Object should be of the dropdown panel, rather than its anchor.\n     * @param {Object} options - Overrides to the default plugin settings.\n     */\n    function Dropdown(element, options) {\n      _classCallCheck(this, Dropdown);\n\n      this.$element = element;\n      this.options = $.extend({}, Dropdown.defaults, this.$element.data(), options);\n      this._init();\n\n      Foundation.registerPlugin(this, 'Dropdown');\n      Foundation.Keyboard.register('Dropdown', {\n        'ENTER': 'open',\n        'SPACE': 'open',\n        'ESCAPE': 'close'\n      });\n    }\n\n    /**\n     * Initializes the plugin by setting/checking options and attributes, adding helper variables, and saving the anchor.\n     * @function\n     * @private\n     */\n\n\n    _createClass(Dropdown, [{\n      key: '_init',\n      value: function _init() {\n        var $id = this.$element.attr('id');\n\n        this.$anchor = $('[data-toggle=\"' + $id + '\"]').length ? $('[data-toggle=\"' + $id + '\"]') : $('[data-open=\"' + $id + '\"]');\n        this.$anchor.attr({\n          'aria-controls': $id,\n          'data-is-focus': false,\n          'data-yeti-box': $id,\n          'aria-haspopup': true,\n          'aria-expanded': false\n\n        });\n\n        if (this.options.parentClass) {\n          this.$parent = this.$element.parents('.' + this.options.parentClass);\n        } else {\n          this.$parent = null;\n        }\n        this.options.positionClass = this.getPositionClass();\n        this.counter = 4;\n        this.usedPositions = [];\n        this.$element.attr({\n          'aria-hidden': 'true',\n          'data-yeti-box': $id,\n          'data-resize': $id,\n          'aria-labelledby': this.$anchor[0].id || Foundation.GetYoDigits(6, 'dd-anchor')\n        });\n        this._events();\n      }\n\n      /**\n       * Helper function to determine current orientation of dropdown pane.\n       * @function\n       * @returns {String} position - string value of a position class.\n       */\n\n    }, {\n      key: 'getPositionClass',\n      value: function getPositionClass() {\n        var verticalPosition = this.$element[0].className.match(/(top|left|right|bottom)/g);\n        verticalPosition = verticalPosition ? verticalPosition[0] : '';\n        var horizontalPosition = /float-(\\S+)/.exec(this.$anchor[0].className);\n        horizontalPosition = horizontalPosition ? horizontalPosition[1] : '';\n        var position = horizontalPosition ? horizontalPosition + ' ' + verticalPosition : verticalPosition;\n\n        return position;\n      }\n\n      /**\n       * Adjusts the dropdown panes orientation by adding/removing positioning classes.\n       * @function\n       * @private\n       * @param {String} position - position class to remove.\n       */\n\n    }, {\n      key: '_reposition',\n      value: function _reposition(position) {\n        this.usedPositions.push(position ? position : 'bottom');\n        //default, try switching to opposite side\n        if (!position && this.usedPositions.indexOf('top') < 0) {\n          this.$element.addClass('top');\n        } else if (position === 'top' && this.usedPositions.indexOf('bottom') < 0) {\n          this.$element.removeClass(position);\n        } else if (position === 'left' && this.usedPositions.indexOf('right') < 0) {\n          this.$element.removeClass(position).addClass('right');\n        } else if (position === 'right' && this.usedPositions.indexOf('left') < 0) {\n          this.$element.removeClass(position).addClass('left');\n        }\n\n        //if default change didn't work, try bottom or left first\n        else if (!position && this.usedPositions.indexOf('top') > -1 && this.usedPositions.indexOf('left') < 0) {\n            this.$element.addClass('left');\n          } else if (position === 'top' && this.usedPositions.indexOf('bottom') > -1 && this.usedPositions.indexOf('left') < 0) {\n            this.$element.removeClass(position).addClass('left');\n          } else if (position === 'left' && this.usedPositions.indexOf('right') > -1 && this.usedPositions.indexOf('bottom') < 0) {\n            this.$element.removeClass(position);\n          } else if (position === 'right' && this.usedPositions.indexOf('left') > -1 && this.usedPositions.indexOf('bottom') < 0) {\n            this.$element.removeClass(position);\n          }\n          //if nothing cleared, set to bottom\n          else {\n              this.$element.removeClass(position);\n            }\n        this.classChanged = true;\n        this.counter--;\n      }\n\n      /**\n       * Sets the position and orientation of the dropdown pane, checks for collisions.\n       * Recursively calls itself if a collision is detected, with a new position class.\n       * @function\n       * @private\n       */\n\n    }, {\n      key: '_setPosition',\n      value: function _setPosition() {\n        if (this.$anchor.attr('aria-expanded') === 'false') {\n          return false;\n        }\n        var position = this.getPositionClass(),\n            $eleDims = Foundation.Box.GetDimensions(this.$element),\n            $anchorDims = Foundation.Box.GetDimensions(this.$anchor),\n            _this = this,\n            direction = position === 'left' ? 'left' : position === 'right' ? 'left' : 'top',\n            param = direction === 'top' ? 'height' : 'width',\n            offset = param === 'height' ? this.options.vOffset : this.options.hOffset;\n\n        if ($eleDims.width >= $eleDims.windowDims.width || !this.counter && !Foundation.Box.ImNotTouchingYou(this.$element, this.$parent)) {\n          var newWidth = $eleDims.windowDims.width,\n              parentHOffset = 0;\n          if (this.$parent) {\n            var $parentDims = Foundation.Box.GetDimensions(this.$parent),\n                parentHOffset = $parentDims.offset.left;\n            if ($parentDims.width < newWidth) {\n              newWidth = $parentDims.width;\n            }\n          }\n\n          this.$element.offset(Foundation.Box.GetOffsets(this.$element, this.$anchor, 'center bottom', this.options.vOffset, this.options.hOffset + parentHOffset, true)).css({\n            'width': newWidth - this.options.hOffset * 2,\n            'height': 'auto'\n          });\n          this.classChanged = true;\n          return false;\n        }\n\n        this.$element.offset(Foundation.Box.GetOffsets(this.$element, this.$anchor, position, this.options.vOffset, this.options.hOffset));\n\n        while (!Foundation.Box.ImNotTouchingYou(this.$element, this.$parent, true) && this.counter) {\n          this._reposition(position);\n          this._setPosition();\n        }\n      }\n\n      /**\n       * Adds event listeners to the element utilizing the triggers utility library.\n       * @function\n       * @private\n       */\n\n    }, {\n      key: '_events',\n      value: function _events() {\n        var _this = this;\n        this.$element.on({\n          'open.zf.trigger': this.open.bind(this),\n          'close.zf.trigger': this.close.bind(this),\n          'toggle.zf.trigger': this.toggle.bind(this),\n          'resizeme.zf.trigger': this._setPosition.bind(this)\n        });\n\n        if (this.options.hover) {\n          this.$anchor.off('mouseenter.zf.dropdown mouseleave.zf.dropdown').on('mouseenter.zf.dropdown', function () {\n            var bodyData = $('body').data();\n            if (typeof bodyData.whatinput === 'undefined' || bodyData.whatinput === 'mouse') {\n              clearTimeout(_this.timeout);\n              _this.timeout = setTimeout(function () {\n                _this.open();\n                _this.$anchor.data('hover', true);\n              }, _this.options.hoverDelay);\n            }\n          }).on('mouseleave.zf.dropdown', function () {\n            clearTimeout(_this.timeout);\n            _this.timeout = setTimeout(function () {\n              _this.close();\n              _this.$anchor.data('hover', false);\n            }, _this.options.hoverDelay);\n          });\n          if (this.options.hoverPane) {\n            this.$element.off('mouseenter.zf.dropdown mouseleave.zf.dropdown').on('mouseenter.zf.dropdown', function () {\n              clearTimeout(_this.timeout);\n            }).on('mouseleave.zf.dropdown', function () {\n              clearTimeout(_this.timeout);\n              _this.timeout = setTimeout(function () {\n                _this.close();\n                _this.$anchor.data('hover', false);\n              }, _this.options.hoverDelay);\n            });\n          }\n        }\n        this.$anchor.add(this.$element).on('keydown.zf.dropdown', function (e) {\n\n          var $target = $(this),\n              visibleFocusableElements = Foundation.Keyboard.findFocusable(_this.$element);\n\n          Foundation.Keyboard.handleKey(e, 'Dropdown', {\n            open: function () {\n              if ($target.is(_this.$anchor)) {\n                _this.open();\n                _this.$element.attr('tabindex', -1).focus();\n                e.preventDefault();\n              }\n            },\n            close: function () {\n              _this.close();\n              _this.$anchor.focus();\n            }\n          });\n        });\n      }\n\n      /**\n       * Adds an event handler to the body to close any dropdowns on a click.\n       * @function\n       * @private\n       */\n\n    }, {\n      key: '_addBodyHandler',\n      value: function _addBodyHandler() {\n        var $body = $(document.body).not(this.$element),\n            _this = this;\n        $body.off('click.zf.dropdown').on('click.zf.dropdown', function (e) {\n          if (_this.$anchor.is(e.target) || _this.$anchor.find(e.target).length) {\n            return;\n          }\n          if (_this.$element.find(e.target).length) {\n            return;\n          }\n          _this.close();\n          $body.off('click.zf.dropdown');\n        });\n      }\n\n      /**\n       * Opens the dropdown pane, and fires a bubbling event to close other dropdowns.\n       * @function\n       * @fires Dropdown#closeme\n       * @fires Dropdown#show\n       */\n\n    }, {\n      key: 'open',\n      value: function open() {\n        // var _this = this;\n        /**\n         * Fires to close other open dropdowns\n         * @event Dropdown#closeme\n         */\n        this.$element.trigger('closeme.zf.dropdown', this.$element.attr('id'));\n        this.$anchor.addClass('hover').attr({ 'aria-expanded': true });\n        // this.$element/*.show()*/;\n        this._setPosition();\n        this.$element.addClass('is-open').attr({ 'aria-hidden': false });\n\n        if (this.options.autoFocus) {\n          var $focusable = Foundation.Keyboard.findFocusable(this.$element);\n          if ($focusable.length) {\n            $focusable.eq(0).focus();\n          }\n        }\n\n        if (this.options.closeOnClick) {\n          this._addBodyHandler();\n        }\n\n        if (this.options.trapFocus) {\n          Foundation.Keyboard.trapFocus(this.$element);\n        }\n\n        /**\n         * Fires once the dropdown is visible.\n         * @event Dropdown#show\n         */\n        this.$element.trigger('show.zf.dropdown', [this.$element]);\n      }\n\n      /**\n       * Closes the open dropdown pane.\n       * @function\n       * @fires Dropdown#hide\n       */\n\n    }, {\n      key: 'close',\n      value: function close() {\n        if (!this.$element.hasClass('is-open')) {\n          return false;\n        }\n        this.$element.removeClass('is-open').attr({ 'aria-hidden': true });\n\n        this.$anchor.removeClass('hover').attr('aria-expanded', false);\n\n        if (this.classChanged) {\n          var curPositionClass = this.getPositionClass();\n          if (curPositionClass) {\n            this.$element.removeClass(curPositionClass);\n          }\n          this.$element.addClass(this.options.positionClass)\n          /*.hide()*/.css({ height: '', width: '' });\n          this.classChanged = false;\n          this.counter = 4;\n          this.usedPositions.length = 0;\n        }\n        this.$element.trigger('hide.zf.dropdown', [this.$element]);\n\n        if (this.options.trapFocus) {\n          Foundation.Keyboard.releaseFocus(this.$element);\n        }\n      }\n\n      /**\n       * Toggles the dropdown pane's visibility.\n       * @function\n       */\n\n    }, {\n      key: 'toggle',\n      value: function toggle() {\n        if (this.$element.hasClass('is-open')) {\n          if (this.$anchor.data('hover')) return;\n          this.close();\n        } else {\n          this.open();\n        }\n      }\n\n      /**\n       * Destroys the dropdown.\n       * @function\n       */\n\n    }, {\n      key: 'destroy',\n      value: function destroy() {\n        this.$element.off('.zf.trigger').hide();\n        this.$anchor.off('.zf.dropdown');\n\n        Foundation.unregisterPlugin(this);\n      }\n    }]);\n\n    return Dropdown;\n  }();\n\n  Dropdown.defaults = {\n    /**\n     * Class that designates bounding container of Dropdown (Default: window)\n     * @option\n     * @example 'dropdown-parent'\n     */\n    parentClass: null,\n    /**\n     * Amount of time to delay opening a submenu on hover event.\n     * @option\n     * @example 250\n     */\n    hoverDelay: 250,\n    /**\n     * Allow submenus to open on hover events\n     * @option\n     * @example false\n     */\n    hover: false,\n    /**\n     * Don't close dropdown when hovering over dropdown pane\n     * @option\n     * @example true\n     */\n    hoverPane: false,\n    /**\n     * Number of pixels between the dropdown pane and the triggering element on open.\n     * @option\n     * @example 1\n     */\n    vOffset: 1,\n    /**\n     * Number of pixels between the dropdown pane and the triggering element on open.\n     * @option\n     * @example 1\n     */\n    hOffset: 1,\n    /**\n     * Class applied to adjust open position. JS will test and fill this in.\n     * @option\n     * @example 'top'\n     */\n    positionClass: '',\n    /**\n     * Allow the plugin to trap focus to the dropdown pane if opened with keyboard commands.\n     * @option\n     * @example false\n     */\n    trapFocus: false,\n    /**\n     * Allow the plugin to set focus to the first focusable element within the pane, regardless of method of opening.\n     * @option\n     * @example true\n     */\n    autoFocus: false,\n    /**\n     * Allows a click on the body to close the dropdown.\n     * @option\n     * @example false\n     */\n    closeOnClick: false\n  };\n\n  // Window exports\n  Foundation.plugin(Dropdown, 'Dropdown');\n}(jQuery);\n'use strict';\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n!function ($) {\n\n  /**\n   * DropdownMenu module.\n   * @module foundation.dropdown-menu\n   * @requires foundation.util.keyboard\n   * @requires foundation.util.box\n   * @requires foundation.util.nest\n   */\n\n  var DropdownMenu = function () {\n    /**\n     * Creates a new instance of DropdownMenu.\n     * @class\n     * @fires DropdownMenu#init\n     * @param {jQuery} element - jQuery object to make into a dropdown menu.\n     * @param {Object} options - Overrides to the default plugin settings.\n     */\n    function DropdownMenu(element, options) {\n      _classCallCheck(this, DropdownMenu);\n\n      this.$element = element;\n      this.options = $.extend({}, DropdownMenu.defaults, this.$element.data(), options);\n\n      Foundation.Nest.Feather(this.$element, 'dropdown');\n      this._init();\n\n      Foundation.registerPlugin(this, 'DropdownMenu');\n      Foundation.Keyboard.register('DropdownMenu', {\n        'ENTER': 'open',\n        'SPACE': 'open',\n        'ARROW_RIGHT': 'next',\n        'ARROW_UP': 'up',\n        'ARROW_DOWN': 'down',\n        'ARROW_LEFT': 'previous',\n        'ESCAPE': 'close'\n      });\n    }\n\n    /**\n     * Initializes the plugin, and calls _prepareMenu\n     * @private\n     * @function\n     */\n\n\n    _createClass(DropdownMenu, [{\n      key: '_init',\n      value: function _init() {\n        var subs = this.$element.find('li.is-dropdown-submenu-parent');\n        this.$element.children('.is-dropdown-submenu-parent').children('.is-dropdown-submenu').addClass('first-sub');\n\n        this.$menuItems = this.$element.find('[role=\"menuitem\"]');\n        this.$tabs = this.$element.children('[role=\"menuitem\"]');\n        this.$tabs.find('ul.is-dropdown-submenu').addClass(this.options.verticalClass);\n\n        if (this.$element.hasClass(this.options.rightClass) || this.options.alignment === 'right' || Foundation.rtl() || this.$element.parents('.top-bar-right').is('*')) {\n          this.options.alignment = 'right';\n          subs.addClass('opens-left');\n        } else {\n          subs.addClass('opens-right');\n        }\n        this.changed = false;\n        this._events();\n      }\n    }, {\n      key: '_isVertical',\n      value: function _isVertical() {\n        return this.$tabs.css('display') === 'block';\n      }\n\n      /**\n       * Adds event listeners to elements within the menu\n       * @private\n       * @function\n       */\n\n    }, {\n      key: '_events',\n      value: function _events() {\n        var _this = this,\n            hasTouch = 'ontouchstart' in window || typeof window.ontouchstart !== 'undefined',\n            parClass = 'is-dropdown-submenu-parent';\n\n        // used for onClick and in the keyboard handlers\n        var handleClickFn = function (e) {\n          var $elem = $(e.target).parentsUntil('ul', '.' + parClass),\n              hasSub = $elem.hasClass(parClass),\n              hasClicked = $elem.attr('data-is-click') === 'true',\n              $sub = $elem.children('.is-dropdown-submenu');\n\n          if (hasSub) {\n            if (hasClicked) {\n              if (!_this.options.closeOnClick || !_this.options.clickOpen && !hasTouch || _this.options.forceFollow && hasTouch) {\n                return;\n              } else {\n                e.stopImmediatePropagation();\n                e.preventDefault();\n                _this._hide($elem);\n              }\n            } else {\n              e.preventDefault();\n              e.stopImmediatePropagation();\n              _this._show($sub);\n              $elem.add($elem.parentsUntil(_this.$element, '.' + parClass)).attr('data-is-click', true);\n            }\n          }\n        };\n\n        if (this.options.clickOpen || hasTouch) {\n          this.$menuItems.on('click.zf.dropdownmenu touchstart.zf.dropdownmenu', handleClickFn);\n        }\n\n        // Handle Leaf element Clicks\n        if (_this.options.closeOnClickInside) {\n          this.$menuItems.on('click.zf.dropdownmenu touchend.zf.dropdownmenu', function (e) {\n            var $elem = $(this),\n                hasSub = $elem.hasClass(parClass);\n            if (!hasSub) {\n              _this._hide();\n            }\n          });\n        }\n\n        if (!this.options.disableHover) {\n          this.$menuItems.on('mouseenter.zf.dropdownmenu', function (e) {\n            var $elem = $(this),\n                hasSub = $elem.hasClass(parClass);\n\n            if (hasSub) {\n              clearTimeout($elem.data('_delay'));\n              $elem.data('_delay', setTimeout(function () {\n                _this._show($elem.children('.is-dropdown-submenu'));\n              }, _this.options.hoverDelay));\n            }\n          }).on('mouseleave.zf.dropdownmenu', function (e) {\n            var $elem = $(this),\n                hasSub = $elem.hasClass(parClass);\n            if (hasSub && _this.options.autoclose) {\n              if ($elem.attr('data-is-click') === 'true' && _this.options.clickOpen) {\n                return false;\n              }\n\n              clearTimeout($elem.data('_delay'));\n              $elem.data('_delay', setTimeout(function () {\n                _this._hide($elem);\n              }, _this.options.closingTime));\n            }\n          });\n        }\n        this.$menuItems.on('keydown.zf.dropdownmenu', function (e) {\n          var $element = $(e.target).parentsUntil('ul', '[role=\"menuitem\"]'),\n              isTab = _this.$tabs.index($element) > -1,\n              $elements = isTab ? _this.$tabs : $element.siblings('li').add($element),\n              $prevElement,\n              $nextElement;\n\n          $elements.each(function (i) {\n            if ($(this).is($element)) {\n              $prevElement = $elements.eq(i - 1);\n              $nextElement = $elements.eq(i + 1);\n              return;\n            }\n          });\n\n          var nextSibling = function () {\n            if (!$element.is(':last-child')) {\n              $nextElement.children('a:first').focus();\n              e.preventDefault();\n            }\n          },\n              prevSibling = function () {\n            $prevElement.children('a:first').focus();\n            e.preventDefault();\n          },\n              openSub = function () {\n            var $sub = $element.children('ul.is-dropdown-submenu');\n            if ($sub.length) {\n              _this._show($sub);\n              $element.find('li > a:first').focus();\n              e.preventDefault();\n            } else {\n              return;\n            }\n          },\n              closeSub = function () {\n            //if ($element.is(':first-child')) {\n            var close = $element.parent('ul').parent('li');\n            close.children('a:first').focus();\n            _this._hide(close);\n            e.preventDefault();\n            //}\n          };\n          var functions = {\n            open: openSub,\n            close: function () {\n              _this._hide(_this.$element);\n              _this.$menuItems.find('a:first').focus(); // focus to first element\n              e.preventDefault();\n            },\n            handled: function () {\n              e.stopImmediatePropagation();\n            }\n          };\n\n          if (isTab) {\n            if (_this._isVertical()) {\n              // vertical menu\n              if (Foundation.rtl()) {\n                // right aligned\n                $.extend(functions, {\n                  down: nextSibling,\n                  up: prevSibling,\n                  next: closeSub,\n                  previous: openSub\n                });\n              } else {\n                // left aligned\n                $.extend(functions, {\n                  down: nextSibling,\n                  up: prevSibling,\n                  next: openSub,\n                  previous: closeSub\n                });\n              }\n            } else {\n              // horizontal menu\n              if (Foundation.rtl()) {\n                // right aligned\n                $.extend(functions, {\n                  next: prevSibling,\n                  previous: nextSibling,\n                  down: openSub,\n                  up: closeSub\n                });\n              } else {\n                // left aligned\n                $.extend(functions, {\n                  next: nextSibling,\n                  previous: prevSibling,\n                  down: openSub,\n                  up: closeSub\n                });\n              }\n            }\n          } else {\n            // not tabs -> one sub\n            if (Foundation.rtl()) {\n              // right aligned\n              $.extend(functions, {\n                next: closeSub,\n                previous: openSub,\n                down: nextSibling,\n                up: prevSibling\n              });\n            } else {\n              // left aligned\n              $.extend(functions, {\n                next: openSub,\n                previous: closeSub,\n                down: nextSibling,\n                up: prevSibling\n              });\n            }\n          }\n          Foundation.Keyboard.handleKey(e, 'DropdownMenu', functions);\n        });\n      }\n\n      /**\n       * Adds an event handler to the body to close any dropdowns on a click.\n       * @function\n       * @private\n       */\n\n    }, {\n      key: '_addBodyHandler',\n      value: function _addBodyHandler() {\n        var $body = $(document.body),\n            _this = this;\n        $body.off('mouseup.zf.dropdownmenu touchend.zf.dropdownmenu').on('mouseup.zf.dropdownmenu touchend.zf.dropdownmenu', function (e) {\n          var $link = _this.$element.find(e.target);\n          if ($link.length) {\n            return;\n          }\n\n          _this._hide();\n          $body.off('mouseup.zf.dropdownmenu touchend.zf.dropdownmenu');\n        });\n      }\n\n      /**\n       * Opens a dropdown pane, and checks for collisions first.\n       * @param {jQuery} $sub - ul element that is a submenu to show\n       * @function\n       * @private\n       * @fires DropdownMenu#show\n       */\n\n    }, {\n      key: '_show',\n      value: function _show($sub) {\n        var idx = this.$tabs.index(this.$tabs.filter(function (i, el) {\n          return $(el).find($sub).length > 0;\n        }));\n        var $sibs = $sub.parent('li.is-dropdown-submenu-parent').siblings('li.is-dropdown-submenu-parent');\n        this._hide($sibs, idx);\n        $sub.css('visibility', 'hidden').addClass('js-dropdown-active').parent('li.is-dropdown-submenu-parent').addClass('is-active');\n        var clear = Foundation.Box.ImNotTouchingYou($sub, null, true);\n        if (!clear) {\n          var oldClass = this.options.alignment === 'left' ? '-right' : '-left',\n              $parentLi = $sub.parent('.is-dropdown-submenu-parent');\n          $parentLi.removeClass('opens' + oldClass).addClass('opens-' + this.options.alignment);\n          clear = Foundation.Box.ImNotTouchingYou($sub, null, true);\n          if (!clear) {\n            $parentLi.removeClass('opens-' + this.options.alignment).addClass('opens-inner');\n          }\n          this.changed = true;\n        }\n        $sub.css('visibility', '');\n        if (this.options.closeOnClick) {\n          this._addBodyHandler();\n        }\n        /**\n         * Fires when the new dropdown pane is visible.\n         * @event DropdownMenu#show\n         */\n        this.$element.trigger('show.zf.dropdownmenu', [$sub]);\n      }\n\n      /**\n       * Hides a single, currently open dropdown pane, if passed a parameter, otherwise, hides everything.\n       * @function\n       * @param {jQuery} $elem - element with a submenu to hide\n       * @param {Number} idx - index of the $tabs collection to hide\n       * @private\n       */\n\n    }, {\n      key: '_hide',\n      value: function _hide($elem, idx) {\n        var $toClose;\n        if ($elem && $elem.length) {\n          $toClose = $elem;\n        } else if (idx !== undefined) {\n          $toClose = this.$tabs.not(function (i, el) {\n            return i === idx;\n          });\n        } else {\n          $toClose = this.$element;\n        }\n        var somethingToClose = $toClose.hasClass('is-active') || $toClose.find('.is-active').length > 0;\n\n        if (somethingToClose) {\n          $toClose.find('li.is-active').add($toClose).attr({\n            'data-is-click': false\n          }).removeClass('is-active');\n\n          $toClose.find('ul.js-dropdown-active').removeClass('js-dropdown-active');\n\n          if (this.changed || $toClose.find('opens-inner').length) {\n            var oldClass = this.options.alignment === 'left' ? 'right' : 'left';\n            $toClose.find('li.is-dropdown-submenu-parent').add($toClose).removeClass('opens-inner opens-' + this.options.alignment).addClass('opens-' + oldClass);\n            this.changed = false;\n          }\n          /**\n           * Fires when the open menus are closed.\n           * @event DropdownMenu#hide\n           */\n          this.$element.trigger('hide.zf.dropdownmenu', [$toClose]);\n        }\n      }\n\n      /**\n       * Destroys the plugin.\n       * @function\n       */\n\n    }, {\n      key: 'destroy',\n      value: function destroy() {\n        this.$menuItems.off('.zf.dropdownmenu').removeAttr('data-is-click').removeClass('is-right-arrow is-left-arrow is-down-arrow opens-right opens-left opens-inner');\n        $(document.body).off('.zf.dropdownmenu');\n        Foundation.Nest.Burn(this.$element, 'dropdown');\n        Foundation.unregisterPlugin(this);\n      }\n    }]);\n\n    return DropdownMenu;\n  }();\n\n  /**\n   * Default settings for plugin\n   */\n\n\n  DropdownMenu.defaults = {\n    /**\n     * Disallows hover events from opening submenus\n     * @option\n     * @example false\n     */\n    disableHover: false,\n    /**\n     * Allow a submenu to automatically close on a mouseleave event, if not clicked open.\n     * @option\n     * @example true\n     */\n    autoclose: true,\n    /**\n     * Amount of time to delay opening a submenu on hover event.\n     * @option\n     * @example 50\n     */\n    hoverDelay: 50,\n    /**\n     * Allow a submenu to open/remain open on parent click event. Allows cursor to move away from menu.\n     * @option\n     * @example true\n     */\n    clickOpen: false,\n    /**\n     * Amount of time to delay closing a submenu on a mouseleave event.\n     * @option\n     * @example 500\n     */\n\n    closingTime: 500,\n    /**\n     * Position of the menu relative to what direction the submenus should open. Handled by JS.\n     * @option\n     * @example 'left'\n     */\n    alignment: 'left',\n    /**\n     * Allow clicks on the body to close any open submenus.\n     * @option\n     * @example true\n     */\n    closeOnClick: true,\n    /**\n     * Allow clicks on leaf anchor links to close any open submenus.\n     * @option\n     * @example true\n     */\n    closeOnClickInside: true,\n    /**\n     * Class applied to vertical oriented menus, Foundation default is `vertical`. Update this if using your own class.\n     * @option\n     * @example 'vertical'\n     */\n    verticalClass: 'vertical',\n    /**\n     * Class applied to right-side oriented menus, Foundation default is `align-right`. Update this if using your own class.\n     * @option\n     * @example 'align-right'\n     */\n    rightClass: 'align-right',\n    /**\n     * Boolean to force overide the clicking of links to perform default action, on second touch event for mobile.\n     * @option\n     * @example false\n     */\n    forceFollow: true\n  };\n\n  // Window exports\n  Foundation.plugin(DropdownMenu, 'DropdownMenu');\n}(jQuery);\n'use strict';\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n!function ($) {\n\n  /**\n   * Equalizer module.\n   * @module foundation.equalizer\n   * @requires foundation.util.mediaQuery\n   * @requires foundation.util.timerAndImageLoader if equalizer contains images\n   */\n\n  var Equalizer = function () {\n    /**\n     * Creates a new instance of Equalizer.\n     * @class\n     * @fires Equalizer#init\n     * @param {Object} element - jQuery object to add the trigger to.\n     * @param {Object} options - Overrides to the default plugin settings.\n     */\n    function Equalizer(element, options) {\n      _classCallCheck(this, Equalizer);\n\n      this.$element = element;\n      this.options = $.extend({}, Equalizer.defaults, this.$element.data(), options);\n\n      this._init();\n\n      Foundation.registerPlugin(this, 'Equalizer');\n    }\n\n    /**\n     * Initializes the Equalizer plugin and calls functions to get equalizer functioning on load.\n     * @private\n     */\n\n\n    _createClass(Equalizer, [{\n      key: '_init',\n      value: function _init() {\n        var eqId = this.$element.attr('data-equalizer') || '';\n        var $watched = this.$element.find('[data-equalizer-watch=\"' + eqId + '\"]');\n\n        this.$watched = $watched.length ? $watched : this.$element.find('[data-equalizer-watch]');\n        this.$element.attr('data-resize', eqId || Foundation.GetYoDigits(6, 'eq'));\n        this.$element.attr('data-mutate', eqId || Foundation.GetYoDigits(6, 'eq'));\n\n        this.hasNested = this.$element.find('[data-equalizer]').length > 0;\n        this.isNested = this.$element.parentsUntil(document.body, '[data-equalizer]').length > 0;\n        this.isOn = false;\n        this._bindHandler = {\n          onResizeMeBound: this._onResizeMe.bind(this),\n          onPostEqualizedBound: this._onPostEqualized.bind(this)\n        };\n\n        var imgs = this.$element.find('img');\n        var tooSmall;\n        if (this.options.equalizeOn) {\n          tooSmall = this._checkMQ();\n          $(window).on('changed.zf.mediaquery', this._checkMQ.bind(this));\n        } else {\n          this._events();\n        }\n        if (tooSmall !== undefined && tooSmall === false || tooSmall === undefined) {\n          if (imgs.length) {\n            Foundation.onImagesLoaded(imgs, this._reflow.bind(this));\n          } else {\n            this._reflow();\n          }\n        }\n      }\n\n      /**\n       * Removes event listeners if the breakpoint is too small.\n       * @private\n       */\n\n    }, {\n      key: '_pauseEvents',\n      value: function _pauseEvents() {\n        this.isOn = false;\n        this.$element.off({\n          '.zf.equalizer': this._bindHandler.onPostEqualizedBound,\n          'resizeme.zf.trigger': this._bindHandler.onResizeMeBound,\n          'mutateme.zf.trigger': this._bindHandler.onResizeMeBound\n        });\n      }\n\n      /**\n       * function to handle $elements resizeme.zf.trigger, with bound this on _bindHandler.onResizeMeBound\n       * @private\n       */\n\n    }, {\n      key: '_onResizeMe',\n      value: function _onResizeMe(e) {\n        this._reflow();\n      }\n\n      /**\n       * function to handle $elements postequalized.zf.equalizer, with bound this on _bindHandler.onPostEqualizedBound\n       * @private\n       */\n\n    }, {\n      key: '_onPostEqualized',\n      value: function _onPostEqualized(e) {\n        if (e.target !== this.$element[0]) {\n          this._reflow();\n        }\n      }\n\n      /**\n       * Initializes events for Equalizer.\n       * @private\n       */\n\n    }, {\n      key: '_events',\n      value: function _events() {\n        var _this = this;\n        this._pauseEvents();\n        if (this.hasNested) {\n          this.$element.on('postequalized.zf.equalizer', this._bindHandler.onPostEqualizedBound);\n        } else {\n          this.$element.on('resizeme.zf.trigger', this._bindHandler.onResizeMeBound);\n          this.$element.on('mutateme.zf.trigger', this._bindHandler.onResizeMeBound);\n        }\n        this.isOn = true;\n      }\n\n      /**\n       * Checks the current breakpoint to the minimum required size.\n       * @private\n       */\n\n    }, {\n      key: '_checkMQ',\n      value: function _checkMQ() {\n        var tooSmall = !Foundation.MediaQuery.is(this.options.equalizeOn);\n        if (tooSmall) {\n          if (this.isOn) {\n            this._pauseEvents();\n            this.$watched.css('height', 'auto');\n          }\n        } else {\n          if (!this.isOn) {\n            this._events();\n          }\n        }\n        return tooSmall;\n      }\n\n      /**\n       * A noop version for the plugin\n       * @private\n       */\n\n    }, {\n      key: '_killswitch',\n      value: function _killswitch() {\n        return;\n      }\n\n      /**\n       * Calls necessary functions to update Equalizer upon DOM change\n       * @private\n       */\n\n    }, {\n      key: '_reflow',\n      value: function _reflow() {\n        if (!this.options.equalizeOnStack) {\n          if (this._isStacked()) {\n            this.$watched.css('height', 'auto');\n            return false;\n          }\n        }\n        if (this.options.equalizeByRow) {\n          this.getHeightsByRow(this.applyHeightByRow.bind(this));\n        } else {\n          this.getHeights(this.applyHeight.bind(this));\n        }\n      }\n\n      /**\n       * Manually determines if the first 2 elements are *NOT* stacked.\n       * @private\n       */\n\n    }, {\n      key: '_isStacked',\n      value: function _isStacked() {\n        if (!this.$watched[0] || !this.$watched[1]) {\n          return true;\n        }\n        return this.$watched[0].getBoundingClientRect().top !== this.$watched[1].getBoundingClientRect().top;\n      }\n\n      /**\n       * Finds the outer heights of children contained within an Equalizer parent and returns them in an array\n       * @param {Function} cb - A non-optional callback to return the heights array to.\n       * @returns {Array} heights - An array of heights of children within Equalizer container\n       */\n\n    }, {\n      key: 'getHeights',\n      value: function getHeights(cb) {\n        var heights = [];\n        for (var i = 0, len = this.$watched.length; i < len; i++) {\n          this.$watched[i].style.height = 'auto';\n          heights.push(this.$watched[i].offsetHeight);\n        }\n        cb(heights);\n      }\n\n      /**\n       * Finds the outer heights of children contained within an Equalizer parent and returns them in an array\n       * @param {Function} cb - A non-optional callback to return the heights array to.\n       * @returns {Array} groups - An array of heights of children within Equalizer container grouped by row with element,height and max as last child\n       */\n\n    }, {\n      key: 'getHeightsByRow',\n      value: function getHeightsByRow(cb) {\n        var lastElTopOffset = this.$watched.length ? this.$watched.first().offset().top : 0,\n            groups = [],\n            group = 0;\n        //group by Row\n        groups[group] = [];\n        for (var i = 0, len = this.$watched.length; i < len; i++) {\n          this.$watched[i].style.height = 'auto';\n          //maybe could use this.$watched[i].offsetTop\n          var elOffsetTop = $(this.$watched[i]).offset().top;\n          if (elOffsetTop != lastElTopOffset) {\n            group++;\n            groups[group] = [];\n            lastElTopOffset = elOffsetTop;\n          }\n          groups[group].push([this.$watched[i], this.$watched[i].offsetHeight]);\n        }\n\n        for (var j = 0, ln = groups.length; j < ln; j++) {\n          var heights = $(groups[j]).map(function () {\n            return this[1];\n          }).get();\n          var max = Math.max.apply(null, heights);\n          groups[j].push(max);\n        }\n        cb(groups);\n      }\n\n      /**\n       * Changes the CSS height property of each child in an Equalizer parent to match the tallest\n       * @param {array} heights - An array of heights of children within Equalizer container\n       * @fires Equalizer#preequalized\n       * @fires Equalizer#postequalized\n       */\n\n    }, {\n      key: 'applyHeight',\n      value: function applyHeight(heights) {\n        var max = Math.max.apply(null, heights);\n        /**\n         * Fires before the heights are applied\n         * @event Equalizer#preequalized\n         */\n        this.$element.trigger('preequalized.zf.equalizer');\n\n        this.$watched.css('height', max);\n\n        /**\n         * Fires when the heights have been applied\n         * @event Equalizer#postequalized\n         */\n        this.$element.trigger('postequalized.zf.equalizer');\n      }\n\n      /**\n       * Changes the CSS height property of each child in an Equalizer parent to match the tallest by row\n       * @param {array} groups - An array of heights of children within Equalizer container grouped by row with element,height and max as last child\n       * @fires Equalizer#preequalized\n       * @fires Equalizer#preequalizedrow\n       * @fires Equalizer#postequalizedrow\n       * @fires Equalizer#postequalized\n       */\n\n    }, {\n      key: 'applyHeightByRow',\n      value: function applyHeightByRow(groups) {\n        /**\n         * Fires before the heights are applied\n         */\n        this.$element.trigger('preequalized.zf.equalizer');\n        for (var i = 0, len = groups.length; i < len; i++) {\n          var groupsILength = groups[i].length,\n              max = groups[i][groupsILength - 1];\n          if (groupsILength <= 2) {\n            $(groups[i][0][0]).css({ 'height': 'auto' });\n            continue;\n          }\n          /**\n            * Fires before the heights per row are applied\n            * @event Equalizer#preequalizedrow\n            */\n          this.$element.trigger('preequalizedrow.zf.equalizer');\n          for (var j = 0, lenJ = groupsILength - 1; j < lenJ; j++) {\n            $(groups[i][j][0]).css({ 'height': max });\n          }\n          /**\n            * Fires when the heights per row have been applied\n            * @event Equalizer#postequalizedrow\n            */\n          this.$element.trigger('postequalizedrow.zf.equalizer');\n        }\n        /**\n         * Fires when the heights have been applied\n         */\n        this.$element.trigger('postequalized.zf.equalizer');\n      }\n\n      /**\n       * Destroys an instance of Equalizer.\n       * @function\n       */\n\n    }, {\n      key: 'destroy',\n      value: function destroy() {\n        this._pauseEvents();\n        this.$watched.css('height', 'auto');\n\n        Foundation.unregisterPlugin(this);\n      }\n    }]);\n\n    return Equalizer;\n  }();\n\n  /**\n   * Default settings for plugin\n   */\n\n\n  Equalizer.defaults = {\n    /**\n     * Enable height equalization when stacked on smaller screens.\n     * @option\n     * @example true\n     */\n    equalizeOnStack: false,\n    /**\n     * Enable height equalization row by row.\n     * @option\n     * @example false\n     */\n    equalizeByRow: false,\n    /**\n     * String representing the minimum breakpoint size the plugin should equalize heights on.\n     * @option\n     * @example 'medium'\n     */\n    equalizeOn: ''\n  };\n\n  // Window exports\n  Foundation.plugin(Equalizer, 'Equalizer');\n}(jQuery);\n'use strict';\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n!function ($) {\n\n  /**\n   * Interchange module.\n   * @module foundation.interchange\n   * @requires foundation.util.mediaQuery\n   * @requires foundation.util.timerAndImageLoader\n   */\n\n  var Interchange = function () {\n    /**\n     * Creates a new instance of Interchange.\n     * @class\n     * @fires Interchange#init\n     * @param {Object} element - jQuery object to add the trigger to.\n     * @param {Object} options - Overrides to the default plugin settings.\n     */\n    function Interchange(element, options) {\n      _classCallCheck(this, Interchange);\n\n      this.$element = element;\n      this.options = $.extend({}, Interchange.defaults, options);\n      this.rules = [];\n      this.currentPath = '';\n\n      this._init();\n      this._events();\n\n      Foundation.registerPlugin(this, 'Interchange');\n    }\n\n    /**\n     * Initializes the Interchange plugin and calls functions to get interchange functioning on load.\n     * @function\n     * @private\n     */\n\n\n    _createClass(Interchange, [{\n      key: '_init',\n      value: function _init() {\n        this._addBreakpoints();\n        this._generateRules();\n        this._reflow();\n      }\n\n      /**\n       * Initializes events for Interchange.\n       * @function\n       * @private\n       */\n\n    }, {\n      key: '_events',\n      value: function _events() {\n        var _this2 = this;\n\n        $(window).on('resize.zf.interchange', Foundation.util.throttle(function () {\n          _this2._reflow();\n        }, 50));\n      }\n\n      /**\n       * Calls necessary functions to update Interchange upon DOM change\n       * @function\n       * @private\n       */\n\n    }, {\n      key: '_reflow',\n      value: function _reflow() {\n        var match;\n\n        // Iterate through each rule, but only save the last match\n        for (var i in this.rules) {\n          if (this.rules.hasOwnProperty(i)) {\n            var rule = this.rules[i];\n            if (window.matchMedia(rule.query).matches) {\n              match = rule;\n            }\n          }\n        }\n\n        if (match) {\n          this.replace(match.path);\n        }\n      }\n\n      /**\n       * Gets the Foundation breakpoints and adds them to the Interchange.SPECIAL_QUERIES object.\n       * @function\n       * @private\n       */\n\n    }, {\n      key: '_addBreakpoints',\n      value: function _addBreakpoints() {\n        for (var i in Foundation.MediaQuery.queries) {\n          if (Foundation.MediaQuery.queries.hasOwnProperty(i)) {\n            var query = Foundation.MediaQuery.queries[i];\n            Interchange.SPECIAL_QUERIES[query.name] = query.value;\n          }\n        }\n      }\n\n      /**\n       * Checks the Interchange element for the provided media query + content pairings\n       * @function\n       * @private\n       * @param {Object} element - jQuery object that is an Interchange instance\n       * @returns {Array} scenarios - Array of objects that have 'mq' and 'path' keys with corresponding keys\n       */\n\n    }, {\n      key: '_generateRules',\n      value: function _generateRules(element) {\n        var rulesList = [];\n        var rules;\n\n        if (this.options.rules) {\n          rules = this.options.rules;\n        } else {\n          rules = this.$element.data('interchange').match(/\\[.*?\\]/g);\n        }\n\n        for (var i in rules) {\n          if (rules.hasOwnProperty(i)) {\n            var rule = rules[i].slice(1, -1).split(', ');\n            var path = rule.slice(0, -1).join('');\n            var query = rule[rule.length - 1];\n\n            if (Interchange.SPECIAL_QUERIES[query]) {\n              query = Interchange.SPECIAL_QUERIES[query];\n            }\n\n            rulesList.push({\n              path: path,\n              query: query\n            });\n          }\n        }\n\n        this.rules = rulesList;\n      }\n\n      /**\n       * Update the `src` property of an image, or change the HTML of a container, to the specified path.\n       * @function\n       * @param {String} path - Path to the image or HTML partial.\n       * @fires Interchange#replaced\n       */\n\n    }, {\n      key: 'replace',\n      value: function replace(path) {\n        if (this.currentPath === path) return;\n\n        var _this = this,\n            trigger = 'replaced.zf.interchange';\n\n        // Replacing images\n        if (this.$element[0].nodeName === 'IMG') {\n          this.$element.attr('src', path).on('load', function () {\n            _this.currentPath = path;\n          }).trigger(trigger);\n        }\n        // Replacing background images\n        else if (path.match(/\\.(gif|jpg|jpeg|png|svg|tiff)([?#].*)?/i)) {\n            this.$element.css({ 'background-image': 'url(' + path + ')' }).trigger(trigger);\n          }\n          // Replacing HTML\n          else {\n              $.get(path, function (response) {\n                _this.$element.html(response).trigger(trigger);\n                $(response).foundation();\n                _this.currentPath = path;\n              });\n            }\n\n        /**\n         * Fires when content in an Interchange element is done being loaded.\n         * @event Interchange#replaced\n         */\n        // this.$element.trigger('replaced.zf.interchange');\n      }\n\n      /**\n       * Destroys an instance of interchange.\n       * @function\n       */\n\n    }, {\n      key: 'destroy',\n      value: function destroy() {\n        //TODO this.\n      }\n    }]);\n\n    return Interchange;\n  }();\n\n  /**\n   * Default settings for plugin\n   */\n\n\n  Interchange.defaults = {\n    /**\n     * Rules to be applied to Interchange elements. Set with the `data-interchange` array notation.\n     * @option\n     */\n    rules: null\n  };\n\n  Interchange.SPECIAL_QUERIES = {\n    'landscape': 'screen and (orientation: landscape)',\n    'portrait': 'screen and (orientation: portrait)',\n    'retina': 'only screen and (-webkit-min-device-pixel-ratio: 2), only screen and (min--moz-device-pixel-ratio: 2), only screen and (-o-min-device-pixel-ratio: 2/1), only screen and (min-device-pixel-ratio: 2), only screen and (min-resolution: 192dpi), only screen and (min-resolution: 2dppx)'\n  };\n\n  // Window exports\n  Foundation.plugin(Interchange, 'Interchange');\n}(jQuery);\n'use strict';\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n!function ($) {\n\n  /**\n   * Magellan module.\n   * @module foundation.magellan\n   */\n\n  var Magellan = function () {\n    /**\n     * Creates a new instance of Magellan.\n     * @class\n     * @fires Magellan#init\n     * @param {Object} element - jQuery object to add the trigger to.\n     * @param {Object} options - Overrides to the default plugin settings.\n     */\n    function Magellan(element, options) {\n      _classCallCheck(this, Magellan);\n\n      this.$element = element;\n      this.options = $.extend({}, Magellan.defaults, this.$element.data(), options);\n\n      this._init();\n      this.calcPoints();\n\n      Foundation.registerPlugin(this, 'Magellan');\n    }\n\n    /**\n     * Initializes the Magellan plugin and calls functions to get equalizer functioning on load.\n     * @private\n     */\n\n\n    _createClass(Magellan, [{\n      key: '_init',\n      value: function _init() {\n        var id = this.$element[0].id || Foundation.GetYoDigits(6, 'magellan');\n        var _this = this;\n        this.$targets = $('[data-magellan-target]');\n        this.$links = this.$element.find('a');\n        this.$element.attr({\n          'data-resize': id,\n          'data-scroll': id,\n          'id': id\n        });\n        this.$active = $();\n        this.scrollPos = parseInt(window.pageYOffset, 10);\n\n        this._events();\n      }\n\n      /**\n       * Calculates an array of pixel values that are the demarcation lines between locations on the page.\n       * Can be invoked if new elements are added or the size of a location changes.\n       * @function\n       */\n\n    }, {\n      key: 'calcPoints',\n      value: function calcPoints() {\n        var _this = this,\n            body = document.body,\n            html = document.documentElement;\n\n        this.points = [];\n        this.winHeight = Math.round(Math.max(window.innerHeight, html.clientHeight));\n        this.docHeight = Math.round(Math.max(body.scrollHeight, body.offsetHeight, html.clientHeight, html.scrollHeight, html.offsetHeight));\n\n        this.$targets.each(function () {\n          var $tar = $(this),\n              pt = Math.round($tar.offset().top - _this.options.threshold);\n          $tar.targetPoint = pt;\n          _this.points.push(pt);\n        });\n      }\n\n      /**\n       * Initializes events for Magellan.\n       * @private\n       */\n\n    }, {\n      key: '_events',\n      value: function _events() {\n        var _this = this,\n            $body = $('html, body'),\n            opts = {\n          duration: _this.options.animationDuration,\n          easing: _this.options.animationEasing\n        };\n        $(window).one('load', function () {\n          if (_this.options.deepLinking) {\n            if (location.hash) {\n              _this.scrollToLoc(location.hash);\n            }\n          }\n          _this.calcPoints();\n          _this._updateActive();\n        });\n\n        this.$element.on({\n          'resizeme.zf.trigger': this.reflow.bind(this),\n          'scrollme.zf.trigger': this._updateActive.bind(this)\n        }).on('click.zf.magellan', 'a[href^=\"#\"]', function (e) {\n          e.preventDefault();\n          var arrival = this.getAttribute('href');\n          _this.scrollToLoc(arrival);\n        });\n        $(window).on('popstate', function (e) {\n          if (_this.options.deepLinking) {\n            _this.scrollToLoc(window.location.hash);\n          }\n        });\n      }\n\n      /**\n       * Function to scroll to a given location on the page.\n       * @param {String} loc - a properly formatted jQuery id selector. Example: '#foo'\n       * @function\n       */\n\n    }, {\n      key: 'scrollToLoc',\n      value: function scrollToLoc(loc) {\n        // Do nothing if target does not exist to prevent errors\n        if (!$(loc).length) {\n          return false;\n        }\n        this._inTransition = true;\n        var _this = this,\n            scrollPos = Math.round($(loc).offset().top - this.options.threshold / 2 - this.options.barOffset);\n\n        $('html, body').stop(true).animate({ scrollTop: scrollPos }, this.options.animationDuration, this.options.animationEasing, function () {\n          _this._inTransition = false;_this._updateActive();\n        });\n      }\n\n      /**\n       * Calls necessary functions to update Magellan upon DOM change\n       * @function\n       */\n\n    }, {\n      key: 'reflow',\n      value: function reflow() {\n        this.calcPoints();\n        this._updateActive();\n      }\n\n      /**\n       * Updates the visibility of an active location link, and updates the url hash for the page, if deepLinking enabled.\n       * @private\n       * @function\n       * @fires Magellan#update\n       */\n\n    }, {\n      key: '_updateActive',\n      value: function _updateActive() /*evt, elem, scrollPos*/{\n        if (this._inTransition) {\n          return;\n        }\n        var winPos = /*scrollPos ||*/parseInt(window.pageYOffset, 10),\n            curIdx;\n\n        if (winPos + this.winHeight === this.docHeight) {\n          curIdx = this.points.length - 1;\n        } else if (winPos < this.points[0]) {\n          curIdx = undefined;\n        } else {\n          var isDown = this.scrollPos < winPos,\n              _this = this,\n              curVisible = this.points.filter(function (p, i) {\n            return isDown ? p - _this.options.barOffset <= winPos : p - _this.options.barOffset - _this.options.threshold <= winPos;\n          });\n          curIdx = curVisible.length ? curVisible.length - 1 : 0;\n        }\n\n        this.$active.removeClass(this.options.activeClass);\n        this.$active = this.$links.filter('[href=\"#' + this.$targets.eq(curIdx).data('magellan-target') + '\"]').addClass(this.options.activeClass);\n\n        if (this.options.deepLinking) {\n          var hash = \"\";\n          if (curIdx != undefined) {\n            hash = this.$active[0].getAttribute('href');\n          }\n          if (hash !== window.location.hash) {\n            if (window.history.pushState) {\n              window.history.pushState(null, null, hash);\n            } else {\n              window.location.hash = hash;\n            }\n          }\n        }\n\n        this.scrollPos = winPos;\n        /**\n         * Fires when magellan is finished updating to the new active element.\n         * @event Magellan#update\n         */\n        this.$element.trigger('update.zf.magellan', [this.$active]);\n      }\n\n      /**\n       * Destroys an instance of Magellan and resets the url of the window.\n       * @function\n       */\n\n    }, {\n      key: 'destroy',\n      value: function destroy() {\n        this.$element.off('.zf.trigger .zf.magellan').find('.' + this.options.activeClass).removeClass(this.options.activeClass);\n\n        if (this.options.deepLinking) {\n          var hash = this.$active[0].getAttribute('href');\n          window.location.hash.replace(hash, '');\n        }\n\n        Foundation.unregisterPlugin(this);\n      }\n    }]);\n\n    return Magellan;\n  }();\n\n  /**\n   * Default settings for plugin\n   */\n\n\n  Magellan.defaults = {\n    /**\n     * Amount of time, in ms, the animated scrolling should take between locations.\n     * @option\n     * @example 500\n     */\n    animationDuration: 500,\n    /**\n     * Animation style to use when scrolling between locations.\n     * @option\n     * @example 'ease-in-out'\n     */\n    animationEasing: 'linear',\n    /**\n     * Number of pixels to use as a marker for location changes.\n     * @option\n     * @example 50\n     */\n    threshold: 50,\n    /**\n     * Class applied to the active locations link on the magellan container.\n     * @option\n     * @example 'active'\n     */\n    activeClass: 'active',\n    /**\n     * Allows the script to manipulate the url of the current page, and if supported, alter the history.\n     * @option\n     * @example true\n     */\n    deepLinking: false,\n    /**\n     * Number of pixels to offset the scroll of the page on item click if using a sticky nav bar.\n     * @option\n     * @example 25\n     */\n    barOffset: 0\n  };\n\n  // Window exports\n  Foundation.plugin(Magellan, 'Magellan');\n}(jQuery);\n'use strict';\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n!function ($) {\n\n  /**\n   * OffCanvas module.\n   * @module foundation.offcanvas\n   * @requires foundation.util.mediaQuery\n   * @requires foundation.util.triggers\n   * @requires foundation.util.motion\n   */\n\n  var OffCanvas = function () {\n    /**\n     * Creates a new instance of an off-canvas wrapper.\n     * @class\n     * @fires OffCanvas#init\n     * @param {Object} element - jQuery object to initialize.\n     * @param {Object} options - Overrides to the default plugin settings.\n     */\n    function OffCanvas(element, options) {\n      _classCallCheck(this, OffCanvas);\n\n      this.$element = element;\n      this.options = $.extend({}, OffCanvas.defaults, this.$element.data(), options);\n      this.$lastTrigger = $();\n      this.$triggers = $();\n\n      this._init();\n      this._events();\n\n      Foundation.registerPlugin(this, 'OffCanvas');\n      Foundation.Keyboard.register('OffCanvas', {\n        'ESCAPE': 'close'\n      });\n    }\n\n    /**\n     * Initializes the off-canvas wrapper by adding the exit overlay (if needed).\n     * @function\n     * @private\n     */\n\n\n    _createClass(OffCanvas, [{\n      key: '_init',\n      value: function _init() {\n        var id = this.$element.attr('id');\n\n        this.$element.attr('aria-hidden', 'true');\n\n        this.$element.addClass('is-transition-' + this.options.transition);\n\n        // Find triggers that affect this element and add aria-expanded to them\n        this.$triggers = $(document).find('[data-open=\"' + id + '\"], [data-close=\"' + id + '\"], [data-toggle=\"' + id + '\"]').attr('aria-expanded', 'false').attr('aria-controls', id);\n\n        // Add an overlay over the content if necessary\n        if (this.options.contentOverlay === true) {\n          var overlay = document.createElement('div');\n          var overlayPosition = $(this.$element).css(\"position\") === 'fixed' ? 'is-overlay-fixed' : 'is-overlay-absolute';\n          overlay.setAttribute('class', 'js-off-canvas-overlay ' + overlayPosition);\n          this.$overlay = $(overlay);\n          if (overlayPosition === 'is-overlay-fixed') {\n            $('body').append(this.$overlay);\n          } else {\n            this.$element.siblings('[data-off-canvas-content]').append(this.$overlay);\n          }\n        }\n\n        this.options.isRevealed = this.options.isRevealed || new RegExp(this.options.revealClass, 'g').test(this.$element[0].className);\n\n        if (this.options.isRevealed === true) {\n          this.options.revealOn = this.options.revealOn || this.$element[0].className.match(/(reveal-for-medium|reveal-for-large)/g)[0].split('-')[2];\n          this._setMQChecker();\n        }\n        if (!this.options.transitionTime === true) {\n          this.options.transitionTime = parseFloat(window.getComputedStyle($('[data-off-canvas]')[0]).transitionDuration) * 1000;\n        }\n      }\n\n      /**\n       * Adds event handlers to the off-canvas wrapper and the exit overlay.\n       * @function\n       * @private\n       */\n\n    }, {\n      key: '_events',\n      value: function _events() {\n        this.$element.off('.zf.trigger .zf.offcanvas').on({\n          'open.zf.trigger': this.open.bind(this),\n          'close.zf.trigger': this.close.bind(this),\n          'toggle.zf.trigger': this.toggle.bind(this),\n          'keydown.zf.offcanvas': this._handleKeyboard.bind(this)\n        });\n\n        if (this.options.closeOnClick === true) {\n          var $target = this.options.contentOverlay ? this.$overlay : $('[data-off-canvas-content]');\n          $target.on({ 'click.zf.offcanvas': this.close.bind(this) });\n        }\n      }\n\n      /**\n       * Applies event listener for elements that will reveal at certain breakpoints.\n       * @private\n       */\n\n    }, {\n      key: '_setMQChecker',\n      value: function _setMQChecker() {\n        var _this = this;\n\n        $(window).on('changed.zf.mediaquery', function () {\n          if (Foundation.MediaQuery.atLeast(_this.options.revealOn)) {\n            _this.reveal(true);\n          } else {\n            _this.reveal(false);\n          }\n        }).one('load.zf.offcanvas', function () {\n          if (Foundation.MediaQuery.atLeast(_this.options.revealOn)) {\n            _this.reveal(true);\n          }\n        });\n      }\n\n      /**\n       * Handles the revealing/hiding the off-canvas at breakpoints, not the same as open.\n       * @param {Boolean} isRevealed - true if element should be revealed.\n       * @function\n       */\n\n    }, {\n      key: 'reveal',\n      value: function reveal(isRevealed) {\n        var $closer = this.$element.find('[data-close]');\n        if (isRevealed) {\n          this.close();\n          this.isRevealed = true;\n          this.$element.attr('aria-hidden', 'false');\n          this.$element.off('open.zf.trigger toggle.zf.trigger');\n          if ($closer.length) {\n            $closer.hide();\n          }\n        } else {\n          this.isRevealed = false;\n          this.$element.attr('aria-hidden', 'true');\n          this.$element.on({\n            'open.zf.trigger': this.open.bind(this),\n            'toggle.zf.trigger': this.toggle.bind(this)\n          });\n          if ($closer.length) {\n            $closer.show();\n          }\n        }\n      }\n\n      /**\n       * Stops scrolling of the body when offcanvas is open on mobile Safari and other troublesome browsers.\n       * @private\n       */\n\n    }, {\n      key: '_stopScrolling',\n      value: function _stopScrolling(event) {\n        return false;\n      }\n\n      /**\n       * Opens the off-canvas menu.\n       * @function\n       * @param {Object} event - Event object passed from listener.\n       * @param {jQuery} trigger - element that triggered the off-canvas to open.\n       * @fires OffCanvas#opened\n       */\n\n    }, {\n      key: 'open',\n      value: function open(event, trigger) {\n        if (this.$element.hasClass('is-open') || this.isRevealed) {\n          return;\n        }\n        var _this = this;\n\n        if (trigger) {\n          this.$lastTrigger = trigger;\n        }\n\n        if (this.options.forceTo === 'top') {\n          window.scrollTo(0, 0);\n        } else if (this.options.forceTo === 'bottom') {\n          window.scrollTo(0, document.body.scrollHeight);\n        }\n\n        /**\n         * Fires when the off-canvas menu opens.\n         * @event OffCanvas#opened\n         */\n        _this.$element.addClass('is-open');\n\n        this.$triggers.attr('aria-expanded', 'true');\n        this.$element.attr('aria-hidden', 'false').trigger('opened.zf.offcanvas');\n\n        // If `contentScroll` is set to false, add class and disable scrolling on touch devices.\n        if (this.options.contentScroll === false) {\n          $('body').addClass('is-off-canvas-open').on('touchmove', this._stopScrolling);\n        }\n\n        if (this.options.contentOverlay === true) {\n          this.$overlay.addClass('is-visible');\n        }\n\n        if (this.options.closeOnClick === true && this.options.contentOverlay === true) {\n          this.$overlay.addClass('is-closable');\n        }\n\n        if (this.options.autoFocus === true) {\n          this.$element.one(Foundation.transitionend(this.$element), function () {\n            _this.$element.find('a, button').eq(0).focus();\n          });\n        }\n\n        if (this.options.trapFocus === true) {\n          this.$element.siblings('[data-off-canvas-content]').attr('tabindex', '-1');\n          Foundation.Keyboard.trapFocus(this.$element);\n        }\n      }\n\n      /**\n       * Closes the off-canvas menu.\n       * @function\n       * @param {Function} cb - optional cb to fire after closure.\n       * @fires OffCanvas#closed\n       */\n\n    }, {\n      key: 'close',\n      value: function close(cb) {\n        if (!this.$element.hasClass('is-open') || this.isRevealed) {\n          return;\n        }\n\n        var _this = this;\n\n        _this.$element.removeClass('is-open');\n\n        this.$element.attr('aria-hidden', 'true')\n        /**\n         * Fires when the off-canvas menu opens.\n         * @event OffCanvas#closed\n         */\n        .trigger('closed.zf.offcanvas');\n\n        // If `contentScroll` is set to false, remove class and re-enable scrolling on touch devices.\n        if (this.options.contentScroll === false) {\n          $('body').removeClass('is-off-canvas-open').off('touchmove', this._stopScrolling);\n        }\n\n        if (this.options.contentOverlay === true) {\n          this.$overlay.removeClass('is-visible');\n        }\n\n        if (this.options.closeOnClick === true && this.options.contentOverlay === true) {\n          this.$overlay.removeClass('is-closable');\n        }\n\n        this.$triggers.attr('aria-expanded', 'false');\n\n        if (this.options.trapFocus === true) {\n          this.$element.siblings('[data-off-canvas-content]').removeAttr('tabindex');\n          Foundation.Keyboard.releaseFocus(this.$element);\n        }\n      }\n\n      /**\n       * Toggles the off-canvas menu open or closed.\n       * @function\n       * @param {Object} event - Event object passed from listener.\n       * @param {jQuery} trigger - element that triggered the off-canvas to open.\n       */\n\n    }, {\n      key: 'toggle',\n      value: function toggle(event, trigger) {\n        if (this.$element.hasClass('is-open')) {\n          this.close(event, trigger);\n        } else {\n          this.open(event, trigger);\n        }\n      }\n\n      /**\n       * Handles keyboard input when detected. When the escape key is pressed, the off-canvas menu closes, and focus is restored to the element that opened the menu.\n       * @function\n       * @private\n       */\n\n    }, {\n      key: '_handleKeyboard',\n      value: function _handleKeyboard(e) {\n        var _this2 = this;\n\n        Foundation.Keyboard.handleKey(e, 'OffCanvas', {\n          close: function () {\n            _this2.close();\n            _this2.$lastTrigger.focus();\n            return true;\n          },\n          handled: function () {\n            e.stopPropagation();\n            e.preventDefault();\n          }\n        });\n      }\n\n      /**\n       * Destroys the offcanvas plugin.\n       * @function\n       */\n\n    }, {\n      key: 'destroy',\n      value: function destroy() {\n        this.close();\n        this.$element.off('.zf.trigger .zf.offcanvas');\n        this.$overlay.off('.zf.offcanvas');\n\n        Foundation.unregisterPlugin(this);\n      }\n    }]);\n\n    return OffCanvas;\n  }();\n\n  OffCanvas.defaults = {\n    /**\n     * Allow the user to click outside of the menu to close it.\n     * @option\n     * @example true\n     */\n    closeOnClick: true,\n\n    /**\n     * Adds an overlay on top of `[data-off-canvas-content]`.\n     * @option\n     * @example true\n     */\n    contentOverlay: true,\n\n    /**\n     * Enable/disable scrolling of the main content when an off canvas panel is open.\n     * @option\n     * @example true\n     */\n    contentScroll: true,\n\n    /**\n     * Amount of time in ms the open and close transition requires. If none selected, pulls from body style.\n     * @option\n     * @example 500\n     */\n    transitionTime: 0,\n\n    /**\n     * Type of transition for the offcanvas menu. Options are 'push', 'detached' or 'slide'.\n     * @option\n     * @example push\n     */\n    transition: 'push',\n\n    /**\n     * Force the page to scroll to top or bottom on open.\n     * @option\n     * @example top\n     */\n    forceTo: null,\n\n    /**\n     * Allow the offcanvas to remain open for certain breakpoints.\n     * @option\n     * @example false\n     */\n    isRevealed: false,\n\n    /**\n     * Breakpoint at which to reveal. JS will use a RegExp to target standard classes, if changing classnames, pass your class with the `revealClass` option.\n     * @option\n     * @example reveal-for-large\n     */\n    revealOn: null,\n\n    /**\n     * Force focus to the offcanvas on open. If true, will focus the opening trigger on close.\n     * @option\n     * @example true\n     */\n    autoFocus: true,\n\n    /**\n     * Class used to force an offcanvas to remain open. Foundation defaults for this are `reveal-for-large` & `reveal-for-medium`.\n     * @option\n     * TODO improve the regex testing for this.\n     * @example reveal-for-large\n     */\n    revealClass: 'reveal-for-',\n\n    /**\n     * Triggers optional focus trapping when opening an offcanvas. Sets tabindex of [data-off-canvas-content] to -1 for accessibility purposes.\n     * @option\n     * @example true\n     */\n    trapFocus: false\n  };\n\n  // Window exports\n  Foundation.plugin(OffCanvas, 'OffCanvas');\n}(jQuery);\n'use strict';\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n!function ($) {\n\n  /**\n   * Orbit module.\n   * @module foundation.orbit\n   * @requires foundation.util.keyboard\n   * @requires foundation.util.motion\n   * @requires foundation.util.timerAndImageLoader\n   * @requires foundation.util.touch\n   */\n\n  var Orbit = function () {\n    /**\n    * Creates a new instance of an orbit carousel.\n    * @class\n    * @param {jQuery} element - jQuery object to make into an Orbit Carousel.\n    * @param {Object} options - Overrides to the default plugin settings.\n    */\n    function Orbit(element, options) {\n      _classCallCheck(this, Orbit);\n\n      this.$element = element;\n      this.options = $.extend({}, Orbit.defaults, this.$element.data(), options);\n\n      this._init();\n\n      Foundation.registerPlugin(this, 'Orbit');\n      Foundation.Keyboard.register('Orbit', {\n        'ltr': {\n          'ARROW_RIGHT': 'next',\n          'ARROW_LEFT': 'previous'\n        },\n        'rtl': {\n          'ARROW_LEFT': 'next',\n          'ARROW_RIGHT': 'previous'\n        }\n      });\n    }\n\n    /**\n    * Initializes the plugin by creating jQuery collections, setting attributes, and starting the animation.\n    * @function\n    * @private\n    */\n\n\n    _createClass(Orbit, [{\n      key: '_init',\n      value: function _init() {\n        // @TODO: consider discussion on PR #9278 about DOM pollution by changeSlide\n        this._reset();\n\n        this.$wrapper = this.$element.find('.' + this.options.containerClass);\n        this.$slides = this.$element.find('.' + this.options.slideClass);\n\n        var $images = this.$element.find('img'),\n            initActive = this.$slides.filter('.is-active'),\n            id = this.$element[0].id || Foundation.GetYoDigits(6, 'orbit');\n\n        this.$element.attr({\n          'data-resize': id,\n          'id': id\n        });\n\n        if (!initActive.length) {\n          this.$slides.eq(0).addClass('is-active');\n        }\n\n        if (!this.options.useMUI) {\n          this.$slides.addClass('no-motionui');\n        }\n\n        if ($images.length) {\n          Foundation.onImagesLoaded($images, this._prepareForOrbit.bind(this));\n        } else {\n          this._prepareForOrbit(); //hehe\n        }\n\n        if (this.options.bullets) {\n          this._loadBullets();\n        }\n\n        this._events();\n\n        if (this.options.autoPlay && this.$slides.length > 1) {\n          this.geoSync();\n        }\n\n        if (this.options.accessible) {\n          // allow wrapper to be focusable to enable arrow navigation\n          this.$wrapper.attr('tabindex', 0);\n        }\n      }\n\n      /**\n      * Creates a jQuery collection of bullets, if they are being used.\n      * @function\n      * @private\n      */\n\n    }, {\n      key: '_loadBullets',\n      value: function _loadBullets() {\n        this.$bullets = this.$element.find('.' + this.options.boxOfBullets).find('button');\n      }\n\n      /**\n      * Sets a `timer` object on the orbit, and starts the counter for the next slide.\n      * @function\n      */\n\n    }, {\n      key: 'geoSync',\n      value: function geoSync() {\n        var _this = this;\n        this.timer = new Foundation.Timer(this.$element, {\n          duration: this.options.timerDelay,\n          infinite: false\n        }, function () {\n          _this.changeSlide(true);\n        });\n        this.timer.start();\n      }\n\n      /**\n      * Sets wrapper and slide heights for the orbit.\n      * @function\n      * @private\n      */\n\n    }, {\n      key: '_prepareForOrbit',\n      value: function _prepareForOrbit() {\n        var _this = this;\n        this._setWrapperHeight();\n      }\n\n      /**\n      * Calulates the height of each slide in the collection, and uses the tallest one for the wrapper height.\n      * @function\n      * @private\n      * @param {Function} cb - a callback function to fire when complete.\n      */\n\n    }, {\n      key: '_setWrapperHeight',\n      value: function _setWrapperHeight(cb) {\n        //rewrite this to `for` loop\n        var max = 0,\n            temp,\n            counter = 0,\n            _this = this;\n\n        this.$slides.each(function () {\n          temp = this.getBoundingClientRect().height;\n          $(this).attr('data-slide', counter);\n\n          if (_this.$slides.filter('.is-active')[0] !== _this.$slides.eq(counter)[0]) {\n            //if not the active slide, set css position and display property\n            $(this).css({ 'position': 'relative', 'display': 'none' });\n          }\n          max = temp > max ? temp : max;\n          counter++;\n        });\n\n        if (counter === this.$slides.length) {\n          this.$wrapper.css({ 'height': max }); //only change the wrapper height property once.\n          if (cb) {\n            cb(max);\n          } //fire callback with max height dimension.\n        }\n      }\n\n      /**\n      * Sets the max-height of each slide.\n      * @function\n      * @private\n      */\n\n    }, {\n      key: '_setSlideHeight',\n      value: function _setSlideHeight(height) {\n        this.$slides.each(function () {\n          $(this).css('max-height', height);\n        });\n      }\n\n      /**\n      * Adds event listeners to basically everything within the element.\n      * @function\n      * @private\n      */\n\n    }, {\n      key: '_events',\n      value: function _events() {\n        var _this = this;\n\n        //***************************************\n        //**Now using custom event - thanks to:**\n        //**      Yohai Ararat of Toronto      **\n        //***************************************\n        //\n        this.$element.off('.resizeme.zf.trigger').on({\n          'resizeme.zf.trigger': this._prepareForOrbit.bind(this)\n        });\n        if (this.$slides.length > 1) {\n\n          if (this.options.swipe) {\n            this.$slides.off('swipeleft.zf.orbit swiperight.zf.orbit').on('swipeleft.zf.orbit', function (e) {\n              e.preventDefault();\n              _this.changeSlide(true);\n            }).on('swiperight.zf.orbit', function (e) {\n              e.preventDefault();\n              _this.changeSlide(false);\n            });\n          }\n          //***************************************\n\n          if (this.options.autoPlay) {\n            this.$slides.on('click.zf.orbit', function () {\n              _this.$element.data('clickedOn', _this.$element.data('clickedOn') ? false : true);\n              _this.timer[_this.$element.data('clickedOn') ? 'pause' : 'start']();\n            });\n\n            if (this.options.pauseOnHover) {\n              this.$element.on('mouseenter.zf.orbit', function () {\n                _this.timer.pause();\n              }).on('mouseleave.zf.orbit', function () {\n                if (!_this.$element.data('clickedOn')) {\n                  _this.timer.start();\n                }\n              });\n            }\n          }\n\n          if (this.options.navButtons) {\n            var $controls = this.$element.find('.' + this.options.nextClass + ', .' + this.options.prevClass);\n            $controls.attr('tabindex', 0)\n            //also need to handle enter/return and spacebar key presses\n            .on('click.zf.orbit touchend.zf.orbit', function (e) {\n              e.preventDefault();\n              _this.changeSlide($(this).hasClass(_this.options.nextClass));\n            });\n          }\n\n          if (this.options.bullets) {\n            this.$bullets.on('click.zf.orbit touchend.zf.orbit', function () {\n              if (/is-active/g.test(this.className)) {\n                return false;\n              } //if this is active, kick out of function.\n              var idx = $(this).data('slide'),\n                  ltr = idx > _this.$slides.filter('.is-active').data('slide'),\n                  $slide = _this.$slides.eq(idx);\n\n              _this.changeSlide(ltr, $slide, idx);\n            });\n          }\n\n          if (this.options.accessible) {\n            this.$wrapper.add(this.$bullets).on('keydown.zf.orbit', function (e) {\n              // handle keyboard event with keyboard util\n              Foundation.Keyboard.handleKey(e, 'Orbit', {\n                next: function () {\n                  _this.changeSlide(true);\n                },\n                previous: function () {\n                  _this.changeSlide(false);\n                },\n                handled: function () {\n                  // if bullet is focused, make sure focus moves\n                  if ($(e.target).is(_this.$bullets)) {\n                    _this.$bullets.filter('.is-active').focus();\n                  }\n                }\n              });\n            });\n          }\n        }\n      }\n\n      /**\n       * Resets Orbit so it can be reinitialized\n       */\n\n    }, {\n      key: '_reset',\n      value: function _reset() {\n        // Don't do anything if there are no slides (first run)\n        if (typeof this.$slides == 'undefined') {\n          return;\n        }\n\n        if (this.$slides.length > 1) {\n          // Remove old events\n          this.$element.off('.zf.orbit').find('*').off('.zf.orbit');\n\n          // Restart timer if autoPlay is enabled\n          if (this.options.autoPlay) {\n            this.timer.restart();\n          }\n\n          // Reset all sliddes\n          this.$slides.each(function (el) {\n            $(el).removeClass('is-active is-active is-in').removeAttr('aria-live').hide();\n          });\n\n          // Show the first slide\n          this.$slides.first().addClass('is-active').show();\n\n          // Triggers when the slide has finished animating\n          this.$element.trigger('slidechange.zf.orbit', [this.$slides.first()]);\n\n          // Select first bullet if bullets are present\n          if (this.options.bullets) {\n            this._updateBullets(0);\n          }\n        }\n      }\n\n      /**\n      * Changes the current slide to a new one.\n      * @function\n      * @param {Boolean} isLTR - flag if the slide should move left to right.\n      * @param {jQuery} chosenSlide - the jQuery element of the slide to show next, if one is selected.\n      * @param {Number} idx - the index of the new slide in its collection, if one chosen.\n      * @fires Orbit#slidechange\n      */\n\n    }, {\n      key: 'changeSlide',\n      value: function changeSlide(isLTR, chosenSlide, idx) {\n        if (!this.$slides) {\n          return;\n        } // Don't freak out if we're in the middle of cleanup\n        var $curSlide = this.$slides.filter('.is-active').eq(0);\n\n        if (/mui/g.test($curSlide[0].className)) {\n          return false;\n        } //if the slide is currently animating, kick out of the function\n\n        var $firstSlide = this.$slides.first(),\n            $lastSlide = this.$slides.last(),\n            dirIn = isLTR ? 'Right' : 'Left',\n            dirOut = isLTR ? 'Left' : 'Right',\n            _this = this,\n            $newSlide;\n\n        if (!chosenSlide) {\n          //most of the time, this will be auto played or clicked from the navButtons.\n          $newSlide = isLTR ? //if wrapping enabled, check to see if there is a `next` or `prev` sibling, if not, select the first or last slide to fill in. if wrapping not enabled, attempt to select `next` or `prev`, if there's nothing there, the function will kick out on next step. CRAZY NESTED TERNARIES!!!!!\n          this.options.infiniteWrap ? $curSlide.next('.' + this.options.slideClass).length ? $curSlide.next('.' + this.options.slideClass) : $firstSlide : $curSlide.next('.' + this.options.slideClass) : //pick next slide if moving left to right\n          this.options.infiniteWrap ? $curSlide.prev('.' + this.options.slideClass).length ? $curSlide.prev('.' + this.options.slideClass) : $lastSlide : $curSlide.prev('.' + this.options.slideClass); //pick prev slide if moving right to left\n        } else {\n          $newSlide = chosenSlide;\n        }\n\n        if ($newSlide.length) {\n          /**\n          * Triggers before the next slide starts animating in and only if a next slide has been found.\n          * @event Orbit#beforeslidechange\n          */\n          this.$element.trigger('beforeslidechange.zf.orbit', [$curSlide, $newSlide]);\n\n          if (this.options.bullets) {\n            idx = idx || this.$slides.index($newSlide); //grab index to update bullets\n            this._updateBullets(idx);\n          }\n\n          if (this.options.useMUI && !this.$element.is(':hidden')) {\n            Foundation.Motion.animateIn($newSlide.addClass('is-active').css({ 'position': 'absolute', 'top': 0 }), this.options['animInFrom' + dirIn], function () {\n              $newSlide.css({ 'position': 'relative', 'display': 'block' }).attr('aria-live', 'polite');\n            });\n\n            Foundation.Motion.animateOut($curSlide.removeClass('is-active'), this.options['animOutTo' + dirOut], function () {\n              $curSlide.removeAttr('aria-live');\n              if (_this.options.autoPlay && !_this.timer.isPaused) {\n                _this.timer.restart();\n              }\n              //do stuff?\n            });\n          } else {\n            $curSlide.removeClass('is-active is-in').removeAttr('aria-live').hide();\n            $newSlide.addClass('is-active is-in').attr('aria-live', 'polite').show();\n            if (this.options.autoPlay && !this.timer.isPaused) {\n              this.timer.restart();\n            }\n          }\n          /**\n          * Triggers when the slide has finished animating in.\n          * @event Orbit#slidechange\n          */\n          this.$element.trigger('slidechange.zf.orbit', [$newSlide]);\n        }\n      }\n\n      /**\n      * Updates the active state of the bullets, if displayed.\n      * @function\n      * @private\n      * @param {Number} idx - the index of the current slide.\n      */\n\n    }, {\n      key: '_updateBullets',\n      value: function _updateBullets(idx) {\n        var $oldBullet = this.$element.find('.' + this.options.boxOfBullets).find('.is-active').removeClass('is-active').blur(),\n            span = $oldBullet.find('span:last').detach(),\n            $newBullet = this.$bullets.eq(idx).addClass('is-active').append(span);\n      }\n\n      /**\n      * Destroys the carousel and hides the element.\n      * @function\n      */\n\n    }, {\n      key: 'destroy',\n      value: function destroy() {\n        this.$element.off('.zf.orbit').find('*').off('.zf.orbit').end().hide();\n        Foundation.unregisterPlugin(this);\n      }\n    }]);\n\n    return Orbit;\n  }();\n\n  Orbit.defaults = {\n    /**\n    * Tells the JS to look for and loadBullets.\n    * @option\n    * @example true\n    */\n    bullets: true,\n    /**\n    * Tells the JS to apply event listeners to nav buttons\n    * @option\n    * @example true\n    */\n    navButtons: true,\n    /**\n    * motion-ui animation class to apply\n    * @option\n    * @example 'slide-in-right'\n    */\n    animInFromRight: 'slide-in-right',\n    /**\n    * motion-ui animation class to apply\n    * @option\n    * @example 'slide-out-right'\n    */\n    animOutToRight: 'slide-out-right',\n    /**\n    * motion-ui animation class to apply\n    * @option\n    * @example 'slide-in-left'\n    *\n    */\n    animInFromLeft: 'slide-in-left',\n    /**\n    * motion-ui animation class to apply\n    * @option\n    * @example 'slide-out-left'\n    */\n    animOutToLeft: 'slide-out-left',\n    /**\n    * Allows Orbit to automatically animate on page load.\n    * @option\n    * @example true\n    */\n    autoPlay: true,\n    /**\n    * Amount of time, in ms, between slide transitions\n    * @option\n    * @example 5000\n    */\n    timerDelay: 5000,\n    /**\n    * Allows Orbit to infinitely loop through the slides\n    * @option\n    * @example true\n    */\n    infiniteWrap: true,\n    /**\n    * Allows the Orbit slides to bind to swipe events for mobile, requires an additional util library\n    * @option\n    * @example true\n    */\n    swipe: true,\n    /**\n    * Allows the timing function to pause animation on hover.\n    * @option\n    * @example true\n    */\n    pauseOnHover: true,\n    /**\n    * Allows Orbit to bind keyboard events to the slider, to animate frames with arrow keys\n    * @option\n    * @example true\n    */\n    accessible: true,\n    /**\n    * Class applied to the container of Orbit\n    * @option\n    * @example 'orbit-container'\n    */\n    containerClass: 'orbit-container',\n    /**\n    * Class applied to individual slides.\n    * @option\n    * @example 'orbit-slide'\n    */\n    slideClass: 'orbit-slide',\n    /**\n    * Class applied to the bullet container. You're welcome.\n    * @option\n    * @example 'orbit-bullets'\n    */\n    boxOfBullets: 'orbit-bullets',\n    /**\n    * Class applied to the `next` navigation button.\n    * @option\n    * @example 'orbit-next'\n    */\n    nextClass: 'orbit-next',\n    /**\n    * Class applied to the `previous` navigation button.\n    * @option\n    * @example 'orbit-previous'\n    */\n    prevClass: 'orbit-previous',\n    /**\n    * Boolean to flag the js to use motion ui classes or not. Default to true for backwards compatability.\n    * @option\n    * @example true\n    */\n    useMUI: true\n  };\n\n  // Window exports\n  Foundation.plugin(Orbit, 'Orbit');\n}(jQuery);\n'use strict';\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n!function ($) {\n\n  /**\n   * ResponsiveMenu module.\n   * @module foundation.responsiveMenu\n   * @requires foundation.util.triggers\n   * @requires foundation.util.mediaQuery\n   * @requires foundation.util.accordionMenu\n   * @requires foundation.util.drilldown\n   * @requires foundation.util.dropdown-menu\n   */\n\n  var ResponsiveMenu = function () {\n    /**\n     * Creates a new instance of a responsive menu.\n     * @class\n     * @fires ResponsiveMenu#init\n     * @param {jQuery} element - jQuery object to make into a dropdown menu.\n     * @param {Object} options - Overrides to the default plugin settings.\n     */\n    function ResponsiveMenu(element, options) {\n      _classCallCheck(this, ResponsiveMenu);\n\n      this.$element = $(element);\n      this.rules = this.$element.data('responsive-menu');\n      this.currentMq = null;\n      this.currentPlugin = null;\n\n      this._init();\n      this._events();\n\n      Foundation.registerPlugin(this, 'ResponsiveMenu');\n    }\n\n    /**\n     * Initializes the Menu by parsing the classes from the 'data-ResponsiveMenu' attribute on the element.\n     * @function\n     * @private\n     */\n\n\n    _createClass(ResponsiveMenu, [{\n      key: '_init',\n      value: function _init() {\n        // The first time an Interchange plugin is initialized, this.rules is converted from a string of \"classes\" to an object of rules\n        if (typeof this.rules === 'string') {\n          var rulesTree = {};\n\n          // Parse rules from \"classes\" pulled from data attribute\n          var rules = this.rules.split(' ');\n\n          // Iterate through every rule found\n          for (var i = 0; i < rules.length; i++) {\n            var rule = rules[i].split('-');\n            var ruleSize = rule.length > 1 ? rule[0] : 'small';\n            var rulePlugin = rule.length > 1 ? rule[1] : rule[0];\n\n            if (MenuPlugins[rulePlugin] !== null) {\n              rulesTree[ruleSize] = MenuPlugins[rulePlugin];\n            }\n          }\n\n          this.rules = rulesTree;\n        }\n\n        if (!$.isEmptyObject(this.rules)) {\n          this._checkMediaQueries();\n        }\n        // Add data-mutate since children may need it.\n        this.$element.attr('data-mutate', this.$element.attr('data-mutate') || Foundation.GetYoDigits(6, 'responsive-menu'));\n      }\n\n      /**\n       * Initializes events for the Menu.\n       * @function\n       * @private\n       */\n\n    }, {\n      key: '_events',\n      value: function _events() {\n        var _this = this;\n\n        $(window).on('changed.zf.mediaquery', function () {\n          _this._checkMediaQueries();\n        });\n        // $(window).on('resize.zf.ResponsiveMenu', function() {\n        //   _this._checkMediaQueries();\n        // });\n      }\n\n      /**\n       * Checks the current screen width against available media queries. If the media query has changed, and the plugin needed has changed, the plugins will swap out.\n       * @function\n       * @private\n       */\n\n    }, {\n      key: '_checkMediaQueries',\n      value: function _checkMediaQueries() {\n        var matchedMq,\n            _this = this;\n        // Iterate through each rule and find the last matching rule\n        $.each(this.rules, function (key) {\n          if (Foundation.MediaQuery.atLeast(key)) {\n            matchedMq = key;\n          }\n        });\n\n        // No match? No dice\n        if (!matchedMq) return;\n\n        // Plugin already initialized? We good\n        if (this.currentPlugin instanceof this.rules[matchedMq].plugin) return;\n\n        // Remove existing plugin-specific CSS classes\n        $.each(MenuPlugins, function (key, value) {\n          _this.$element.removeClass(value.cssClass);\n        });\n\n        // Add the CSS class for the new plugin\n        this.$element.addClass(this.rules[matchedMq].cssClass);\n\n        // Create an instance of the new plugin\n        if (this.currentPlugin) this.currentPlugin.destroy();\n        this.currentPlugin = new this.rules[matchedMq].plugin(this.$element, {});\n      }\n\n      /**\n       * Destroys the instance of the current plugin on this element, as well as the window resize handler that switches the plugins out.\n       * @function\n       */\n\n    }, {\n      key: 'destroy',\n      value: function destroy() {\n        this.currentPlugin.destroy();\n        $(window).off('.zf.ResponsiveMenu');\n        Foundation.unregisterPlugin(this);\n      }\n    }]);\n\n    return ResponsiveMenu;\n  }();\n\n  ResponsiveMenu.defaults = {};\n\n  // The plugin matches the plugin classes with these plugin instances.\n  var MenuPlugins = {\n    dropdown: {\n      cssClass: 'dropdown',\n      plugin: Foundation._plugins['dropdown-menu'] || null\n    },\n    drilldown: {\n      cssClass: 'drilldown',\n      plugin: Foundation._plugins['drilldown'] || null\n    },\n    accordion: {\n      cssClass: 'accordion-menu',\n      plugin: Foundation._plugins['accordion-menu'] || null\n    }\n  };\n\n  // Window exports\n  Foundation.plugin(ResponsiveMenu, 'ResponsiveMenu');\n}(jQuery);\n'use strict';\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n!function ($) {\n\n  /**\n   * ResponsiveToggle module.\n   * @module foundation.responsiveToggle\n   * @requires foundation.util.mediaQuery\n   */\n\n  var ResponsiveToggle = function () {\n    /**\n     * Creates a new instance of Tab Bar.\n     * @class\n     * @fires ResponsiveToggle#init\n     * @param {jQuery} element - jQuery object to attach tab bar functionality to.\n     * @param {Object} options - Overrides to the default plugin settings.\n     */\n    function ResponsiveToggle(element, options) {\n      _classCallCheck(this, ResponsiveToggle);\n\n      this.$element = $(element);\n      this.options = $.extend({}, ResponsiveToggle.defaults, this.$element.data(), options);\n\n      this._init();\n      this._events();\n\n      Foundation.registerPlugin(this, 'ResponsiveToggle');\n    }\n\n    /**\n     * Initializes the tab bar by finding the target element, toggling element, and running update().\n     * @function\n     * @private\n     */\n\n\n    _createClass(ResponsiveToggle, [{\n      key: '_init',\n      value: function _init() {\n        var targetID = this.$element.data('responsive-toggle');\n        if (!targetID) {\n          console.error('Your tab bar needs an ID of a Menu as the value of data-tab-bar.');\n        }\n\n        this.$targetMenu = $('#' + targetID);\n        this.$toggler = this.$element.find('[data-toggle]');\n        this.options = $.extend({}, this.options, this.$targetMenu.data());\n\n        // If they were set, parse the animation classes\n        if (this.options.animate) {\n          var input = this.options.animate.split(' ');\n\n          this.animationIn = input[0];\n          this.animationOut = input[1] || null;\n        }\n\n        this._update();\n      }\n\n      /**\n       * Adds necessary event handlers for the tab bar to work.\n       * @function\n       * @private\n       */\n\n    }, {\n      key: '_events',\n      value: function _events() {\n        var _this = this;\n\n        this._updateMqHandler = this._update.bind(this);\n\n        $(window).on('changed.zf.mediaquery', this._updateMqHandler);\n\n        this.$toggler.on('click.zf.responsiveToggle', this.toggleMenu.bind(this));\n      }\n\n      /**\n       * Checks the current media query to determine if the tab bar should be visible or hidden.\n       * @function\n       * @private\n       */\n\n    }, {\n      key: '_update',\n      value: function _update() {\n        // Mobile\n        if (!Foundation.MediaQuery.atLeast(this.options.hideFor)) {\n          this.$element.show();\n          this.$targetMenu.hide();\n        }\n\n        // Desktop\n        else {\n            this.$element.hide();\n            this.$targetMenu.show();\n          }\n      }\n\n      /**\n       * Toggles the element attached to the tab bar. The toggle only happens if the screen is small enough to allow it.\n       * @function\n       * @fires ResponsiveToggle#toggled\n       */\n\n    }, {\n      key: 'toggleMenu',\n      value: function toggleMenu() {\n        var _this2 = this;\n\n        if (!Foundation.MediaQuery.atLeast(this.options.hideFor)) {\n          if (this.options.animate) {\n            if (this.$targetMenu.is(':hidden')) {\n              Foundation.Motion.animateIn(this.$targetMenu, this.animationIn, function () {\n                /**\n                 * Fires when the element attached to the tab bar toggles.\n                 * @event ResponsiveToggle#toggled\n                 */\n                _this2.$element.trigger('toggled.zf.responsiveToggle');\n                _this2.$targetMenu.find('[data-mutate]').triggerHandler('mutateme.zf.trigger');\n              });\n            } else {\n              Foundation.Motion.animateOut(this.$targetMenu, this.animationOut, function () {\n                /**\n                 * Fires when the element attached to the tab bar toggles.\n                 * @event ResponsiveToggle#toggled\n                 */\n                _this2.$element.trigger('toggled.zf.responsiveToggle');\n              });\n            }\n          } else {\n            this.$targetMenu.toggle(0);\n            this.$targetMenu.find('[data-mutate]').trigger('mutateme.zf.trigger');\n\n            /**\n             * Fires when the element attached to the tab bar toggles.\n             * @event ResponsiveToggle#toggled\n             */\n            this.$element.trigger('toggled.zf.responsiveToggle');\n          }\n        }\n      }\n    }, {\n      key: 'destroy',\n      value: function destroy() {\n        this.$element.off('.zf.responsiveToggle');\n        this.$toggler.off('.zf.responsiveToggle');\n\n        $(window).off('changed.zf.mediaquery', this._updateMqHandler);\n\n        Foundation.unregisterPlugin(this);\n      }\n    }]);\n\n    return ResponsiveToggle;\n  }();\n\n  ResponsiveToggle.defaults = {\n    /**\n     * The breakpoint after which the menu is always shown, and the tab bar is hidden.\n     * @option\n     * @example 'medium'\n     */\n    hideFor: 'medium',\n\n    /**\n     * To decide if the toggle should be animated or not.\n     * @option\n     * @example false\n     */\n    animate: false\n  };\n\n  // Window exports\n  Foundation.plugin(ResponsiveToggle, 'ResponsiveToggle');\n}(jQuery);\n'use strict';\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n!function ($) {\n\n  /**\n   * Reveal module.\n   * @module foundation.reveal\n   * @requires foundation.util.keyboard\n   * @requires foundation.util.box\n   * @requires foundation.util.triggers\n   * @requires foundation.util.mediaQuery\n   * @requires foundation.util.motion if using animations\n   */\n\n  var Reveal = function () {\n    /**\n     * Creates a new instance of Reveal.\n     * @class\n     * @param {jQuery} element - jQuery object to use for the modal.\n     * @param {Object} options - optional parameters.\n     */\n    function Reveal(element, options) {\n      _classCallCheck(this, Reveal);\n\n      this.$element = element;\n      this.options = $.extend({}, Reveal.defaults, this.$element.data(), options);\n      this._init();\n\n      Foundation.registerPlugin(this, 'Reveal');\n      Foundation.Keyboard.register('Reveal', {\n        'ENTER': 'open',\n        'SPACE': 'open',\n        'ESCAPE': 'close'\n      });\n    }\n\n    /**\n     * Initializes the modal by adding the overlay and close buttons, (if selected).\n     * @private\n     */\n\n\n    _createClass(Reveal, [{\n      key: '_init',\n      value: function _init() {\n        this.id = this.$element.attr('id');\n        this.isActive = false;\n        this.cached = { mq: Foundation.MediaQuery.current };\n        this.isMobile = mobileSniff();\n\n        this.$anchor = $('[data-open=\"' + this.id + '\"]').length ? $('[data-open=\"' + this.id + '\"]') : $('[data-toggle=\"' + this.id + '\"]');\n        this.$anchor.attr({\n          'aria-controls': this.id,\n          'aria-haspopup': true,\n          'tabindex': 0\n        });\n\n        if (this.options.fullScreen || this.$element.hasClass('full')) {\n          this.options.fullScreen = true;\n          this.options.overlay = false;\n        }\n        if (this.options.overlay && !this.$overlay) {\n          this.$overlay = this._makeOverlay(this.id);\n        }\n\n        this.$element.attr({\n          'role': 'dialog',\n          'aria-hidden': true,\n          'data-yeti-box': this.id,\n          'data-resize': this.id\n        });\n\n        if (this.$overlay) {\n          this.$element.detach().appendTo(this.$overlay);\n        } else {\n          this.$element.detach().appendTo($(this.options.appendTo));\n          this.$element.addClass('without-overlay');\n        }\n        this._events();\n        if (this.options.deepLink && window.location.hash === '#' + this.id) {\n          $(window).one('load.zf.reveal', this.open.bind(this));\n        }\n      }\n\n      /**\n       * Creates an overlay div to display behind the modal.\n       * @private\n       */\n\n    }, {\n      key: '_makeOverlay',\n      value: function _makeOverlay() {\n        return $('<div></div>').addClass('reveal-overlay').appendTo(this.options.appendTo);\n      }\n\n      /**\n       * Updates position of modal\n       * TODO:  Figure out if we actually need to cache these values or if it doesn't matter\n       * @private\n       */\n\n    }, {\n      key: '_updatePosition',\n      value: function _updatePosition() {\n        var width = this.$element.outerWidth();\n        var outerWidth = $(window).width();\n        var height = this.$element.outerHeight();\n        var outerHeight = $(window).height();\n        var left, top;\n        if (this.options.hOffset === 'auto') {\n          left = parseInt((outerWidth - width) / 2, 10);\n        } else {\n          left = parseInt(this.options.hOffset, 10);\n        }\n        if (this.options.vOffset === 'auto') {\n          if (height > outerHeight) {\n            top = parseInt(Math.min(100, outerHeight / 10), 10);\n          } else {\n            top = parseInt((outerHeight - height) / 4, 10);\n          }\n        } else {\n          top = parseInt(this.options.vOffset, 10);\n        }\n        this.$element.css({ top: top + 'px' });\n        // only worry about left if we don't have an overlay or we havea  horizontal offset,\n        // otherwise we're perfectly in the middle\n        if (!this.$overlay || this.options.hOffset !== 'auto') {\n          this.$element.css({ left: left + 'px' });\n          this.$element.css({ margin: '0px' });\n        }\n      }\n\n      /**\n       * Adds event handlers for the modal.\n       * @private\n       */\n\n    }, {\n      key: '_events',\n      value: function _events() {\n        var _this2 = this;\n\n        var _this = this;\n\n        this.$element.on({\n          'open.zf.trigger': this.open.bind(this),\n          'close.zf.trigger': function (event, $element) {\n            if (event.target === _this.$element[0] || $(event.target).parents('[data-closable]')[0] === $element) {\n              // only close reveal when it's explicitly called\n              return _this2.close.apply(_this2);\n            }\n          },\n          'toggle.zf.trigger': this.toggle.bind(this),\n          'resizeme.zf.trigger': function () {\n            _this._updatePosition();\n          }\n        });\n\n        if (this.$anchor.length) {\n          this.$anchor.on('keydown.zf.reveal', function (e) {\n            if (e.which === 13 || e.which === 32) {\n              e.stopPropagation();\n              e.preventDefault();\n              _this.open();\n            }\n          });\n        }\n\n        if (this.options.closeOnClick && this.options.overlay) {\n          this.$overlay.off('.zf.reveal').on('click.zf.reveal', function (e) {\n            if (e.target === _this.$element[0] || $.contains(_this.$element[0], e.target) || !$.contains(document, e.target)) {\n              return;\n            }\n            _this.close();\n          });\n        }\n        if (this.options.deepLink) {\n          $(window).on('popstate.zf.reveal:' + this.id, this._handleState.bind(this));\n        }\n      }\n\n      /**\n       * Handles modal methods on back/forward button clicks or any other event that triggers popstate.\n       * @private\n       */\n\n    }, {\n      key: '_handleState',\n      value: function _handleState(e) {\n        if (window.location.hash === '#' + this.id && !this.isActive) {\n          this.open();\n        } else {\n          this.close();\n        }\n      }\n\n      /**\n       * Opens the modal controlled by `this.$anchor`, and closes all others by default.\n       * @function\n       * @fires Reveal#closeme\n       * @fires Reveal#open\n       */\n\n    }, {\n      key: 'open',\n      value: function open() {\n        var _this3 = this;\n\n        if (this.options.deepLink) {\n          var hash = '#' + this.id;\n\n          if (window.history.pushState) {\n            window.history.pushState(null, null, hash);\n          } else {\n            window.location.hash = hash;\n          }\n        }\n\n        this.isActive = true;\n\n        // Make elements invisible, but remove display: none so we can get size and positioning\n        this.$element.css({ 'visibility': 'hidden' }).show().scrollTop(0);\n        if (this.options.overlay) {\n          this.$overlay.css({ 'visibility': 'hidden' }).show();\n        }\n\n        this._updatePosition();\n\n        this.$element.hide().css({ 'visibility': '' });\n\n        if (this.$overlay) {\n          this.$overlay.css({ 'visibility': '' }).hide();\n          if (this.$element.hasClass('fast')) {\n            this.$overlay.addClass('fast');\n          } else if (this.$element.hasClass('slow')) {\n            this.$overlay.addClass('slow');\n          }\n        }\n\n        if (!this.options.multipleOpened) {\n          /**\n           * Fires immediately before the modal opens.\n           * Closes any other modals that are currently open\n           * @event Reveal#closeme\n           */\n          this.$element.trigger('closeme.zf.reveal', this.id);\n        }\n\n        var _this = this;\n\n        function addRevealOpenClasses() {\n          if (_this.isMobile) {\n            if (!_this.originalScrollPos) {\n              _this.originalScrollPos = window.pageYOffset;\n            }\n            $('html, body').addClass('is-reveal-open');\n          } else {\n            $('body').addClass('is-reveal-open');\n          }\n        }\n        // Motion UI method of reveal\n        if (this.options.animationIn) {\n          (function () {\n            var afterAnimation = function () {\n              _this.$element.attr({\n                'aria-hidden': false,\n                'tabindex': -1\n              }).focus();\n              addRevealOpenClasses();\n              Foundation.Keyboard.trapFocus(_this.$element);\n            };\n\n            if (_this3.options.overlay) {\n              Foundation.Motion.animateIn(_this3.$overlay, 'fade-in');\n            }\n            Foundation.Motion.animateIn(_this3.$element, _this3.options.animationIn, function () {\n              if (_this3.$element) {\n                // protect against object having been removed\n                _this3.focusableElements = Foundation.Keyboard.findFocusable(_this3.$element);\n                afterAnimation();\n              }\n            });\n          })();\n        }\n        // jQuery method of reveal\n        else {\n            if (this.options.overlay) {\n              this.$overlay.show(0);\n            }\n            this.$element.show(this.options.showDelay);\n          }\n\n        // handle accessibility\n        this.$element.attr({\n          'aria-hidden': false,\n          'tabindex': -1\n        }).focus();\n        Foundation.Keyboard.trapFocus(this.$element);\n\n        /**\n         * Fires when the modal has successfully opened.\n         * @event Reveal#open\n         */\n        this.$element.trigger('open.zf.reveal');\n\n        addRevealOpenClasses();\n\n        setTimeout(function () {\n          _this3._extraHandlers();\n        }, 0);\n      }\n\n      /**\n       * Adds extra event handlers for the body and window if necessary.\n       * @private\n       */\n\n    }, {\n      key: '_extraHandlers',\n      value: function _extraHandlers() {\n        var _this = this;\n        if (!this.$element) {\n          return;\n        } // If we're in the middle of cleanup, don't freak out\n        this.focusableElements = Foundation.Keyboard.findFocusable(this.$element);\n\n        if (!this.options.overlay && this.options.closeOnClick && !this.options.fullScreen) {\n          $('body').on('click.zf.reveal', function (e) {\n            if (e.target === _this.$element[0] || $.contains(_this.$element[0], e.target) || !$.contains(document, e.target)) {\n              return;\n            }\n            _this.close();\n          });\n        }\n\n        if (this.options.closeOnEsc) {\n          $(window).on('keydown.zf.reveal', function (e) {\n            Foundation.Keyboard.handleKey(e, 'Reveal', {\n              close: function () {\n                if (_this.options.closeOnEsc) {\n                  _this.close();\n                  _this.$anchor.focus();\n                }\n              }\n            });\n          });\n        }\n\n        // lock focus within modal while tabbing\n        this.$element.on('keydown.zf.reveal', function (e) {\n          var $target = $(this);\n          // handle keyboard event with keyboard util\n          Foundation.Keyboard.handleKey(e, 'Reveal', {\n            open: function () {\n              if (_this.$element.find(':focus').is(_this.$element.find('[data-close]'))) {\n                setTimeout(function () {\n                  // set focus back to anchor if close button has been activated\n                  _this.$anchor.focus();\n                }, 1);\n              } else if ($target.is(_this.focusableElements)) {\n                // dont't trigger if acual element has focus (i.e. inputs, links, ...)\n                _this.open();\n              }\n            },\n            close: function () {\n              if (_this.options.closeOnEsc) {\n                _this.close();\n                _this.$anchor.focus();\n              }\n            },\n            handled: function (preventDefault) {\n              if (preventDefault) {\n                e.preventDefault();\n              }\n            }\n          });\n        });\n      }\n\n      /**\n       * Closes the modal.\n       * @function\n       * @fires Reveal#closed\n       */\n\n    }, {\n      key: 'close',\n      value: function close() {\n        if (!this.isActive || !this.$element.is(':visible')) {\n          return false;\n        }\n        var _this = this;\n\n        // Motion UI method of hiding\n        if (this.options.animationOut) {\n          if (this.options.overlay) {\n            Foundation.Motion.animateOut(this.$overlay, 'fade-out', finishUp);\n          } else {\n            finishUp();\n          }\n\n          Foundation.Motion.animateOut(this.$element, this.options.animationOut);\n        }\n        // jQuery method of hiding\n        else {\n            if (this.options.overlay) {\n              this.$overlay.hide(0, finishUp);\n            } else {\n              finishUp();\n            }\n\n            this.$element.hide(this.options.hideDelay);\n          }\n\n        // Conditionals to remove extra event listeners added on open\n        if (this.options.closeOnEsc) {\n          $(window).off('keydown.zf.reveal');\n        }\n\n        if (!this.options.overlay && this.options.closeOnClick) {\n          $('body').off('click.zf.reveal');\n        }\n\n        this.$element.off('keydown.zf.reveal');\n\n        function finishUp() {\n          if (_this.isMobile) {\n            $('html, body').removeClass('is-reveal-open');\n            if (_this.originalScrollPos) {\n              $('body').scrollTop(_this.originalScrollPos);\n              _this.originalScrollPos = null;\n            }\n          } else {\n            $('body').removeClass('is-reveal-open');\n          }\n\n          Foundation.Keyboard.releaseFocus(_this.$element);\n\n          _this.$element.attr('aria-hidden', true);\n\n          /**\n          * Fires when the modal is done closing.\n          * @event Reveal#closed\n          */\n          _this.$element.trigger('closed.zf.reveal');\n        }\n\n        /**\n        * Resets the modal content\n        * This prevents a running video to keep going in the background\n        */\n        if (this.options.resetOnClose) {\n          this.$element.html(this.$element.html());\n        }\n\n        this.isActive = false;\n        if (_this.options.deepLink) {\n          if (window.history.replaceState) {\n            window.history.replaceState('', document.title, window.location.href.replace('#' + this.id, ''));\n          } else {\n            window.location.hash = '';\n          }\n        }\n      }\n\n      /**\n       * Toggles the open/closed state of a modal.\n       * @function\n       */\n\n    }, {\n      key: 'toggle',\n      value: function toggle() {\n        if (this.isActive) {\n          this.close();\n        } else {\n          this.open();\n        }\n      }\n    }, {\n      key: 'destroy',\n\n\n      /**\n       * Destroys an instance of a modal.\n       * @function\n       */\n      value: function destroy() {\n        if (this.options.overlay) {\n          this.$element.appendTo($(this.options.appendTo)); // move $element outside of $overlay to prevent error unregisterPlugin()\n          this.$overlay.hide().off().remove();\n        }\n        this.$element.hide().off();\n        this.$anchor.off('.zf');\n        $(window).off('.zf.reveal:' + this.id);\n\n        Foundation.unregisterPlugin(this);\n      }\n    }]);\n\n    return Reveal;\n  }();\n\n  Reveal.defaults = {\n    /**\n     * Motion-UI class to use for animated elements. If none used, defaults to simple show/hide.\n     * @option\n     * @example 'slide-in-left'\n     */\n    animationIn: '',\n    /**\n     * Motion-UI class to use for animated elements. If none used, defaults to simple show/hide.\n     * @option\n     * @example 'slide-out-right'\n     */\n    animationOut: '',\n    /**\n     * Time, in ms, to delay the opening of a modal after a click if no animation used.\n     * @option\n     * @example 10\n     */\n    showDelay: 0,\n    /**\n     * Time, in ms, to delay the closing of a modal after a click if no animation used.\n     * @option\n     * @example 10\n     */\n    hideDelay: 0,\n    /**\n     * Allows a click on the body/overlay to close the modal.\n     * @option\n     * @example true\n     */\n    closeOnClick: true,\n    /**\n     * Allows the modal to close if the user presses the `ESCAPE` key.\n     * @option\n     * @example true\n     */\n    closeOnEsc: true,\n    /**\n     * If true, allows multiple modals to be displayed at once.\n     * @option\n     * @example false\n     */\n    multipleOpened: false,\n    /**\n     * Distance, in pixels, the modal should push down from the top of the screen.\n     * @option\n     * @example auto\n     */\n    vOffset: 'auto',\n    /**\n     * Distance, in pixels, the modal should push in from the side of the screen.\n     * @option\n     * @example auto\n     */\n    hOffset: 'auto',\n    /**\n     * Allows the modal to be fullscreen, completely blocking out the rest of the view. JS checks for this as well.\n     * @option\n     * @example false\n     */\n    fullScreen: false,\n    /**\n     * Percentage of screen height the modal should push up from the bottom of the view.\n     * @option\n     * @example 10\n     */\n    btmOffsetPct: 10,\n    /**\n     * Allows the modal to generate an overlay div, which will cover the view when modal opens.\n     * @option\n     * @example true\n     */\n    overlay: true,\n    /**\n     * Allows the modal to remove and reinject markup on close. Should be true if using video elements w/o using provider's api, otherwise, videos will continue to play in the background.\n     * @option\n     * @example false\n     */\n    resetOnClose: false,\n    /**\n     * Allows the modal to alter the url on open/close, and allows the use of the `back` button to close modals. ALSO, allows a modal to auto-maniacally open on page load IF the hash === the modal's user-set id.\n     * @option\n     * @example false\n     */\n    deepLink: false,\n    /**\n    * Allows the modal to append to custom div.\n    * @option\n    * @example false\n    */\n    appendTo: \"body\"\n\n  };\n\n  // Window exports\n  Foundation.plugin(Reveal, 'Reveal');\n\n  function iPhoneSniff() {\n    return (/iP(ad|hone|od).*OS/.test(window.navigator.userAgent)\n    );\n  }\n\n  function androidSniff() {\n    return (/Android/.test(window.navigator.userAgent)\n    );\n  }\n\n  function mobileSniff() {\n    return iPhoneSniff() || androidSniff();\n  }\n}(jQuery);\n'use strict';\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n!function ($) {\n\n  /**\n   * Slider module.\n   * @module foundation.slider\n   * @requires foundation.util.motion\n   * @requires foundation.util.triggers\n   * @requires foundation.util.keyboard\n   * @requires foundation.util.touch\n   */\n\n  var Slider = function () {\n    /**\n     * Creates a new instance of a slider control.\n     * @class\n     * @param {jQuery} element - jQuery object to make into a slider control.\n     * @param {Object} options - Overrides to the default plugin settings.\n     */\n    function Slider(element, options) {\n      _classCallCheck(this, Slider);\n\n      this.$element = element;\n      this.options = $.extend({}, Slider.defaults, this.$element.data(), options);\n\n      this._init();\n\n      Foundation.registerPlugin(this, 'Slider');\n      Foundation.Keyboard.register('Slider', {\n        'ltr': {\n          'ARROW_RIGHT': 'increase',\n          'ARROW_UP': 'increase',\n          'ARROW_DOWN': 'decrease',\n          'ARROW_LEFT': 'decrease',\n          'SHIFT_ARROW_RIGHT': 'increase_fast',\n          'SHIFT_ARROW_UP': 'increase_fast',\n          'SHIFT_ARROW_DOWN': 'decrease_fast',\n          'SHIFT_ARROW_LEFT': 'decrease_fast'\n        },\n        'rtl': {\n          'ARROW_LEFT': 'increase',\n          'ARROW_RIGHT': 'decrease',\n          'SHIFT_ARROW_LEFT': 'increase_fast',\n          'SHIFT_ARROW_RIGHT': 'decrease_fast'\n        }\n      });\n    }\n\n    /**\n     * Initilizes the plugin by reading/setting attributes, creating collections and setting the initial position of the handle(s).\n     * @function\n     * @private\n     */\n\n\n    _createClass(Slider, [{\n      key: '_init',\n      value: function _init() {\n        this.inputs = this.$element.find('input');\n        this.handles = this.$element.find('[data-slider-handle]');\n\n        this.$handle = this.handles.eq(0);\n        this.$input = this.inputs.length ? this.inputs.eq(0) : $('#' + this.$handle.attr('aria-controls'));\n        this.$fill = this.$element.find('[data-slider-fill]').css(this.options.vertical ? 'height' : 'width', 0);\n\n        var isDbl = false,\n            _this = this;\n        if (this.options.disabled || this.$element.hasClass(this.options.disabledClass)) {\n          this.options.disabled = true;\n          this.$element.addClass(this.options.disabledClass);\n        }\n        if (!this.inputs.length) {\n          this.inputs = $().add(this.$input);\n          this.options.binding = true;\n        }\n\n        this._setInitAttr(0);\n\n        if (this.handles[1]) {\n          this.options.doubleSided = true;\n          this.$handle2 = this.handles.eq(1);\n          this.$input2 = this.inputs.length > 1 ? this.inputs.eq(1) : $('#' + this.$handle2.attr('aria-controls'));\n\n          if (!this.inputs[1]) {\n            this.inputs = this.inputs.add(this.$input2);\n          }\n          isDbl = true;\n\n          // this.$handle.triggerHandler('click.zf.slider');\n          this._setInitAttr(1);\n        }\n\n        // Set handle positions\n        this.setHandles();\n\n        this._events();\n      }\n    }, {\n      key: 'setHandles',\n      value: function setHandles() {\n        var _this2 = this;\n\n        if (this.handles[1]) {\n          this._setHandlePos(this.$handle, this.inputs.eq(0).val(), true, function () {\n            _this2._setHandlePos(_this2.$handle2, _this2.inputs.eq(1).val(), true);\n          });\n        } else {\n          this._setHandlePos(this.$handle, this.inputs.eq(0).val(), true);\n        }\n      }\n    }, {\n      key: '_reflow',\n      value: function _reflow() {\n        this.setHandles();\n      }\n      /**\n      * @function\n      * @private\n      * @param {Number} value - floating point (the value) to be transformed using to a relative position on the slider (the inverse of _value)\n      */\n\n    }, {\n      key: '_pctOfBar',\n      value: function _pctOfBar(value) {\n        var pctOfBar = percent(value - this.options.start, this.options.end - this.options.start);\n\n        switch (this.options.positionValueFunction) {\n          case \"pow\":\n            pctOfBar = this._logTransform(pctOfBar);\n            break;\n          case \"log\":\n            pctOfBar = this._powTransform(pctOfBar);\n            break;\n        }\n\n        return pctOfBar.toFixed(2);\n      }\n\n      /**\n      * @function\n      * @private\n      * @param {Number} pctOfBar - floating point, the relative position of the slider (typically between 0-1) to be transformed to a value\n      */\n\n    }, {\n      key: '_value',\n      value: function _value(pctOfBar) {\n        switch (this.options.positionValueFunction) {\n          case \"pow\":\n            pctOfBar = this._powTransform(pctOfBar);\n            break;\n          case \"log\":\n            pctOfBar = this._logTransform(pctOfBar);\n            break;\n        }\n        var value = (this.options.end - this.options.start) * pctOfBar + this.options.start;\n\n        return value;\n      }\n\n      /**\n      * @function\n      * @private\n      * @param {Number} value - floating point (typically between 0-1) to be transformed using the log function\n      */\n\n    }, {\n      key: '_logTransform',\n      value: function _logTransform(value) {\n        return baseLog(this.options.nonLinearBase, value * (this.options.nonLinearBase - 1) + 1);\n      }\n\n      /**\n      * @function\n      * @private\n      * @param {Number} value - floating point (typically between 0-1) to be transformed using the power function\n      */\n\n    }, {\n      key: '_powTransform',\n      value: function _powTransform(value) {\n        return (Math.pow(this.options.nonLinearBase, value) - 1) / (this.options.nonLinearBase - 1);\n      }\n\n      /**\n       * Sets the position of the selected handle and fill bar.\n       * @function\n       * @private\n       * @param {jQuery} $hndl - the selected handle to move.\n       * @param {Number} location - floating point between the start and end values of the slider bar.\n       * @param {Function} cb - callback function to fire on completion.\n       * @fires Slider#moved\n       * @fires Slider#changed\n       */\n\n    }, {\n      key: '_setHandlePos',\n      value: function _setHandlePos($hndl, location, noInvert, cb) {\n        // don't move if the slider has been disabled since its initialization\n        if (this.$element.hasClass(this.options.disabledClass)) {\n          return;\n        }\n        //might need to alter that slightly for bars that will have odd number selections.\n        location = parseFloat(location); //on input change events, convert string to number...grumble.\n\n        // prevent slider from running out of bounds, if value exceeds the limits set through options, override the value to min/max\n        if (location < this.options.start) {\n          location = this.options.start;\n        } else if (location > this.options.end) {\n          location = this.options.end;\n        }\n\n        var isDbl = this.options.doubleSided;\n\n        if (isDbl) {\n          //this block is to prevent 2 handles from crossing eachother. Could/should be improved.\n          if (this.handles.index($hndl) === 0) {\n            var h2Val = parseFloat(this.$handle2.attr('aria-valuenow'));\n            location = location >= h2Val ? h2Val - this.options.step : location;\n          } else {\n            var h1Val = parseFloat(this.$handle.attr('aria-valuenow'));\n            location = location <= h1Val ? h1Val + this.options.step : location;\n          }\n        }\n\n        //this is for single-handled vertical sliders, it adjusts the value to account for the slider being \"upside-down\"\n        //for click and drag events, it's weird due to the scale(-1, 1) css property\n        if (this.options.vertical && !noInvert) {\n          location = this.options.end - location;\n        }\n\n        var _this = this,\n            vert = this.options.vertical,\n            hOrW = vert ? 'height' : 'width',\n            lOrT = vert ? 'top' : 'left',\n            handleDim = $hndl[0].getBoundingClientRect()[hOrW],\n            elemDim = this.$element[0].getBoundingClientRect()[hOrW],\n\n        //percentage of bar min/max value based on click or drag point\n        pctOfBar = this._pctOfBar(location),\n\n        //number of actual pixels to shift the handle, based on the percentage obtained above\n        pxToMove = (elemDim - handleDim) * pctOfBar,\n\n        //percentage of bar to shift the handle\n        movement = (percent(pxToMove, elemDim) * 100).toFixed(this.options.decimal);\n        //fixing the decimal value for the location number, is passed to other methods as a fixed floating-point value\n        location = parseFloat(location.toFixed(this.options.decimal));\n        // declare empty object for css adjustments, only used with 2 handled-sliders\n        var css = {};\n\n        this._setValues($hndl, location);\n\n        // TODO update to calculate based on values set to respective inputs??\n        if (isDbl) {\n          var isLeftHndl = this.handles.index($hndl) === 0,\n\n          //empty variable, will be used for min-height/width for fill bar\n          dim,\n\n          //percentage w/h of the handle compared to the slider bar\n          handlePct = ~~(percent(handleDim, elemDim) * 100);\n          //if left handle, the math is slightly different than if it's the right handle, and the left/top property needs to be changed for the fill bar\n          if (isLeftHndl) {\n            //left or top percentage value to apply to the fill bar.\n            css[lOrT] = movement + '%';\n            //calculate the new min-height/width for the fill bar.\n            dim = parseFloat(this.$handle2[0].style[lOrT]) - movement + handlePct;\n            //this callback is necessary to prevent errors and allow the proper placement and initialization of a 2-handled slider\n            //plus, it means we don't care if 'dim' isNaN on init, it won't be in the future.\n            if (cb && typeof cb === 'function') {\n              cb();\n            } //this is only needed for the initialization of 2 handled sliders\n          } else {\n            //just caching the value of the left/bottom handle's left/top property\n            var handlePos = parseFloat(this.$handle[0].style[lOrT]);\n            //calculate the new min-height/width for the fill bar. Use isNaN to prevent false positives for numbers <= 0\n            //based on the percentage of movement of the handle being manipulated, less the opposing handle's left/top position, plus the percentage w/h of the handle itself\n            dim = movement - (isNaN(handlePos) ? (this.options.initialStart - this.options.start) / ((this.options.end - this.options.start) / 100) : handlePos) + handlePct;\n          }\n          // assign the min-height/width to our css object\n          css['min-' + hOrW] = dim + '%';\n        }\n\n        this.$element.one('finished.zf.animate', function () {\n          /**\n           * Fires when the handle is done moving.\n           * @event Slider#moved\n           */\n          _this.$element.trigger('moved.zf.slider', [$hndl]);\n        });\n\n        //because we don't know exactly how the handle will be moved, check the amount of time it should take to move.\n        var moveTime = this.$element.data('dragging') ? 1000 / 60 : this.options.moveTime;\n\n        Foundation.Move(moveTime, $hndl, function () {\n          // adjusting the left/top property of the handle, based on the percentage calculated above\n          // if movement isNaN, that is because the slider is hidden and we cannot determine handle width,\n          // fall back to next best guess.\n          if (isNaN(movement)) {\n            $hndl.css(lOrT, pctOfBar * 100 + '%');\n          } else {\n            $hndl.css(lOrT, movement + '%');\n          }\n\n          if (!_this.options.doubleSided) {\n            //if single-handled, a simple method to expand the fill bar\n            _this.$fill.css(hOrW, pctOfBar * 100 + '%');\n          } else {\n            //otherwise, use the css object we created above\n            _this.$fill.css(css);\n          }\n        });\n\n        /**\n         * Fires when the value has not been change for a given time.\n         * @event Slider#changed\n         */\n        clearTimeout(_this.timeout);\n        _this.timeout = setTimeout(function () {\n          _this.$element.trigger('changed.zf.slider', [$hndl]);\n        }, _this.options.changedDelay);\n      }\n\n      /**\n       * Sets the initial attribute for the slider element.\n       * @function\n       * @private\n       * @param {Number} idx - index of the current handle/input to use.\n       */\n\n    }, {\n      key: '_setInitAttr',\n      value: function _setInitAttr(idx) {\n        var initVal = idx === 0 ? this.options.initialStart : this.options.initialEnd;\n        var id = this.inputs.eq(idx).attr('id') || Foundation.GetYoDigits(6, 'slider');\n        this.inputs.eq(idx).attr({\n          'id': id,\n          'max': this.options.end,\n          'min': this.options.start,\n          'step': this.options.step\n        });\n        this.inputs.eq(idx).val(initVal);\n        this.handles.eq(idx).attr({\n          'role': 'slider',\n          'aria-controls': id,\n          'aria-valuemax': this.options.end,\n          'aria-valuemin': this.options.start,\n          'aria-valuenow': initVal,\n          'aria-orientation': this.options.vertical ? 'vertical' : 'horizontal',\n          'tabindex': 0\n        });\n      }\n\n      /**\n       * Sets the input and `aria-valuenow` values for the slider element.\n       * @function\n       * @private\n       * @param {jQuery} $handle - the currently selected handle.\n       * @param {Number} val - floating point of the new value.\n       */\n\n    }, {\n      key: '_setValues',\n      value: function _setValues($handle, val) {\n        var idx = this.options.doubleSided ? this.handles.index($handle) : 0;\n        this.inputs.eq(idx).val(val);\n        $handle.attr('aria-valuenow', val);\n      }\n\n      /**\n       * Handles events on the slider element.\n       * Calculates the new location of the current handle.\n       * If there are two handles and the bar was clicked, it determines which handle to move.\n       * @function\n       * @private\n       * @param {Object} e - the `event` object passed from the listener.\n       * @param {jQuery} $handle - the current handle to calculate for, if selected.\n       * @param {Number} val - floating point number for the new value of the slider.\n       * TODO clean this up, there's a lot of repeated code between this and the _setHandlePos fn.\n       */\n\n    }, {\n      key: '_handleEvent',\n      value: function _handleEvent(e, $handle, val) {\n        var value, hasVal;\n        if (!val) {\n          //click or drag events\n          e.preventDefault();\n          var _this = this,\n              vertical = this.options.vertical,\n              param = vertical ? 'height' : 'width',\n              direction = vertical ? 'top' : 'left',\n              eventOffset = vertical ? e.pageY : e.pageX,\n              halfOfHandle = this.$handle[0].getBoundingClientRect()[param] / 2,\n              barDim = this.$element[0].getBoundingClientRect()[param],\n              windowScroll = vertical ? $(window).scrollTop() : $(window).scrollLeft();\n\n          var elemOffset = this.$element.offset()[direction];\n\n          // touch events emulated by the touch util give position relative to screen, add window.scroll to event coordinates...\n          // best way to guess this is simulated is if clientY == pageY\n          if (e.clientY === e.pageY) {\n            eventOffset = eventOffset + windowScroll;\n          }\n          var eventFromBar = eventOffset - elemOffset;\n          var barXY;\n          if (eventFromBar < 0) {\n            barXY = 0;\n          } else if (eventFromBar > barDim) {\n            barXY = barDim;\n          } else {\n            barXY = eventFromBar;\n          }\n          var offsetPct = percent(barXY, barDim);\n\n          value = this._value(offsetPct);\n\n          // turn everything around for RTL, yay math!\n          if (Foundation.rtl() && !this.options.vertical) {\n            value = this.options.end - value;\n          }\n\n          value = _this._adjustValue(null, value);\n          //boolean flag for the setHandlePos fn, specifically for vertical sliders\n          hasVal = false;\n\n          if (!$handle) {\n            //figure out which handle it is, pass it to the next function.\n            var firstHndlPos = absPosition(this.$handle, direction, barXY, param),\n                secndHndlPos = absPosition(this.$handle2, direction, barXY, param);\n            $handle = firstHndlPos <= secndHndlPos ? this.$handle : this.$handle2;\n          }\n        } else {\n          //change event on input\n          value = this._adjustValue(null, val);\n          hasVal = true;\n        }\n\n        this._setHandlePos($handle, value, hasVal);\n      }\n\n      /**\n       * Adjustes value for handle in regard to step value. returns adjusted value\n       * @function\n       * @private\n       * @param {jQuery} $handle - the selected handle.\n       * @param {Number} value - value to adjust. used if $handle is falsy\n       */\n\n    }, {\n      key: '_adjustValue',\n      value: function _adjustValue($handle, value) {\n        var val,\n            step = this.options.step,\n            div = parseFloat(step / 2),\n            left,\n            prev_val,\n            next_val;\n        if (!!$handle) {\n          val = parseFloat($handle.attr('aria-valuenow'));\n        } else {\n          val = value;\n        }\n        left = val % step;\n        prev_val = val - left;\n        next_val = prev_val + step;\n        if (left === 0) {\n          return val;\n        }\n        val = val >= prev_val + div ? next_val : prev_val;\n        return val;\n      }\n\n      /**\n       * Adds event listeners to the slider elements.\n       * @function\n       * @private\n       */\n\n    }, {\n      key: '_events',\n      value: function _events() {\n        this._eventsForHandle(this.$handle);\n        if (this.handles[1]) {\n          this._eventsForHandle(this.$handle2);\n        }\n      }\n\n      /**\n       * Adds event listeners a particular handle\n       * @function\n       * @private\n       * @param {jQuery} $handle - the current handle to apply listeners to.\n       */\n\n    }, {\n      key: '_eventsForHandle',\n      value: function _eventsForHandle($handle) {\n        var _this = this,\n            curHandle,\n            timer;\n\n        this.inputs.off('change.zf.slider').on('change.zf.slider', function (e) {\n          var idx = _this.inputs.index($(this));\n          _this._handleEvent(e, _this.handles.eq(idx), $(this).val());\n        });\n\n        if (this.options.clickSelect) {\n          this.$element.off('click.zf.slider').on('click.zf.slider', function (e) {\n            if (_this.$element.data('dragging')) {\n              return false;\n            }\n\n            if (!$(e.target).is('[data-slider-handle]')) {\n              if (_this.options.doubleSided) {\n                _this._handleEvent(e);\n              } else {\n                _this._handleEvent(e, _this.$handle);\n              }\n            }\n          });\n        }\n\n        if (this.options.draggable) {\n          this.handles.addTouch();\n\n          var $body = $('body');\n          $handle.off('mousedown.zf.slider').on('mousedown.zf.slider', function (e) {\n            $handle.addClass('is-dragging');\n            _this.$fill.addClass('is-dragging'); //\n            _this.$element.data('dragging', true);\n\n            curHandle = $(e.currentTarget);\n\n            $body.on('mousemove.zf.slider', function (e) {\n              e.preventDefault();\n              _this._handleEvent(e, curHandle);\n            }).on('mouseup.zf.slider', function (e) {\n              _this._handleEvent(e, curHandle);\n\n              $handle.removeClass('is-dragging');\n              _this.$fill.removeClass('is-dragging');\n              _this.$element.data('dragging', false);\n\n              $body.off('mousemove.zf.slider mouseup.zf.slider');\n            });\n          })\n          // prevent events triggered by touch\n          .on('selectstart.zf.slider touchmove.zf.slider', function (e) {\n            e.preventDefault();\n          });\n        }\n\n        $handle.off('keydown.zf.slider').on('keydown.zf.slider', function (e) {\n          var _$handle = $(this),\n              idx = _this.options.doubleSided ? _this.handles.index(_$handle) : 0,\n              oldValue = parseFloat(_this.inputs.eq(idx).val()),\n              newValue;\n\n          // handle keyboard event with keyboard util\n          Foundation.Keyboard.handleKey(e, 'Slider', {\n            decrease: function () {\n              newValue = oldValue - _this.options.step;\n            },\n            increase: function () {\n              newValue = oldValue + _this.options.step;\n            },\n            decrease_fast: function () {\n              newValue = oldValue - _this.options.step * 10;\n            },\n            increase_fast: function () {\n              newValue = oldValue + _this.options.step * 10;\n            },\n            handled: function () {\n              // only set handle pos when event was handled specially\n              e.preventDefault();\n              _this._setHandlePos(_$handle, newValue, true);\n            }\n          });\n          /*if (newValue) { // if pressed key has special function, update value\n            e.preventDefault();\n            _this._setHandlePos(_$handle, newValue);\n          }*/\n        });\n      }\n\n      /**\n       * Destroys the slider plugin.\n       */\n\n    }, {\n      key: 'destroy',\n      value: function destroy() {\n        this.handles.off('.zf.slider');\n        this.inputs.off('.zf.slider');\n        this.$element.off('.zf.slider');\n\n        clearTimeout(this.timeout);\n\n        Foundation.unregisterPlugin(this);\n      }\n    }]);\n\n    return Slider;\n  }();\n\n  Slider.defaults = {\n    /**\n     * Minimum value for the slider scale.\n     * @option\n     * @example 0\n     */\n    start: 0,\n    /**\n     * Maximum value for the slider scale.\n     * @option\n     * @example 100\n     */\n    end: 100,\n    /**\n     * Minimum value change per change event.\n     * @option\n     * @example 1\n     */\n    step: 1,\n    /**\n     * Value at which the handle/input *(left handle/first input)* should be set to on initialization.\n     * @option\n     * @example 0\n     */\n    initialStart: 0,\n    /**\n     * Value at which the right handle/second input should be set to on initialization.\n     * @option\n     * @example 100\n     */\n    initialEnd: 100,\n    /**\n     * Allows the input to be located outside the container and visible. Set to by the JS\n     * @option\n     * @example false\n     */\n    binding: false,\n    /**\n     * Allows the user to click/tap on the slider bar to select a value.\n     * @option\n     * @example true\n     */\n    clickSelect: true,\n    /**\n     * Set to true and use the `vertical` class to change alignment to vertical.\n     * @option\n     * @example false\n     */\n    vertical: false,\n    /**\n     * Allows the user to drag the slider handle(s) to select a value.\n     * @option\n     * @example true\n     */\n    draggable: true,\n    /**\n     * Disables the slider and prevents event listeners from being applied. Double checked by JS with `disabledClass`.\n     * @option\n     * @example false\n     */\n    disabled: false,\n    /**\n     * Allows the use of two handles. Double checked by the JS. Changes some logic handling.\n     * @option\n     * @example false\n     */\n    doubleSided: false,\n    /**\n     * Potential future feature.\n     */\n    // steps: 100,\n    /**\n     * Number of decimal places the plugin should go to for floating point precision.\n     * @option\n     * @example 2\n     */\n    decimal: 2,\n    /**\n     * Time delay for dragged elements.\n     */\n    // dragDelay: 0,\n    /**\n     * Time, in ms, to animate the movement of a slider handle if user clicks/taps on the bar. Needs to be manually set if updating the transition time in the Sass settings.\n     * @option\n     * @example 200\n     */\n    moveTime: 200, //update this if changing the transition time in the sass\n    /**\n     * Class applied to disabled sliders.\n     * @option\n     * @example 'disabled'\n     */\n    disabledClass: 'disabled',\n    /**\n     * Will invert the default layout for a vertical<span data-tooltip title=\"who would do this???\"> </span>slider.\n     * @option\n     * @example false\n     */\n    invertVertical: false,\n    /**\n     * Milliseconds before the `changed.zf-slider` event is triggered after value change.\n     * @option\n     * @example 500\n     */\n    changedDelay: 500,\n    /**\n    * Basevalue for non-linear sliders\n    * @option\n    * @example 5\n    */\n    nonLinearBase: 5,\n    /**\n    * Basevalue for non-linear sliders, possible values are: 'linear', 'pow' & 'log'. Pow and Log use the nonLinearBase setting.\n    * @option\n    * @example 'linear'\n    */\n    positionValueFunction: 'linear'\n  };\n\n  function percent(frac, num) {\n    return frac / num;\n  }\n  function absPosition($handle, dir, clickPos, param) {\n    return Math.abs($handle.position()[dir] + $handle[param]() / 2 - clickPos);\n  }\n  function baseLog(base, value) {\n    return Math.log(value) / Math.log(base);\n  }\n\n  // Window exports\n  Foundation.plugin(Slider, 'Slider');\n}(jQuery);\n'use strict';\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n!function ($) {\n\n  /**\n   * Sticky module.\n   * @module foundation.sticky\n   * @requires foundation.util.triggers\n   * @requires foundation.util.mediaQuery\n   */\n\n  var Sticky = function () {\n    /**\n     * Creates a new instance of a sticky thing.\n     * @class\n     * @param {jQuery} element - jQuery object to make sticky.\n     * @param {Object} options - options object passed when creating the element programmatically.\n     */\n    function Sticky(element, options) {\n      _classCallCheck(this, Sticky);\n\n      this.$element = element;\n      this.options = $.extend({}, Sticky.defaults, this.$element.data(), options);\n\n      this._init();\n\n      Foundation.registerPlugin(this, 'Sticky');\n    }\n\n    /**\n     * Initializes the sticky element by adding classes, getting/setting dimensions, breakpoints and attributes\n     * @function\n     * @private\n     */\n\n\n    _createClass(Sticky, [{\n      key: '_init',\n      value: function _init() {\n        var $parent = this.$element.parent('[data-sticky-container]'),\n            id = this.$element[0].id || Foundation.GetYoDigits(6, 'sticky'),\n            _this = this;\n\n        if (!$parent.length) {\n          this.wasWrapped = true;\n        }\n        this.$container = $parent.length ? $parent : $(this.options.container).wrapInner(this.$element);\n        this.$container.addClass(this.options.containerClass);\n\n        this.$element.addClass(this.options.stickyClass).attr({ 'data-resize': id });\n\n        this.scrollCount = this.options.checkEvery;\n        this.isStuck = false;\n        $(window).one('load.zf.sticky', function () {\n          //We calculate the container height to have correct values for anchor points offset calculation.\n          _this.containerHeight = _this.$element.css(\"display\") == \"none\" ? 0 : _this.$element[0].getBoundingClientRect().height;\n          _this.$container.css('height', _this.containerHeight);\n          _this.elemHeight = _this.containerHeight;\n          if (_this.options.anchor !== '') {\n            _this.$anchor = $('#' + _this.options.anchor);\n          } else {\n            _this._parsePoints();\n          }\n\n          _this._setSizes(function () {\n            var scroll = window.pageYOffset;\n            _this._calc(false, scroll);\n            //Unstick the element will ensure that proper classes are set.\n            if (!_this.isStuck) {\n              _this._removeSticky(scroll >= _this.topPoint ? false : true);\n            }\n          });\n          _this._events(id.split('-').reverse().join('-'));\n        });\n      }\n\n      /**\n       * If using multiple elements as anchors, calculates the top and bottom pixel values the sticky thing should stick and unstick on.\n       * @function\n       * @private\n       */\n\n    }, {\n      key: '_parsePoints',\n      value: function _parsePoints() {\n        var top = this.options.topAnchor == \"\" ? 1 : this.options.topAnchor,\n            btm = this.options.btmAnchor == \"\" ? document.documentElement.scrollHeight : this.options.btmAnchor,\n            pts = [top, btm],\n            breaks = {};\n        for (var i = 0, len = pts.length; i < len && pts[i]; i++) {\n          var pt;\n          if (typeof pts[i] === 'number') {\n            pt = pts[i];\n          } else {\n            var place = pts[i].split(':'),\n                anchor = $('#' + place[0]);\n\n            pt = anchor.offset().top;\n            if (place[1] && place[1].toLowerCase() === 'bottom') {\n              pt += anchor[0].getBoundingClientRect().height;\n            }\n          }\n          breaks[i] = pt;\n        }\n\n        this.points = breaks;\n        return;\n      }\n\n      /**\n       * Adds event handlers for the scrolling element.\n       * @private\n       * @param {String} id - psuedo-random id for unique scroll event listener.\n       */\n\n    }, {\n      key: '_events',\n      value: function _events(id) {\n        var _this = this,\n            scrollListener = this.scrollListener = 'scroll.zf.' + id;\n        if (this.isOn) {\n          return;\n        }\n        if (this.canStick) {\n          this.isOn = true;\n          $(window).off(scrollListener).on(scrollListener, function (e) {\n            if (_this.scrollCount === 0) {\n              _this.scrollCount = _this.options.checkEvery;\n              _this._setSizes(function () {\n                _this._calc(false, window.pageYOffset);\n              });\n            } else {\n              _this.scrollCount--;\n              _this._calc(false, window.pageYOffset);\n            }\n          });\n        }\n\n        this.$element.off('resizeme.zf.trigger').on('resizeme.zf.trigger', function (e, el) {\n          _this._setSizes(function () {\n            _this._calc(false);\n            if (_this.canStick) {\n              if (!_this.isOn) {\n                _this._events(id);\n              }\n            } else if (_this.isOn) {\n              _this._pauseListeners(scrollListener);\n            }\n          });\n        });\n      }\n\n      /**\n       * Removes event handlers for scroll and change events on anchor.\n       * @fires Sticky#pause\n       * @param {String} scrollListener - unique, namespaced scroll listener attached to `window`\n       */\n\n    }, {\n      key: '_pauseListeners',\n      value: function _pauseListeners(scrollListener) {\n        this.isOn = false;\n        $(window).off(scrollListener);\n\n        /**\n         * Fires when the plugin is paused due to resize event shrinking the view.\n         * @event Sticky#pause\n         * @private\n         */\n        this.$element.trigger('pause.zf.sticky');\n      }\n\n      /**\n       * Called on every `scroll` event and on `_init`\n       * fires functions based on booleans and cached values\n       * @param {Boolean} checkSizes - true if plugin should recalculate sizes and breakpoints.\n       * @param {Number} scroll - current scroll position passed from scroll event cb function. If not passed, defaults to `window.pageYOffset`.\n       */\n\n    }, {\n      key: '_calc',\n      value: function _calc(checkSizes, scroll) {\n        if (checkSizes) {\n          this._setSizes();\n        }\n\n        if (!this.canStick) {\n          if (this.isStuck) {\n            this._removeSticky(true);\n          }\n          return false;\n        }\n\n        if (!scroll) {\n          scroll = window.pageYOffset;\n        }\n\n        if (scroll >= this.topPoint) {\n          if (scroll <= this.bottomPoint) {\n            if (!this.isStuck) {\n              this._setSticky();\n            }\n          } else {\n            if (this.isStuck) {\n              this._removeSticky(false);\n            }\n          }\n        } else {\n          if (this.isStuck) {\n            this._removeSticky(true);\n          }\n        }\n      }\n\n      /**\n       * Causes the $element to become stuck.\n       * Adds `position: fixed;`, and helper classes.\n       * @fires Sticky#stuckto\n       * @function\n       * @private\n       */\n\n    }, {\n      key: '_setSticky',\n      value: function _setSticky() {\n        var _this = this,\n            stickTo = this.options.stickTo,\n            mrgn = stickTo === 'top' ? 'marginTop' : 'marginBottom',\n            notStuckTo = stickTo === 'top' ? 'bottom' : 'top',\n            css = {};\n\n        css[mrgn] = this.options[mrgn] + 'em';\n        css[stickTo] = 0;\n        css[notStuckTo] = 'auto';\n        this.isStuck = true;\n        this.$element.removeClass('is-anchored is-at-' + notStuckTo).addClass('is-stuck is-at-' + stickTo).css(css)\n        /**\n         * Fires when the $element has become `position: fixed;`\n         * Namespaced to `top` or `bottom`, e.g. `sticky.zf.stuckto:top`\n         * @event Sticky#stuckto\n         */\n        .trigger('sticky.zf.stuckto:' + stickTo);\n        this.$element.on(\"transitionend webkitTransitionEnd oTransitionEnd otransitionend MSTransitionEnd\", function () {\n          _this._setSizes();\n        });\n      }\n\n      /**\n       * Causes the $element to become unstuck.\n       * Removes `position: fixed;`, and helper classes.\n       * Adds other helper classes.\n       * @param {Boolean} isTop - tells the function if the $element should anchor to the top or bottom of its $anchor element.\n       * @fires Sticky#unstuckfrom\n       * @private\n       */\n\n    }, {\n      key: '_removeSticky',\n      value: function _removeSticky(isTop) {\n        var stickTo = this.options.stickTo,\n            stickToTop = stickTo === 'top',\n            css = {},\n            anchorPt = (this.points ? this.points[1] - this.points[0] : this.anchorHeight) - this.elemHeight,\n            mrgn = stickToTop ? 'marginTop' : 'marginBottom',\n            notStuckTo = stickToTop ? 'bottom' : 'top',\n            topOrBottom = isTop ? 'top' : 'bottom';\n\n        css[mrgn] = 0;\n\n        css['bottom'] = 'auto';\n        if (isTop) {\n          css['top'] = 0;\n        } else {\n          css['top'] = anchorPt;\n        }\n\n        this.isStuck = false;\n        this.$element.removeClass('is-stuck is-at-' + stickTo).addClass('is-anchored is-at-' + topOrBottom).css(css)\n        /**\n         * Fires when the $element has become anchored.\n         * Namespaced to `top` or `bottom`, e.g. `sticky.zf.unstuckfrom:bottom`\n         * @event Sticky#unstuckfrom\n         */\n        .trigger('sticky.zf.unstuckfrom:' + topOrBottom);\n      }\n\n      /**\n       * Sets the $element and $container sizes for plugin.\n       * Calls `_setBreakPoints`.\n       * @param {Function} cb - optional callback function to fire on completion of `_setBreakPoints`.\n       * @private\n       */\n\n    }, {\n      key: '_setSizes',\n      value: function _setSizes(cb) {\n        this.canStick = Foundation.MediaQuery.is(this.options.stickyOn);\n        if (!this.canStick) {\n          if (cb && typeof cb === 'function') {\n            cb();\n          }\n        }\n        var _this = this,\n            newElemWidth = this.$container[0].getBoundingClientRect().width,\n            comp = window.getComputedStyle(this.$container[0]),\n            pdngl = parseInt(comp['padding-left'], 10),\n            pdngr = parseInt(comp['padding-right'], 10);\n\n        if (this.$anchor && this.$anchor.length) {\n          this.anchorHeight = this.$anchor[0].getBoundingClientRect().height;\n        } else {\n          this._parsePoints();\n        }\n\n        this.$element.css({\n          'max-width': newElemWidth - pdngl - pdngr + 'px'\n        });\n\n        var newContainerHeight = this.$element[0].getBoundingClientRect().height || this.containerHeight;\n        if (this.$element.css(\"display\") == \"none\") {\n          newContainerHeight = 0;\n        }\n        this.containerHeight = newContainerHeight;\n        this.$container.css({\n          height: newContainerHeight\n        });\n        this.elemHeight = newContainerHeight;\n\n        if (!this.isStuck) {\n          if (this.$element.hasClass('is-at-bottom')) {\n            var anchorPt = (this.points ? this.points[1] - this.$container.offset().top : this.anchorHeight) - this.elemHeight;\n            this.$element.css('top', anchorPt);\n          }\n        }\n\n        this._setBreakPoints(newContainerHeight, function () {\n          if (cb && typeof cb === 'function') {\n            cb();\n          }\n        });\n      }\n\n      /**\n       * Sets the upper and lower breakpoints for the element to become sticky/unsticky.\n       * @param {Number} elemHeight - px value for sticky.$element height, calculated by `_setSizes`.\n       * @param {Function} cb - optional callback function to be called on completion.\n       * @private\n       */\n\n    }, {\n      key: '_setBreakPoints',\n      value: function _setBreakPoints(elemHeight, cb) {\n        if (!this.canStick) {\n          if (cb && typeof cb === 'function') {\n            cb();\n          } else {\n            return false;\n          }\n        }\n        var mTop = emCalc(this.options.marginTop),\n            mBtm = emCalc(this.options.marginBottom),\n            topPoint = this.points ? this.points[0] : this.$anchor.offset().top,\n            bottomPoint = this.points ? this.points[1] : topPoint + this.anchorHeight,\n\n        // topPoint = this.$anchor.offset().top || this.points[0],\n        // bottomPoint = topPoint + this.anchorHeight || this.points[1],\n        winHeight = window.innerHeight;\n\n        if (this.options.stickTo === 'top') {\n          topPoint -= mTop;\n          bottomPoint -= elemHeight + mTop;\n        } else if (this.options.stickTo === 'bottom') {\n          topPoint -= winHeight - (elemHeight + mBtm);\n          bottomPoint -= winHeight - mBtm;\n        } else {\n          //this would be the stickTo: both option... tricky\n        }\n\n        this.topPoint = topPoint;\n        this.bottomPoint = bottomPoint;\n\n        if (cb && typeof cb === 'function') {\n          cb();\n        }\n      }\n\n      /**\n       * Destroys the current sticky element.\n       * Resets the element to the top position first.\n       * Removes event listeners, JS-added css properties and classes, and unwraps the $element if the JS added the $container.\n       * @function\n       */\n\n    }, {\n      key: 'destroy',\n      value: function destroy() {\n        this._removeSticky(true);\n\n        this.$element.removeClass(this.options.stickyClass + ' is-anchored is-at-top').css({\n          height: '',\n          top: '',\n          bottom: '',\n          'max-width': ''\n        }).off('resizeme.zf.trigger');\n        if (this.$anchor && this.$anchor.length) {\n          this.$anchor.off('change.zf.sticky');\n        }\n        $(window).off(this.scrollListener);\n\n        if (this.wasWrapped) {\n          this.$element.unwrap();\n        } else {\n          this.$container.removeClass(this.options.containerClass).css({\n            height: ''\n          });\n        }\n        Foundation.unregisterPlugin(this);\n      }\n    }]);\n\n    return Sticky;\n  }();\n\n  Sticky.defaults = {\n    /**\n     * Customizable container template. Add your own classes for styling and sizing.\n     * @option\n     * @example '&lt;div data-sticky-container class=\"small-6 columns\"&gt;&lt;/div&gt;'\n     */\n    container: '<div data-sticky-container></div>',\n    /**\n     * Location in the view the element sticks to.\n     * @option\n     * @example 'top'\n     */\n    stickTo: 'top',\n    /**\n     * If anchored to a single element, the id of that element.\n     * @option\n     * @example 'exampleId'\n     */\n    anchor: '',\n    /**\n     * If using more than one element as anchor points, the id of the top anchor.\n     * @option\n     * @example 'exampleId:top'\n     */\n    topAnchor: '',\n    /**\n     * If using more than one element as anchor points, the id of the bottom anchor.\n     * @option\n     * @example 'exampleId:bottom'\n     */\n    btmAnchor: '',\n    /**\n     * Margin, in `em`'s to apply to the top of the element when it becomes sticky.\n     * @option\n     * @example 1\n     */\n    marginTop: 1,\n    /**\n     * Margin, in `em`'s to apply to the bottom of the element when it becomes sticky.\n     * @option\n     * @example 1\n     */\n    marginBottom: 1,\n    /**\n     * Breakpoint string that is the minimum screen size an element should become sticky.\n     * @option\n     * @example 'medium'\n     */\n    stickyOn: 'medium',\n    /**\n     * Class applied to sticky element, and removed on destruction. Foundation defaults to `sticky`.\n     * @option\n     * @example 'sticky'\n     */\n    stickyClass: 'sticky',\n    /**\n     * Class applied to sticky container. Foundation defaults to `sticky-container`.\n     * @option\n     * @example 'sticky-container'\n     */\n    containerClass: 'sticky-container',\n    /**\n     * Number of scroll events between the plugin's recalculating sticky points. Setting it to `0` will cause it to recalc every scroll event, setting it to `-1` will prevent recalc on scroll.\n     * @option\n     * @example 50\n     */\n    checkEvery: -1\n  };\n\n  /**\n   * Helper function to calculate em values\n   * @param Number {em} - number of em's to calculate into pixels\n   */\n  function emCalc(em) {\n    return parseInt(window.getComputedStyle(document.body, null).fontSize, 10) * em;\n  }\n\n  // Window exports\n  Foundation.plugin(Sticky, 'Sticky');\n}(jQuery);\n'use strict';\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n!function ($) {\n\n  /**\n   * Tabs module.\n   * @module foundation.tabs\n   * @requires foundation.util.keyboard\n   * @requires foundation.util.timerAndImageLoader if tabs contain images\n   */\n\n  var Tabs = function () {\n    /**\n     * Creates a new instance of tabs.\n     * @class\n     * @fires Tabs#init\n     * @param {jQuery} element - jQuery object to make into tabs.\n     * @param {Object} options - Overrides to the default plugin settings.\n     */\n    function Tabs(element, options) {\n      _classCallCheck(this, Tabs);\n\n      this.$element = element;\n      this.options = $.extend({}, Tabs.defaults, this.$element.data(), options);\n\n      this._init();\n      Foundation.registerPlugin(this, 'Tabs');\n      Foundation.Keyboard.register('Tabs', {\n        'ENTER': 'open',\n        'SPACE': 'open',\n        'ARROW_RIGHT': 'next',\n        'ARROW_UP': 'previous',\n        'ARROW_DOWN': 'next',\n        'ARROW_LEFT': 'previous'\n        // 'TAB': 'next',\n        // 'SHIFT_TAB': 'previous'\n      });\n    }\n\n    /**\n     * Initializes the tabs by showing and focusing (if autoFocus=true) the preset active tab.\n     * @private\n     */\n\n\n    _createClass(Tabs, [{\n      key: '_init',\n      value: function _init() {\n        var _this = this;\n\n        this.$element.attr({ 'role': 'tablist' });\n        this.$tabTitles = this.$element.find('.' + this.options.linkClass);\n        this.$tabContent = $('[data-tabs-content=\"' + this.$element[0].id + '\"]');\n\n        this.$tabTitles.each(function () {\n          var $elem = $(this),\n              $link = $elem.find('a'),\n              isActive = $elem.hasClass('' + _this.options.linkActiveClass),\n              hash = $link[0].hash.slice(1),\n              linkId = $link[0].id ? $link[0].id : hash + '-label',\n              $tabContent = $('#' + hash);\n\n          $elem.attr({ 'role': 'presentation' });\n\n          $link.attr({\n            'role': 'tab',\n            'aria-controls': hash,\n            'aria-selected': isActive,\n            'id': linkId\n          });\n\n          $tabContent.attr({\n            'role': 'tabpanel',\n            'aria-hidden': !isActive,\n            'aria-labelledby': linkId\n          });\n\n          if (isActive && _this.options.autoFocus) {\n            $(window).load(function () {\n              $('html, body').animate({ scrollTop: $elem.offset().top }, _this.options.deepLinkSmudgeDelay, function () {\n                $link.focus();\n              });\n            });\n          }\n\n          //use browser to open a tab, if it exists in this tabset\n          if (_this.options.deepLink) {\n            var anchor = window.location.hash;\n            //need a hash and a relevant anchor in this tabset\n            if (anchor.length) {\n              var $link = $elem.find('[href=\"' + anchor + '\"]');\n              if ($link.length) {\n                _this.selectTab($(anchor));\n\n                //roll up a little to show the titles\n                if (_this.options.deepLinkSmudge) {\n                  $(window).load(function () {\n                    var offset = $elem.offset();\n                    $('html, body').animate({ scrollTop: offset.top }, _this.options.deepLinkSmudgeDelay);\n                  });\n                }\n\n                /**\n                  * Fires when the zplugin has deeplinked at pageload\n                  * @event Tabs#deeplink\n                  */\n                $elem.trigger('deeplink.zf.tabs', [$link, $(anchor)]);\n              }\n            }\n          }\n        });\n\n        if (this.options.matchHeight) {\n          var $images = this.$tabContent.find('img');\n\n          if ($images.length) {\n            Foundation.onImagesLoaded($images, this._setHeight.bind(this));\n          } else {\n            this._setHeight();\n          }\n        }\n\n        this._events();\n      }\n\n      /**\n       * Adds event handlers for items within the tabs.\n       * @private\n       */\n\n    }, {\n      key: '_events',\n      value: function _events() {\n        this._addKeyHandler();\n        this._addClickHandler();\n        this._setHeightMqHandler = null;\n\n        if (this.options.matchHeight) {\n          this._setHeightMqHandler = this._setHeight.bind(this);\n\n          $(window).on('changed.zf.mediaquery', this._setHeightMqHandler);\n        }\n      }\n\n      /**\n       * Adds click handlers for items within the tabs.\n       * @private\n       */\n\n    }, {\n      key: '_addClickHandler',\n      value: function _addClickHandler() {\n        var _this = this;\n\n        this.$element.off('click.zf.tabs').on('click.zf.tabs', '.' + this.options.linkClass, function (e) {\n          e.preventDefault();\n          e.stopPropagation();\n          _this._handleTabChange($(this));\n        });\n      }\n\n      /**\n       * Adds keyboard event handlers for items within the tabs.\n       * @private\n       */\n\n    }, {\n      key: '_addKeyHandler',\n      value: function _addKeyHandler() {\n        var _this = this;\n\n        this.$tabTitles.off('keydown.zf.tabs').on('keydown.zf.tabs', function (e) {\n          if (e.which === 9) return;\n\n          var $element = $(this),\n              $elements = $element.parent('ul').children('li'),\n              $prevElement,\n              $nextElement;\n\n          $elements.each(function (i) {\n            if ($(this).is($element)) {\n              if (_this.options.wrapOnKeys) {\n                $prevElement = i === 0 ? $elements.last() : $elements.eq(i - 1);\n                $nextElement = i === $elements.length - 1 ? $elements.first() : $elements.eq(i + 1);\n              } else {\n                $prevElement = $elements.eq(Math.max(0, i - 1));\n                $nextElement = $elements.eq(Math.min(i + 1, $elements.length - 1));\n              }\n              return;\n            }\n          });\n\n          // handle keyboard event with keyboard util\n          Foundation.Keyboard.handleKey(e, 'Tabs', {\n            open: function () {\n              $element.find('[role=\"tab\"]').focus();\n              _this._handleTabChange($element);\n            },\n            previous: function () {\n              $prevElement.find('[role=\"tab\"]').focus();\n              _this._handleTabChange($prevElement);\n            },\n            next: function () {\n              $nextElement.find('[role=\"tab\"]').focus();\n              _this._handleTabChange($nextElement);\n            },\n            handled: function () {\n              e.stopPropagation();\n              e.preventDefault();\n            }\n          });\n        });\n      }\n\n      /**\n       * Opens the tab `$targetContent` defined by `$target`. Collapses active tab.\n       * @param {jQuery} $target - Tab to open.\n       * @fires Tabs#change\n       * @function\n       */\n\n    }, {\n      key: '_handleTabChange',\n      value: function _handleTabChange($target) {\n\n        /**\n         * Check for active class on target. Collapse if exists.\n         */\n        if ($target.hasClass('' + this.options.linkActiveClass)) {\n          if (this.options.activeCollapse) {\n            this._collapseTab($target);\n\n            /**\n             * Fires when the zplugin has successfully collapsed tabs.\n             * @event Tabs#collapse\n             */\n            this.$element.trigger('collapse.zf.tabs', [$target]);\n          }\n          return;\n        }\n\n        var $oldTab = this.$element.find('.' + this.options.linkClass + '.' + this.options.linkActiveClass),\n            $tabLink = $target.find('[role=\"tab\"]'),\n            hash = $tabLink[0].hash,\n            $targetContent = this.$tabContent.find(hash);\n\n        //close old tab\n        this._collapseTab($oldTab);\n\n        //open new tab\n        this._openTab($target);\n\n        //either replace or update browser history\n        if (this.options.deepLink) {\n          var anchor = $target.find('a').attr('href');\n\n          if (this.options.updateHistory) {\n            history.pushState({}, '', anchor);\n          } else {\n            history.replaceState({}, '', anchor);\n          }\n        }\n\n        /**\n         * Fires when the plugin has successfully changed tabs.\n         * @event Tabs#change\n         */\n        this.$element.trigger('change.zf.tabs', [$target, $targetContent]);\n\n        //fire to children a mutation event\n        $targetContent.find(\"[data-mutate]\").trigger(\"mutateme.zf.trigger\");\n      }\n\n      /**\n       * Opens the tab `$targetContent` defined by `$target`.\n       * @param {jQuery} $target - Tab to Open.\n       * @function\n       */\n\n    }, {\n      key: '_openTab',\n      value: function _openTab($target) {\n        var $tabLink = $target.find('[role=\"tab\"]'),\n            hash = $tabLink[0].hash,\n            $targetContent = this.$tabContent.find(hash);\n\n        $target.addClass('' + this.options.linkActiveClass);\n\n        $tabLink.attr({ 'aria-selected': 'true' });\n\n        $targetContent.addClass('' + this.options.panelActiveClass).attr({ 'aria-hidden': 'false' });\n      }\n\n      /**\n       * Collapses `$targetContent` defined by `$target`.\n       * @param {jQuery} $target - Tab to Open.\n       * @function\n       */\n\n    }, {\n      key: '_collapseTab',\n      value: function _collapseTab($target) {\n        var $target_anchor = $target.removeClass('' + this.options.linkActiveClass).find('[role=\"tab\"]').attr({ 'aria-selected': 'false' });\n\n        $('#' + $target_anchor.attr('aria-controls')).removeClass('' + this.options.panelActiveClass).attr({ 'aria-hidden': 'true' });\n      }\n\n      /**\n       * Public method for selecting a content pane to display.\n       * @param {jQuery | String} elem - jQuery object or string of the id of the pane to display.\n       * @function\n       */\n\n    }, {\n      key: 'selectTab',\n      value: function selectTab(elem) {\n        var idStr;\n\n        if (typeof elem === 'object') {\n          idStr = elem[0].id;\n        } else {\n          idStr = elem;\n        }\n\n        if (idStr.indexOf('#') < 0) {\n          idStr = '#' + idStr;\n        }\n\n        var $target = this.$tabTitles.find('[href=\"' + idStr + '\"]').parent('.' + this.options.linkClass);\n\n        this._handleTabChange($target);\n      }\n    }, {\n      key: '_setHeight',\n\n      /**\n       * Sets the height of each panel to the height of the tallest panel.\n       * If enabled in options, gets called on media query change.\n       * If loading content via external source, can be called directly or with _reflow.\n       * @function\n       * @private\n       */\n      value: function _setHeight() {\n        var max = 0;\n        this.$tabContent.find('.' + this.options.panelClass).css('height', '').each(function () {\n          var panel = $(this),\n              isActive = panel.hasClass('' + this.options.panelActiveClass);\n\n          if (!isActive) {\n            panel.css({ 'visibility': 'hidden', 'display': 'block' });\n          }\n\n          var temp = this.getBoundingClientRect().height;\n\n          if (!isActive) {\n            panel.css({\n              'visibility': '',\n              'display': ''\n            });\n          }\n\n          max = temp > max ? temp : max;\n        }).css('height', max + 'px');\n      }\n\n      /**\n       * Destroys an instance of an tabs.\n       * @fires Tabs#destroyed\n       */\n\n    }, {\n      key: 'destroy',\n      value: function destroy() {\n        this.$element.find('.' + this.options.linkClass).off('.zf.tabs').hide().end().find('.' + this.options.panelClass).hide();\n\n        if (this.options.matchHeight) {\n          if (this._setHeightMqHandler != null) {\n            $(window).off('changed.zf.mediaquery', this._setHeightMqHandler);\n          }\n        }\n\n        Foundation.unregisterPlugin(this);\n      }\n    }]);\n\n    return Tabs;\n  }();\n\n  Tabs.defaults = {\n    /**\n     * Allows the window to scroll to content of pane specified by hash anchor\n     * @option\n     * @example false\n     */\n    deepLink: false,\n\n    /**\n     * Adjust the deep link scroll to make sure the top of the tab panel is visible\n     * @option\n     * @example false\n     */\n    deepLinkSmudge: false,\n\n    /**\n     * Animation time (ms) for the deep link adjustment\n     * @option\n     * @example 300\n     */\n    deepLinkSmudgeDelay: 300,\n\n    /**\n     * Update the browser history with the open tab\n     * @option\n     * @example false\n     */\n    updateHistory: false,\n\n    /**\n     * Allows the window to scroll to content of active pane on load if set to true.\n     * Not recommended if more than one tab panel per page.\n     * @option\n     * @example false\n     */\n    autoFocus: false,\n\n    /**\n     * Allows keyboard input to 'wrap' around the tab links.\n     * @option\n     * @example true\n     */\n    wrapOnKeys: true,\n\n    /**\n     * Allows the tab content panes to match heights if set to true.\n     * @option\n     * @example false\n     */\n    matchHeight: false,\n\n    /**\n     * Allows active tabs to collapse when clicked.\n     * @option\n     * @example false\n     */\n    activeCollapse: false,\n\n    /**\n     * Class applied to `li`'s in tab link list.\n     * @option\n     * @example 'tabs-title'\n     */\n    linkClass: 'tabs-title',\n\n    /**\n     * Class applied to the active `li` in tab link list.\n     * @option\n     * @example 'is-active'\n     */\n    linkActiveClass: 'is-active',\n\n    /**\n     * Class applied to the content containers.\n     * @option\n     * @example 'tabs-panel'\n     */\n    panelClass: 'tabs-panel',\n\n    /**\n     * Class applied to the active content container.\n     * @option\n     * @example 'is-active'\n     */\n    panelActiveClass: 'is-active'\n  };\n\n  // Window exports\n  Foundation.plugin(Tabs, 'Tabs');\n}(jQuery);\n'use strict';\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n!function ($) {\n\n  /**\n   * Toggler module.\n   * @module foundation.toggler\n   * @requires foundation.util.motion\n   * @requires foundation.util.triggers\n   */\n\n  var Toggler = function () {\n    /**\n     * Creates a new instance of Toggler.\n     * @class\n     * @fires Toggler#init\n     * @param {Object} element - jQuery object to add the trigger to.\n     * @param {Object} options - Overrides to the default plugin settings.\n     */\n    function Toggler(element, options) {\n      _classCallCheck(this, Toggler);\n\n      this.$element = element;\n      this.options = $.extend({}, Toggler.defaults, element.data(), options);\n      this.className = '';\n\n      this._init();\n      this._events();\n\n      Foundation.registerPlugin(this, 'Toggler');\n    }\n\n    /**\n     * Initializes the Toggler plugin by parsing the toggle class from data-toggler, or animation classes from data-animate.\n     * @function\n     * @private\n     */\n\n\n    _createClass(Toggler, [{\n      key: '_init',\n      value: function _init() {\n        var input;\n        // Parse animation classes if they were set\n        if (this.options.animate) {\n          input = this.options.animate.split(' ');\n\n          this.animationIn = input[0];\n          this.animationOut = input[1] || null;\n        }\n        // Otherwise, parse toggle class\n        else {\n            input = this.$element.data('toggler');\n            // Allow for a . at the beginning of the string\n            this.className = input[0] === '.' ? input.slice(1) : input;\n          }\n\n        // Add ARIA attributes to triggers\n        var id = this.$element[0].id;\n        $('[data-open=\"' + id + '\"], [data-close=\"' + id + '\"], [data-toggle=\"' + id + '\"]').attr('aria-controls', id);\n        // If the target is hidden, add aria-hidden\n        this.$element.attr('aria-expanded', this.$element.is(':hidden') ? false : true);\n      }\n\n      /**\n       * Initializes events for the toggle trigger.\n       * @function\n       * @private\n       */\n\n    }, {\n      key: '_events',\n      value: function _events() {\n        this.$element.off('toggle.zf.trigger').on('toggle.zf.trigger', this.toggle.bind(this));\n      }\n\n      /**\n       * Toggles the target class on the target element. An event is fired from the original trigger depending on if the resultant state was \"on\" or \"off\".\n       * @function\n       * @fires Toggler#on\n       * @fires Toggler#off\n       */\n\n    }, {\n      key: 'toggle',\n      value: function toggle() {\n        this[this.options.animate ? '_toggleAnimate' : '_toggleClass']();\n      }\n    }, {\n      key: '_toggleClass',\n      value: function _toggleClass() {\n        this.$element.toggleClass(this.className);\n\n        var isOn = this.$element.hasClass(this.className);\n        if (isOn) {\n          /**\n           * Fires if the target element has the class after a toggle.\n           * @event Toggler#on\n           */\n          this.$element.trigger('on.zf.toggler');\n        } else {\n          /**\n           * Fires if the target element does not have the class after a toggle.\n           * @event Toggler#off\n           */\n          this.$element.trigger('off.zf.toggler');\n        }\n\n        this._updateARIA(isOn);\n        this.$element.find('[data-mutate]').trigger('mutateme.zf.trigger');\n      }\n    }, {\n      key: '_toggleAnimate',\n      value: function _toggleAnimate() {\n        var _this = this;\n\n        if (this.$element.is(':hidden')) {\n          Foundation.Motion.animateIn(this.$element, this.animationIn, function () {\n            _this._updateARIA(true);\n            this.trigger('on.zf.toggler');\n            this.find('[data-mutate]').trigger('mutateme.zf.trigger');\n          });\n        } else {\n          Foundation.Motion.animateOut(this.$element, this.animationOut, function () {\n            _this._updateARIA(false);\n            this.trigger('off.zf.toggler');\n            this.find('[data-mutate]').trigger('mutateme.zf.trigger');\n          });\n        }\n      }\n    }, {\n      key: '_updateARIA',\n      value: function _updateARIA(isOn) {\n        this.$element.attr('aria-expanded', isOn ? true : false);\n      }\n\n      /**\n       * Destroys the instance of Toggler on the element.\n       * @function\n       */\n\n    }, {\n      key: 'destroy',\n      value: function destroy() {\n        this.$element.off('.zf.toggler');\n        Foundation.unregisterPlugin(this);\n      }\n    }]);\n\n    return Toggler;\n  }();\n\n  Toggler.defaults = {\n    /**\n     * Tells the plugin if the element should animated when toggled.\n     * @option\n     * @example false\n     */\n    animate: false\n  };\n\n  // Window exports\n  Foundation.plugin(Toggler, 'Toggler');\n}(jQuery);\n'use strict';\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n!function ($) {\n\n  /**\n   * Tooltip module.\n   * @module foundation.tooltip\n   * @requires foundation.util.box\n   * @requires foundation.util.mediaQuery\n   * @requires foundation.util.triggers\n   */\n\n  var Tooltip = function () {\n    /**\n     * Creates a new instance of a Tooltip.\n     * @class\n     * @fires Tooltip#init\n     * @param {jQuery} element - jQuery object to attach a tooltip to.\n     * @param {Object} options - object to extend the default configuration.\n     */\n    function Tooltip(element, options) {\n      _classCallCheck(this, Tooltip);\n\n      this.$element = element;\n      this.options = $.extend({}, Tooltip.defaults, this.$element.data(), options);\n\n      this.isActive = false;\n      this.isClick = false;\n      this._init();\n\n      Foundation.registerPlugin(this, 'Tooltip');\n    }\n\n    /**\n     * Initializes the tooltip by setting the creating the tip element, adding it's text, setting private variables and setting attributes on the anchor.\n     * @private\n     */\n\n\n    _createClass(Tooltip, [{\n      key: '_init',\n      value: function _init() {\n        var elemId = this.$element.attr('aria-describedby') || Foundation.GetYoDigits(6, 'tooltip');\n\n        this.options.positionClass = this.options.positionClass || this._getPositionClass(this.$element);\n        this.options.tipText = this.options.tipText || this.$element.attr('title');\n        this.template = this.options.template ? $(this.options.template) : this._buildTemplate(elemId);\n\n        if (this.options.allowHtml) {\n          this.template.appendTo(document.body).html(this.options.tipText).hide();\n        } else {\n          this.template.appendTo(document.body).text(this.options.tipText).hide();\n        }\n\n        this.$element.attr({\n          'title': '',\n          'aria-describedby': elemId,\n          'data-yeti-box': elemId,\n          'data-toggle': elemId,\n          'data-resize': elemId\n        }).addClass(this.options.triggerClass);\n\n        //helper variables to track movement on collisions\n        this.usedPositions = [];\n        this.counter = 4;\n        this.classChanged = false;\n\n        this._events();\n      }\n\n      /**\n       * Grabs the current positioning class, if present, and returns the value or an empty string.\n       * @private\n       */\n\n    }, {\n      key: '_getPositionClass',\n      value: function _getPositionClass(element) {\n        if (!element) {\n          return '';\n        }\n        // var position = element.attr('class').match(/top|left|right/g);\n        var position = element[0].className.match(/\\b(top|left|right)\\b/g);\n        position = position ? position[0] : '';\n        return position;\n      }\n    }, {\n      key: '_buildTemplate',\n\n      /**\n       * builds the tooltip element, adds attributes, and returns the template.\n       * @private\n       */\n      value: function _buildTemplate(id) {\n        var templateClasses = (this.options.tooltipClass + ' ' + this.options.positionClass + ' ' + this.options.templateClasses).trim();\n        var $template = $('<div></div>').addClass(templateClasses).attr({\n          'role': 'tooltip',\n          'aria-hidden': true,\n          'data-is-active': false,\n          'data-is-focus': false,\n          'id': id\n        });\n        return $template;\n      }\n\n      /**\n       * Function that gets called if a collision event is detected.\n       * @param {String} position - positioning class to try\n       * @private\n       */\n\n    }, {\n      key: '_reposition',\n      value: function _reposition(position) {\n        this.usedPositions.push(position ? position : 'bottom');\n\n        //default, try switching to opposite side\n        if (!position && this.usedPositions.indexOf('top') < 0) {\n          this.template.addClass('top');\n        } else if (position === 'top' && this.usedPositions.indexOf('bottom') < 0) {\n          this.template.removeClass(position);\n        } else if (position === 'left' && this.usedPositions.indexOf('right') < 0) {\n          this.template.removeClass(position).addClass('right');\n        } else if (position === 'right' && this.usedPositions.indexOf('left') < 0) {\n          this.template.removeClass(position).addClass('left');\n        }\n\n        //if default change didn't work, try bottom or left first\n        else if (!position && this.usedPositions.indexOf('top') > -1 && this.usedPositions.indexOf('left') < 0) {\n            this.template.addClass('left');\n          } else if (position === 'top' && this.usedPositions.indexOf('bottom') > -1 && this.usedPositions.indexOf('left') < 0) {\n            this.template.removeClass(position).addClass('left');\n          } else if (position === 'left' && this.usedPositions.indexOf('right') > -1 && this.usedPositions.indexOf('bottom') < 0) {\n            this.template.removeClass(position);\n          } else if (position === 'right' && this.usedPositions.indexOf('left') > -1 && this.usedPositions.indexOf('bottom') < 0) {\n            this.template.removeClass(position);\n          }\n          //if nothing cleared, set to bottom\n          else {\n              this.template.removeClass(position);\n            }\n        this.classChanged = true;\n        this.counter--;\n      }\n\n      /**\n       * sets the position class of an element and recursively calls itself until there are no more possible positions to attempt, or the tooltip element is no longer colliding.\n       * if the tooltip is larger than the screen width, default to full width - any user selected margin\n       * @private\n       */\n\n    }, {\n      key: '_setPosition',\n      value: function _setPosition() {\n        var position = this._getPositionClass(this.template),\n            $tipDims = Foundation.Box.GetDimensions(this.template),\n            $anchorDims = Foundation.Box.GetDimensions(this.$element),\n            direction = position === 'left' ? 'left' : position === 'right' ? 'left' : 'top',\n            param = direction === 'top' ? 'height' : 'width',\n            offset = param === 'height' ? this.options.vOffset : this.options.hOffset,\n            _this = this;\n\n        if ($tipDims.width >= $tipDims.windowDims.width || !this.counter && !Foundation.Box.ImNotTouchingYou(this.template)) {\n          this.template.offset(Foundation.Box.GetOffsets(this.template, this.$element, 'center bottom', this.options.vOffset, this.options.hOffset, true)).css({\n            // this.$element.offset(Foundation.GetOffsets(this.template, this.$element, 'center bottom', this.options.vOffset, this.options.hOffset, true)).css({\n            'width': $anchorDims.windowDims.width - this.options.hOffset * 2,\n            'height': 'auto'\n          });\n          return false;\n        }\n\n        this.template.offset(Foundation.Box.GetOffsets(this.template, this.$element, 'center ' + (position || 'bottom'), this.options.vOffset, this.options.hOffset));\n\n        while (!Foundation.Box.ImNotTouchingYou(this.template) && this.counter) {\n          this._reposition(position);\n          this._setPosition();\n        }\n      }\n\n      /**\n       * reveals the tooltip, and fires an event to close any other open tooltips on the page\n       * @fires Tooltip#closeme\n       * @fires Tooltip#show\n       * @function\n       */\n\n    }, {\n      key: 'show',\n      value: function show() {\n        if (this.options.showOn !== 'all' && !Foundation.MediaQuery.is(this.options.showOn)) {\n          // console.error('The screen is too small to display this tooltip');\n          return false;\n        }\n\n        var _this = this;\n        this.template.css('visibility', 'hidden').show();\n        this._setPosition();\n\n        /**\n         * Fires to close all other open tooltips on the page\n         * @event Closeme#tooltip\n         */\n        this.$element.trigger('closeme.zf.tooltip', this.template.attr('id'));\n\n        this.template.attr({\n          'data-is-active': true,\n          'aria-hidden': false\n        });\n        _this.isActive = true;\n        // console.log(this.template);\n        this.template.stop().hide().css('visibility', '').fadeIn(this.options.fadeInDuration, function () {\n          //maybe do stuff?\n        });\n        /**\n         * Fires when the tooltip is shown\n         * @event Tooltip#show\n         */\n        this.$element.trigger('show.zf.tooltip');\n      }\n\n      /**\n       * Hides the current tooltip, and resets the positioning class if it was changed due to collision\n       * @fires Tooltip#hide\n       * @function\n       */\n\n    }, {\n      key: 'hide',\n      value: function hide() {\n        // console.log('hiding', this.$element.data('yeti-box'));\n        var _this = this;\n        this.template.stop().attr({\n          'aria-hidden': true,\n          'data-is-active': false\n        }).fadeOut(this.options.fadeOutDuration, function () {\n          _this.isActive = false;\n          _this.isClick = false;\n          if (_this.classChanged) {\n            _this.template.removeClass(_this._getPositionClass(_this.template)).addClass(_this.options.positionClass);\n\n            _this.usedPositions = [];\n            _this.counter = 4;\n            _this.classChanged = false;\n          }\n        });\n        /**\n         * fires when the tooltip is hidden\n         * @event Tooltip#hide\n         */\n        this.$element.trigger('hide.zf.tooltip');\n      }\n\n      /**\n       * adds event listeners for the tooltip and its anchor\n       * TODO combine some of the listeners like focus and mouseenter, etc.\n       * @private\n       */\n\n    }, {\n      key: '_events',\n      value: function _events() {\n        var _this = this;\n        var $template = this.template;\n        var isFocus = false;\n\n        if (!this.options.disableHover) {\n\n          this.$element.on('mouseenter.zf.tooltip', function (e) {\n            if (!_this.isActive) {\n              _this.timeout = setTimeout(function () {\n                _this.show();\n              }, _this.options.hoverDelay);\n            }\n          }).on('mouseleave.zf.tooltip', function (e) {\n            clearTimeout(_this.timeout);\n            if (!isFocus || _this.isClick && !_this.options.clickOpen) {\n              _this.hide();\n            }\n          });\n        }\n\n        if (this.options.clickOpen) {\n          this.$element.on('mousedown.zf.tooltip', function (e) {\n            e.stopImmediatePropagation();\n            if (_this.isClick) {\n              //_this.hide();\n              // _this.isClick = false;\n            } else {\n              _this.isClick = true;\n              if ((_this.options.disableHover || !_this.$element.attr('tabindex')) && !_this.isActive) {\n                _this.show();\n              }\n            }\n          });\n        } else {\n          this.$element.on('mousedown.zf.tooltip', function (e) {\n            e.stopImmediatePropagation();\n            _this.isClick = true;\n          });\n        }\n\n        if (!this.options.disableForTouch) {\n          this.$element.on('tap.zf.tooltip touchend.zf.tooltip', function (e) {\n            _this.isActive ? _this.hide() : _this.show();\n          });\n        }\n\n        this.$element.on({\n          // 'toggle.zf.trigger': this.toggle.bind(this),\n          // 'close.zf.trigger': this.hide.bind(this)\n          'close.zf.trigger': this.hide.bind(this)\n        });\n\n        this.$element.on('focus.zf.tooltip', function (e) {\n          isFocus = true;\n          if (_this.isClick) {\n            // If we're not showing open on clicks, we need to pretend a click-launched focus isn't\n            // a real focus, otherwise on hover and come back we get bad behavior\n            if (!_this.options.clickOpen) {\n              isFocus = false;\n            }\n            return false;\n          } else {\n            _this.show();\n          }\n        }).on('focusout.zf.tooltip', function (e) {\n          isFocus = false;\n          _this.isClick = false;\n          _this.hide();\n        }).on('resizeme.zf.trigger', function () {\n          if (_this.isActive) {\n            _this._setPosition();\n          }\n        });\n      }\n\n      /**\n       * adds a toggle method, in addition to the static show() & hide() functions\n       * @function\n       */\n\n    }, {\n      key: 'toggle',\n      value: function toggle() {\n        if (this.isActive) {\n          this.hide();\n        } else {\n          this.show();\n        }\n      }\n\n      /**\n       * Destroys an instance of tooltip, removes template element from the view.\n       * @function\n       */\n\n    }, {\n      key: 'destroy',\n      value: function destroy() {\n        this.$element.attr('title', this.template.text()).off('.zf.trigger .zf.tooltip').removeClass('has-tip top right left').removeAttr('aria-describedby aria-haspopup data-disable-hover data-resize data-toggle data-tooltip data-yeti-box');\n\n        this.template.remove();\n\n        Foundation.unregisterPlugin(this);\n      }\n    }]);\n\n    return Tooltip;\n  }();\n\n  Tooltip.defaults = {\n    disableForTouch: false,\n    /**\n     * Time, in ms, before a tooltip should open on hover.\n     * @option\n     * @example 200\n     */\n    hoverDelay: 200,\n    /**\n     * Time, in ms, a tooltip should take to fade into view.\n     * @option\n     * @example 150\n     */\n    fadeInDuration: 150,\n    /**\n     * Time, in ms, a tooltip should take to fade out of view.\n     * @option\n     * @example 150\n     */\n    fadeOutDuration: 150,\n    /**\n     * Disables hover events from opening the tooltip if set to true\n     * @option\n     * @example false\n     */\n    disableHover: false,\n    /**\n     * Optional addtional classes to apply to the tooltip template on init.\n     * @option\n     * @example 'my-cool-tip-class'\n     */\n    templateClasses: '',\n    /**\n     * Non-optional class added to tooltip templates. Foundation default is 'tooltip'.\n     * @option\n     * @example 'tooltip'\n     */\n    tooltipClass: 'tooltip',\n    /**\n     * Class applied to the tooltip anchor element.\n     * @option\n     * @example 'has-tip'\n     */\n    triggerClass: 'has-tip',\n    /**\n     * Minimum breakpoint size at which to open the tooltip.\n     * @option\n     * @example 'small'\n     */\n    showOn: 'small',\n    /**\n     * Custom template to be used to generate markup for tooltip.\n     * @option\n     * @example '&lt;div class=\"tooltip\"&gt;&lt;/div&gt;'\n     */\n    template: '',\n    /**\n     * Text displayed in the tooltip template on open.\n     * @option\n     * @example 'Some cool space fact here.'\n     */\n    tipText: '',\n    touchCloseText: 'Tap to close.',\n    /**\n     * Allows the tooltip to remain open if triggered with a click or touch event.\n     * @option\n     * @example true\n     */\n    clickOpen: true,\n    /**\n     * Additional positioning classes, set by the JS\n     * @option\n     * @example 'top'\n     */\n    positionClass: '',\n    /**\n     * Distance, in pixels, the template should push away from the anchor on the Y axis.\n     * @option\n     * @example 10\n     */\n    vOffset: 10,\n    /**\n     * Distance, in pixels, the template should push away from the anchor on the X axis, if aligned to a side.\n     * @option\n     * @example 12\n     */\n    hOffset: 12,\n    /**\n    * Allow HTML in tooltip. Warning: If you are loading user-generated content into tooltips,\n    * allowing HTML may open yourself up to XSS attacks.\n    * @option\n    * @example false\n    */\n    allowHtml: false\n  };\n\n  /**\n   * TODO utilize resize event trigger\n   */\n\n  // Window exports\n  Foundation.plugin(Tooltip, 'Tooltip');\n}(jQuery);\n'use strict';\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n!function ($) {\n\n  /**\n   * ResponsiveAccordionTabs module.\n   * @module foundation.responsiveAccordionTabs\n   * @requires foundation.util.keyboard\n   * @requires foundation.util.timerAndImageLoader\n   * @requires foundation.util.motion\n   * @requires foundation.accordion\n   * @requires foundation.tabs\n   */\n\n  var ResponsiveAccordionTabs = function () {\n    /**\n     * Creates a new instance of a responsive accordion tabs.\n     * @class\n     * @fires ResponsiveAccordionTabs#init\n     * @param {jQuery} element - jQuery object to make into a dropdown menu.\n     * @param {Object} options - Overrides to the default plugin settings.\n     */\n    function ResponsiveAccordionTabs(element, options) {\n      _classCallCheck(this, ResponsiveAccordionTabs);\n\n      this.$element = $(element);\n      this.options = $.extend({}, this.$element.data(), options);\n      this.rules = this.$element.data('responsive-accordion-tabs');\n      this.currentMq = null;\n      this.currentPlugin = null;\n      if (!this.$element.attr('id')) {\n        this.$element.attr('id', Foundation.GetYoDigits(6, 'responsiveaccordiontabs'));\n      };\n\n      this._init();\n      this._events();\n\n      Foundation.registerPlugin(this, 'ResponsiveAccordionTabs');\n    }\n\n    /**\n     * Initializes the Menu by parsing the classes from the 'data-responsive-accordion-tabs' attribute on the element.\n     * @function\n     * @private\n     */\n\n\n    _createClass(ResponsiveAccordionTabs, [{\n      key: '_init',\n      value: function _init() {\n        // The first time an Interchange plugin is initialized, this.rules is converted from a string of \"classes\" to an object of rules\n        if (typeof this.rules === 'string') {\n          var rulesTree = {};\n\n          // Parse rules from \"classes\" pulled from data attribute\n          var rules = this.rules.split(' ');\n\n          // Iterate through every rule found\n          for (var i = 0; i < rules.length; i++) {\n            var rule = rules[i].split('-');\n            var ruleSize = rule.length > 1 ? rule[0] : 'small';\n            var rulePlugin = rule.length > 1 ? rule[1] : rule[0];\n\n            if (MenuPlugins[rulePlugin] !== null) {\n              rulesTree[ruleSize] = MenuPlugins[rulePlugin];\n            }\n          }\n\n          this.rules = rulesTree;\n        }\n\n        this._getAllOptions();\n\n        if (!$.isEmptyObject(this.rules)) {\n          this._checkMediaQueries();\n        }\n      }\n    }, {\n      key: '_getAllOptions',\n      value: function _getAllOptions() {\n        //get all defaults and options\n        var _this = this;\n        _this.allOptions = {};\n        for (var key in MenuPlugins) {\n          if (MenuPlugins.hasOwnProperty(key)) {\n            var obj = MenuPlugins[key];\n            try {\n              var dummyPlugin = $('<ul></ul>');\n              var tmpPlugin = new obj.plugin(dummyPlugin, _this.options);\n              for (var keyKey in tmpPlugin.options) {\n                if (tmpPlugin.options.hasOwnProperty(keyKey) && keyKey !== 'zfPlugin') {\n                  var objObj = tmpPlugin.options[keyKey];\n                  _this.allOptions[keyKey] = objObj;\n                }\n              }\n              tmpPlugin.destroy();\n            } catch (e) {}\n          }\n        }\n      }\n\n      /**\n       * Initializes events for the Menu.\n       * @function\n       * @private\n       */\n\n    }, {\n      key: '_events',\n      value: function _events() {\n        var _this = this;\n\n        $(window).on('changed.zf.mediaquery', function () {\n          _this._checkMediaQueries();\n        });\n      }\n\n      /**\n       * Checks the current screen width against available media queries. If the media query has changed, and the plugin needed has changed, the plugins will swap out.\n       * @function\n       * @private\n       */\n\n    }, {\n      key: '_checkMediaQueries',\n      value: function _checkMediaQueries() {\n        var matchedMq,\n            _this = this;\n        // Iterate through each rule and find the last matching rule\n        $.each(this.rules, function (key) {\n          if (Foundation.MediaQuery.atLeast(key)) {\n            matchedMq = key;\n          }\n        });\n\n        // No match? No dice\n        if (!matchedMq) return;\n\n        // Plugin already initialized? We good\n        if (this.currentPlugin instanceof this.rules[matchedMq].plugin) return;\n\n        // Remove existing plugin-specific CSS classes\n        $.each(MenuPlugins, function (key, value) {\n          _this.$element.removeClass(value.cssClass);\n        });\n\n        // Add the CSS class for the new plugin\n        this.$element.addClass(this.rules[matchedMq].cssClass);\n\n        // Create an instance of the new plugin\n        if (this.currentPlugin) {\n          //don't know why but on nested elements data zfPlugin get's lost\n          if (!this.currentPlugin.$element.data('zfPlugin') && this.storezfData) this.currentPlugin.$element.data('zfPlugin', this.storezfData);\n          this.currentPlugin.destroy();\n        }\n        this._handleMarkup(this.rules[matchedMq].cssClass);\n        this.currentPlugin = new this.rules[matchedMq].plugin(this.$element, {});\n        this.storezfData = this.currentPlugin.$element.data('zfPlugin');\n      }\n    }, {\n      key: '_handleMarkup',\n      value: function _handleMarkup(toSet) {\n        var _this = this,\n            fromString = 'accordion';\n        var $panels = $('[data-tabs-content=' + this.$element.attr('id') + ']');\n        if ($panels.length) fromString = 'tabs';\n        if (fromString === toSet) {\n          return;\n        };\n\n        var tabsTitle = _this.allOptions.linkClass ? _this.allOptions.linkClass : 'tabs-title';\n        var tabsPanel = _this.allOptions.panelClass ? _this.allOptions.panelClass : 'tabs-panel';\n\n        this.$element.removeAttr('role');\n        var $liHeads = this.$element.children('.' + tabsTitle + ',[data-accordion-item]').removeClass(tabsTitle).removeClass('accordion-item').removeAttr('data-accordion-item');\n        var $liHeadsA = $liHeads.children('a').removeClass('accordion-title');\n\n        if (fromString === 'tabs') {\n          $panels = $panels.children('.' + tabsPanel).removeClass(tabsPanel).removeAttr('role').removeAttr('aria-hidden').removeAttr('aria-labelledby');\n          $panels.children('a').removeAttr('role').removeAttr('aria-controls').removeAttr('aria-selected');\n        } else {\n          $panels = $liHeads.children('[data-tab-content]').removeClass('accordion-content');\n        };\n\n        $panels.css({ display: '', visibility: '' });\n        $liHeads.css({ display: '', visibility: '' });\n        if (toSet === 'accordion') {\n          $panels.each(function (key, value) {\n            $(value).appendTo($liHeads.get(key)).addClass('accordion-content').attr('data-tab-content', '').removeClass('is-active').css({ height: '' });\n            $('[data-tabs-content=' + _this.$element.attr('id') + ']').after('<div id=\"tabs-placeholder-' + _this.$element.attr('id') + '\"></div>').remove();\n            $liHeads.addClass('accordion-item').attr('data-accordion-item', '');\n            $liHeadsA.addClass('accordion-title');\n          });\n        } else if (toSet === 'tabs') {\n          var $tabsContent = $('[data-tabs-content=' + _this.$element.attr('id') + ']');\n          var $placeholder = $('#tabs-placeholder-' + _this.$element.attr('id'));\n          if ($placeholder.length) {\n            $tabsContent = $('<div class=\"tabs-content\"></div>').insertAfter($placeholder).attr('data-tabs-content', _this.$element.attr('id'));\n            $placeholder.remove();\n          } else {\n            $tabsContent = $('<div class=\"tabs-content\"></div>').insertAfter(_this.$element).attr('data-tabs-content', _this.$element.attr('id'));\n          };\n          $panels.each(function (key, value) {\n            var tempValue = $(value).appendTo($tabsContent).addClass(tabsPanel);\n            var hash = $liHeadsA.get(key).hash.slice(1);\n            var id = $(value).attr('id') || Foundation.GetYoDigits(6, 'accordion');\n            if (hash !== id) {\n              if (hash !== '') {\n                $(value).attr('id', hash);\n              } else {\n                hash = id;\n                $(value).attr('id', hash);\n                $($liHeadsA.get(key)).attr('href', $($liHeadsA.get(key)).attr('href').replace('#', '') + '#' + hash);\n              };\n            };\n            var isActive = $($liHeads.get(key)).hasClass('is-active');\n            if (isActive) {\n              tempValue.addClass('is-active');\n            };\n          });\n          $liHeads.addClass(tabsTitle);\n        };\n      }\n\n      /**\n       * Destroys the instance of the current plugin on this element, as well as the window resize handler that switches the plugins out.\n       * @function\n       */\n\n    }, {\n      key: 'destroy',\n      value: function destroy() {\n        if (this.currentPlugin) this.currentPlugin.destroy();\n        $(window).off('.zf.ResponsiveAccordionTabs');\n        Foundation.unregisterPlugin(this);\n      }\n    }]);\n\n    return ResponsiveAccordionTabs;\n  }();\n\n  ResponsiveAccordionTabs.defaults = {};\n\n  // The plugin matches the plugin classes with these plugin instances.\n  var MenuPlugins = {\n    tabs: {\n      cssClass: 'tabs',\n      plugin: Foundation._plugins.tabs || null\n    },\n    accordion: {\n      cssClass: 'accordion',\n      plugin: Foundation._plugins.accordion || null\n    }\n  };\n\n  // Window exports\n  Foundation.plugin(ResponsiveAccordionTabs, 'ResponsiveAccordionTabs');\n}(jQuery);\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/foundation-sites/dist/js/foundation.js\n// module id = 94\n// module chunks = 0"],"sourceRoot":""}